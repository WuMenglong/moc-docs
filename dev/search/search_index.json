{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Get Start \u5728 en \u4e0b\u5199\u82f1\u6587\u6587\u6863 \u5728 zh \u4e0b\u5199\u4e2d\u6587\u6587\u6863","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#get-start","text":"\u5728 en \u4e0b\u5199\u82f1\u6587\u6587\u6863 \u5728 zh \u4e0b\u5199\u4e2d\u6587\u6587\u6863","title":"Get Start"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/","text":"INSERT \u63d2\u5165 \u672c\u6587\u6863\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 SQL \u8bed\u53e5\u5728 MO Cloud \u4e2d\u63d2\u5165\u6570\u636e\u3002 \u5f00\u59cb\u524d\u51c6\u5907 \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 INSERT INTO \u8bed\u53e5 INSERT INTO \u8bed\u53e5\u6709\u4ee5\u4e0b\u5199\u6cd5\uff1a \u6307\u5b9a\u8981\u63d2\u5165\u7684\u5217\u540d\u548c\u503c\uff1a INSERT INTO tbl_name (a,b,c) VALUES (1,2,3); \u5982\u679c\u8981\u4e3a\u8868\u7684\u6240\u6709\u5217\u6dfb\u52a0\u503c\uff0c\u5219\u4e0d\u9700\u8981\u5728 SQL \u67e5\u8be2\u4e2d\u6307\u5b9a\u5217\u540d\u3002\u5fc5\u987b\u786e\u4fdd\u503c\u7684\u987a\u5e8f\u4e0e\u8868\u4e2d\u5217\u7684\u987a\u5e8f\u76f8\u540c\u3002 INSERT INTO \u8bed\u6cd5\u5982\u4e0b\uff1a INSERT INTO tbl_name VALUES (1,2,3); \u4f7f\u7528 INSERT...VALUES... \u8bed\u53e5\u53ef\u4ee5\u63d2\u5165\u591a\u884c\u3002\u8bed\u53e5\u4e2d\u5fc5\u987b\u5305\u542b\u591a\u4e2a\u7528\u9017\u53f7\u5206\u9694\u7684\u503c\u5217\u8868\uff0c\u503c\u5217\u8868\u7528\u5706\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u5e76\u7528\u9017\u53f7\u5206\u9694\u3002\u793a\u4f8b\u5982\u4e0b\uff1a INSERT INTO tbl_name (a,b,c) VALUES(1,2,3), (4,5,6), (7,8,9); \u6570\u636e\u5e93\u793a\u4f8b \u4ee5\u4e0b\u662f\u4ece Northwind \u793a\u4f8b\u6570\u636e\u5e93\u4e2d\u7684 Customers \u8868\u4e2d\u9009\u62e9\u7684\u8868\u793a\u4f8b\uff1a CREATE TABLE Customers ( CustomerID INT AUTO_INCREMENT NOT NULL, CustomerName VARCHAR(40) NOT NULL, ContactName VARCHAR(30) NULL, Address VARCHAR(60) NULL, City VARCHAR(15) NULL, PostalCode VARCHAR(10) NULL, Country VARCHAR(15) NULL, PRIMARY KEY (CustomerID) ); CustomerID CustomerName ContactName Address City PostalCode Country 89 White Clover Markets Karl Jablonski 305 - 14th Ave. S. Suite 3B Seattle 98128 USA 90 Wilman Kala Matti Karttunen Keskuskatu 45 Helsinki 21240 Finland 91 Wolski Zbyszek ul. Filtrowa 68 Walla 01-012 Poland INSERT INTO \u793a\u4f8b \u4e0b\u9762\u7684 SQL \u8bed\u53e5\u5728 Customers \u8868\u4e2d\u63d2\u5165\u4e86\u4e00\u6761\u65b0\u8bb0\u5f55\uff1a Example INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'); Customers \u8868\u5c55\u793a\u51fa\u6765\u5982\u4e0b\u6240\u793a\uff1a CustomerID CustomerName ContactName Address City PostalCode Country 89 White Clover Markets Karl Jablonski 305 - 14th Ave. S. Suite 3B Seattle 98128 USA 90 Wilman Kala Matti Karttunen Keskuskatu 45 Helsinki 21240 Finland 91 Wolski Zbyszek ul. Filtrowa 68 Walla 01-012 Poland 92 Cardinal Tom B. Erichsen Skagen 21 Stavanger 4006 Norway \u4ec5\u5728\u6307\u5b9a\u5217\u4e2d\u63d2\u5165\u6570\u636e MO Cloud \u4e5f\u652f\u6301\u4f7f\u7528 SQL \u8bed\u53e5\u4ec5\u5728\u7279\u5b9a\u5217\u4e2d\u63d2\u5165\u6570\u636e\u3002 \u793a\u4f8b \u4f7f\u7528\u4e0b\u9762\u7684 SQL \u8bed\u53e5\u5c06\u63d2\u5165\u4e00\u6761\u65b0\u8bb0\u5f55\uff0c\u4f46\u53ea\u63d2\u5165 CustomerName \u3001 City \u548c Country \u5217\u4e2d\u7684\u6570\u636e\uff0c\u540c\u65f6 CustomerID \u5c06\u81ea\u52a8\u66f4\u65b0\uff1a INSERT INTO Customers (CustomerName, City, Country) VALUES ('Cardinal', 'Stavanger', 'Norway'); Customers \u8868\u5c55\u793a\u51fa\u6765\u5982\u4e0b\u6240\u793a\uff1a CustomerID CustomerName ContactName Address City PostalCode Country 89 White Clover Markets Karl Jablonski 305 - 14th Ave. S. Suite 3B Seattle 98128 USA 90 Wilman Kala Matti Karttunen Keskuskatu 45 Helsinki 21240 Finland 91 Wolski Zbyszek ul. Filtrowa 68 Walla 01-012 Poland 92 Cardinal null null Stavanger null Norway INSERT INTO...SELECT \u4f7f\u7528 INSERT INTO SELECT \uff0c\u4f60\u53ef\u4ee5\u4ece SELECT \u8bed\u53e5\u7684\u7ed3\u679c\u4e2d\u5feb\u901f\u63d2\u5165\u591a\u884c\u5230\u8868\u4e2d\uff0c SELECT \u8bed\u53e5\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u4e2d\u8fdb\u884c\u9009\u62e9\u3002 INSERT INTO SELECT \u8bed\u53e5\u8981\u6c42\u6e90\u8868\u548c\u76ee\u6807\u8868\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u5339\u914d\u3002 INSERT INTO SELECT \u8bed\u6cd5\u89e3\u91ca \u4ece\u4e00\u4e2a\u8868\u590d\u5236\u6240\u6709\u5217\u5230\u53e6\u4e00\u4e2a\u8868\uff1a INSERT INTO *table2* SELECT * FROM *table1 *WHERE *condition*; \u53ea\u4ece\u4e00\u4e2a\u8868\u590d\u5236\u4e00\u4e9b\u5217\u5230\u53e6\u4e00\u4e2a\u8868\uff1a INSERT INTO *table2* (*column1*, *column2*, *column3*, ...) SELECT *column1*, *column2*, *column3*, ... FROM *table1* WHERE *condition*; Northwind \u6570\u636e\u5e93\u793a\u4f8b \u4ee5\u4e0b\u662f\u4ece Northwind \u793a\u4f8b\u6570\u636e\u5e93\u4e2d\u7684\u8868\u4e2d\u9009\u62e9\u7684\u8868\u793a\u4f8b\uff1a CREATE TABLE Customers ( CustomerID INT AUTO_INCREMENT NOT NULL, CustomerName VARCHAR(40) NOT NULL, ContactName VARCHAR(30) NULL, Address VARCHAR(60) NULL, City VARCHAR(15) NULL, PostalCode VARCHAR(10) NULL, Country VARCHAR(15) NULL, PRIMARY KEY (CustomerID) ); CREATE TABLE Suppliers ( SupplierID INT AUTO_INCREMENT NOT NULL, SupplierName VARCHAR(40) NOT NULL, ContactName VARCHAR(30) NULL, Address VARCHAR(60) NULL, City VARCHAR(15) NULL, PostalCode VARCHAR(10) NULL, Country VARCHAR(15) NULL, PRIMARY KEY (SupplierID) ); Customers \u8868\u5c55\u793a\u51fa\u6765\u5982\u4e0b\u6240\u793a\uff1a CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constituci\u00f3n 2222 M\u00e9xico D.F. 05021 Mexico 3 Antonio Moreno Taquer\u00eda Antonio Moreno Mataderos 2312 M\u00e9xico D.F. 05023 Mexico Suppliers \u8868\u5c55\u793a\u51fa\u6765\u5982\u4e0b\u6240\u793a\uff1a SupplierID SupplierName ContactName Address City PostalCode Country 1 Exotic Liquid Charlotte Cooper 49 Gilbert St. Londona EC1 4SD UK 2 New Orleans Cajun Delights Shelley Burke P.O. Box 78934 New Orleans 70117 USA 3 Grandma Kelly's Homestead Regina Murphy 707 Oxford Rd. Ann Arbor 48104 USA \u793a\u4f8b \u4e0b\u9762\u7684 SQL \u8bed\u53e5\u5c06 Suppliers \u590d\u5236\u5230 Customers \u4e2d\uff0c\u540c\u65f6\u672a\u586b\u5145\u6570\u636e\u7684\u5217\u5c06\u586b\u5145\u4e3a NULL \uff1a INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers; Customers \u8868\u5c55\u793a\u51fa\u6765\u5982\u4e0b\u6240\u793a\uff1a CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constituci\u00f3n 2222 M\u00e9xico D.F. 05021 Mexico 3 Antonio Moreno Taquer\u00eda Antonio Moreno Mataderos 2312 M\u00e9xico D.F. 05023 Mexico 4 Exotic Liquid null null Londona null UK 5 New Orleans Cajun Delights null null New Orleans null USA 6 Grandma Kelly's Homestead null null Ann Arbor null USA","title":"INSERT \u63d2\u5165"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#insert","text":"\u672c\u6587\u6863\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 SQL \u8bed\u53e5\u5728 MO Cloud \u4e2d\u63d2\u5165\u6570\u636e\u3002","title":"INSERT \u63d2\u5165"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#_1","text":"\u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#insert-into","text":"INSERT INTO \u8bed\u53e5\u6709\u4ee5\u4e0b\u5199\u6cd5\uff1a \u6307\u5b9a\u8981\u63d2\u5165\u7684\u5217\u540d\u548c\u503c\uff1a INSERT INTO tbl_name (a,b,c) VALUES (1,2,3); \u5982\u679c\u8981\u4e3a\u8868\u7684\u6240\u6709\u5217\u6dfb\u52a0\u503c\uff0c\u5219\u4e0d\u9700\u8981\u5728 SQL \u67e5\u8be2\u4e2d\u6307\u5b9a\u5217\u540d\u3002\u5fc5\u987b\u786e\u4fdd\u503c\u7684\u987a\u5e8f\u4e0e\u8868\u4e2d\u5217\u7684\u987a\u5e8f\u76f8\u540c\u3002 INSERT INTO \u8bed\u6cd5\u5982\u4e0b\uff1a INSERT INTO tbl_name VALUES (1,2,3); \u4f7f\u7528 INSERT...VALUES... \u8bed\u53e5\u53ef\u4ee5\u63d2\u5165\u591a\u884c\u3002\u8bed\u53e5\u4e2d\u5fc5\u987b\u5305\u542b\u591a\u4e2a\u7528\u9017\u53f7\u5206\u9694\u7684\u503c\u5217\u8868\uff0c\u503c\u5217\u8868\u7528\u5706\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u5e76\u7528\u9017\u53f7\u5206\u9694\u3002\u793a\u4f8b\u5982\u4e0b\uff1a INSERT INTO tbl_name (a,b,c) VALUES(1,2,3), (4,5,6), (7,8,9);","title":"INSERT INTO \u8bed\u53e5"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#_2","text":"\u4ee5\u4e0b\u662f\u4ece Northwind \u793a\u4f8b\u6570\u636e\u5e93\u4e2d\u7684 Customers \u8868\u4e2d\u9009\u62e9\u7684\u8868\u793a\u4f8b\uff1a CREATE TABLE Customers ( CustomerID INT AUTO_INCREMENT NOT NULL, CustomerName VARCHAR(40) NOT NULL, ContactName VARCHAR(30) NULL, Address VARCHAR(60) NULL, City VARCHAR(15) NULL, PostalCode VARCHAR(10) NULL, Country VARCHAR(15) NULL, PRIMARY KEY (CustomerID) ); CustomerID CustomerName ContactName Address City PostalCode Country 89 White Clover Markets Karl Jablonski 305 - 14th Ave. S. Suite 3B Seattle 98128 USA 90 Wilman Kala Matti Karttunen Keskuskatu 45 Helsinki 21240 Finland 91 Wolski Zbyszek ul. Filtrowa 68 Walla 01-012 Poland","title":"\u6570\u636e\u5e93\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#insert-into_1","text":"\u4e0b\u9762\u7684 SQL \u8bed\u53e5\u5728 Customers \u8868\u4e2d\u63d2\u5165\u4e86\u4e00\u6761\u65b0\u8bb0\u5f55\uff1a","title":"INSERT INTO \u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#example","text":"INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'); Customers \u8868\u5c55\u793a\u51fa\u6765\u5982\u4e0b\u6240\u793a\uff1a CustomerID CustomerName ContactName Address City PostalCode Country 89 White Clover Markets Karl Jablonski 305 - 14th Ave. S. Suite 3B Seattle 98128 USA 90 Wilman Kala Matti Karttunen Keskuskatu 45 Helsinki 21240 Finland 91 Wolski Zbyszek ul. Filtrowa 68 Walla 01-012 Poland 92 Cardinal Tom B. Erichsen Skagen 21 Stavanger 4006 Norway","title":"Example"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#_3","text":"MO Cloud \u4e5f\u652f\u6301\u4f7f\u7528 SQL \u8bed\u53e5\u4ec5\u5728\u7279\u5b9a\u5217\u4e2d\u63d2\u5165\u6570\u636e\u3002","title":"\u4ec5\u5728\u6307\u5b9a\u5217\u4e2d\u63d2\u5165\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#_4","text":"\u4f7f\u7528\u4e0b\u9762\u7684 SQL \u8bed\u53e5\u5c06\u63d2\u5165\u4e00\u6761\u65b0\u8bb0\u5f55\uff0c\u4f46\u53ea\u63d2\u5165 CustomerName \u3001 City \u548c Country \u5217\u4e2d\u7684\u6570\u636e\uff0c\u540c\u65f6 CustomerID \u5c06\u81ea\u52a8\u66f4\u65b0\uff1a INSERT INTO Customers (CustomerName, City, Country) VALUES ('Cardinal', 'Stavanger', 'Norway'); Customers \u8868\u5c55\u793a\u51fa\u6765\u5982\u4e0b\u6240\u793a\uff1a CustomerID CustomerName ContactName Address City PostalCode Country 89 White Clover Markets Karl Jablonski 305 - 14th Ave. S. Suite 3B Seattle 98128 USA 90 Wilman Kala Matti Karttunen Keskuskatu 45 Helsinki 21240 Finland 91 Wolski Zbyszek ul. Filtrowa 68 Walla 01-012 Poland 92 Cardinal null null Stavanger null Norway","title":"\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#insert-intoselect","text":"\u4f7f\u7528 INSERT INTO SELECT \uff0c\u4f60\u53ef\u4ee5\u4ece SELECT \u8bed\u53e5\u7684\u7ed3\u679c\u4e2d\u5feb\u901f\u63d2\u5165\u591a\u884c\u5230\u8868\u4e2d\uff0c SELECT \u8bed\u53e5\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u4e2d\u8fdb\u884c\u9009\u62e9\u3002 INSERT INTO SELECT \u8bed\u53e5\u8981\u6c42\u6e90\u8868\u548c\u76ee\u6807\u8868\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u5339\u914d\u3002","title":"INSERT INTO...SELECT"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#insert-into-select","text":"\u4ece\u4e00\u4e2a\u8868\u590d\u5236\u6240\u6709\u5217\u5230\u53e6\u4e00\u4e2a\u8868\uff1a INSERT INTO *table2* SELECT * FROM *table1 *WHERE *condition*; \u53ea\u4ece\u4e00\u4e2a\u8868\u590d\u5236\u4e00\u4e9b\u5217\u5230\u53e6\u4e00\u4e2a\u8868\uff1a INSERT INTO *table2* (*column1*, *column2*, *column3*, ...) SELECT *column1*, *column2*, *column3*, ... FROM *table1* WHERE *condition*;","title":"INSERT INTO SELECT \u8bed\u6cd5\u89e3\u91ca"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#northwind","text":"\u4ee5\u4e0b\u662f\u4ece Northwind \u793a\u4f8b\u6570\u636e\u5e93\u4e2d\u7684\u8868\u4e2d\u9009\u62e9\u7684\u8868\u793a\u4f8b\uff1a CREATE TABLE Customers ( CustomerID INT AUTO_INCREMENT NOT NULL, CustomerName VARCHAR(40) NOT NULL, ContactName VARCHAR(30) NULL, Address VARCHAR(60) NULL, City VARCHAR(15) NULL, PostalCode VARCHAR(10) NULL, Country VARCHAR(15) NULL, PRIMARY KEY (CustomerID) ); CREATE TABLE Suppliers ( SupplierID INT AUTO_INCREMENT NOT NULL, SupplierName VARCHAR(40) NOT NULL, ContactName VARCHAR(30) NULL, Address VARCHAR(60) NULL, City VARCHAR(15) NULL, PostalCode VARCHAR(10) NULL, Country VARCHAR(15) NULL, PRIMARY KEY (SupplierID) ); Customers \u8868\u5c55\u793a\u51fa\u6765\u5982\u4e0b\u6240\u793a\uff1a CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constituci\u00f3n 2222 M\u00e9xico D.F. 05021 Mexico 3 Antonio Moreno Taquer\u00eda Antonio Moreno Mataderos 2312 M\u00e9xico D.F. 05023 Mexico Suppliers \u8868\u5c55\u793a\u51fa\u6765\u5982\u4e0b\u6240\u793a\uff1a SupplierID SupplierName ContactName Address City PostalCode Country 1 Exotic Liquid Charlotte Cooper 49 Gilbert St. Londona EC1 4SD UK 2 New Orleans Cajun Delights Shelley Burke P.O. Box 78934 New Orleans 70117 USA 3 Grandma Kelly's Homestead Regina Murphy 707 Oxford Rd. Ann Arbor 48104 USA","title":"Northwind \u6570\u636e\u5e93\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/insert-data/#_5","text":"\u4e0b\u9762\u7684 SQL \u8bed\u53e5\u5c06 Suppliers \u590d\u5236\u5230 Customers \u4e2d\uff0c\u540c\u65f6\u672a\u586b\u5145\u6570\u636e\u7684\u5217\u5c06\u586b\u5145\u4e3a NULL \uff1a INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers; Customers \u8868\u5c55\u793a\u51fa\u6765\u5982\u4e0b\u6240\u793a\uff1a CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constituci\u00f3n 2222 M\u00e9xico D.F. 05021 Mexico 3 Antonio Moreno Taquer\u00eda Antonio Moreno Mataderos 2312 M\u00e9xico D.F. 05023 Mexico 4 Exotic Liquid null null Londona null UK 5 New Orleans Cajun Delights null null New Orleans null USA 6 Grandma Kelly's Homestead null null Ann Arbor null USA","title":"\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-golang-crud-demo/","text":"Golang \u57fa\u7840\u793a\u4f8b \u914d\u7f6e\u73af\u5883 \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 Golang 1.18 \u7248\u672c\u53ca\u4ee5\u4e0a \uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u884c\u786e\u8ba4\u4f60\u7684 Golang \u7248\u672c\uff1a #To check with Golang installation and its version go version \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef\u3002 \u4e0b\u8f7d\u5e76\u5b89\u88c5 Go-MySQL-Driver \u5de5\u5177\u3002 \u6b65\u9aa4 \u901a\u8fc7 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5\u5230 MatrixOne\u3002\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a test \u7684\u65b0\u6570\u636e\u5e93\u3002 mysql> create database test; \u521b\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a golang_crud_matrixone.go \u7684\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u62f7\u8d1d\u81f3\u6587\u4ef6\u5185\uff1a package main import ( \"database/sql\" \"fmt\" \"log\" _ \"github.com/go-sql-driver/mysql\" ) func main () { // Open a new connection to MatrixOne db , err := sql . Open ( \"mysql\" , \"root:111@tcp(127.0.0.1:6001)/test\" ) checkErr ( err ) // Create a table _ , err2 := db . Exec ( \"CREATE TABLE `userinfo` (`uid` INT(10) NOT NULL AUTO_INCREMENT,`username` VARCHAR(64) NULL DEFAULT NULL,`department` VARCHAR(64) NULL DEFAULT NULL,`created` DATETIME NULL DEFAULT NULL, PRIMARY KEY (`uid`));\" ) if err2 != nil { log . Fatal ( err2 ) } fmt . Print ( \"Successfully Created \\n \" ) // Insert a record stmt , err := db . Prepare ( \"INSERT userinfo SET username=?,department=?,created=?\" ) checkErr ( err ) res , err := stmt . Exec ( \"Alex\" , \"r&d\" , \"2023-01-01 12:00:00\" ) checkErr ( err ) id , err := res . LastInsertId () checkErr ( err ) fmt . Println ( id ) // Update a record stmt , err = db . Prepare ( \"update userinfo set username=? where uid=?\" ) checkErr ( err ) res , err = stmt . Exec ( \"Mark\" , id ) checkErr ( err ) affect , err := res . RowsAffected () checkErr ( err ) fmt . Println ( affect ) // Query all records rows , err := db . Query ( \"SELECT * FROM userinfo\" ) checkErr ( err ) for rows . Next () { var uid int var username string var department string var created string err = rows . Scan ( & uid , & username , & department , & created ) checkErr ( err ) fmt . Println ( uid ) fmt . Println ( username ) fmt . Println ( department ) fmt . Println ( created ) } // Delete a record stmt , err = db . Prepare ( \"delete from userinfo where uid=?\" ) checkErr ( err ) res , err = stmt . Exec ( id ) checkErr ( err ) affect , err = res . RowsAffected () checkErr ( err ) fmt . Println ( affect ) db . Close () } func checkErr ( err error ) { if err != nil { panic ( err ) } } \u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u884c\uff0c\u6267\u884c\u6b64 Golang \u6587\u4ef6\u3002 > go run golang_crud_matrixone.go Successfully Created 1 1 1 Mark r&d 2023-01-01 1","title":"Golang \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-golang-crud-demo/#golang","text":"","title":"Golang \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-golang-crud-demo/#_1","text":"\u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 Golang 1.18 \u7248\u672c\u53ca\u4ee5\u4e0a \uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u884c\u786e\u8ba4\u4f60\u7684 Golang \u7248\u672c\uff1a #To check with Golang installation and its version go version \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef\u3002 \u4e0b\u8f7d\u5e76\u5b89\u88c5 Go-MySQL-Driver \u5de5\u5177\u3002","title":"\u914d\u7f6e\u73af\u5883"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-golang-crud-demo/#_2","text":"\u901a\u8fc7 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5\u5230 MatrixOne\u3002\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a test \u7684\u65b0\u6570\u636e\u5e93\u3002 mysql> create database test; \u521b\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a golang_crud_matrixone.go \u7684\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u62f7\u8d1d\u81f3\u6587\u4ef6\u5185\uff1a package main import ( \"database/sql\" \"fmt\" \"log\" _ \"github.com/go-sql-driver/mysql\" ) func main () { // Open a new connection to MatrixOne db , err := sql . Open ( \"mysql\" , \"root:111@tcp(127.0.0.1:6001)/test\" ) checkErr ( err ) // Create a table _ , err2 := db . Exec ( \"CREATE TABLE `userinfo` (`uid` INT(10) NOT NULL AUTO_INCREMENT,`username` VARCHAR(64) NULL DEFAULT NULL,`department` VARCHAR(64) NULL DEFAULT NULL,`created` DATETIME NULL DEFAULT NULL, PRIMARY KEY (`uid`));\" ) if err2 != nil { log . Fatal ( err2 ) } fmt . Print ( \"Successfully Created \\n \" ) // Insert a record stmt , err := db . Prepare ( \"INSERT userinfo SET username=?,department=?,created=?\" ) checkErr ( err ) res , err := stmt . Exec ( \"Alex\" , \"r&d\" , \"2023-01-01 12:00:00\" ) checkErr ( err ) id , err := res . LastInsertId () checkErr ( err ) fmt . Println ( id ) // Update a record stmt , err = db . Prepare ( \"update userinfo set username=? where uid=?\" ) checkErr ( err ) res , err = stmt . Exec ( \"Mark\" , id ) checkErr ( err ) affect , err := res . RowsAffected () checkErr ( err ) fmt . Println ( affect ) // Query all records rows , err := db . Query ( \"SELECT * FROM userinfo\" ) checkErr ( err ) for rows . Next () { var uid int var username string var department string var created string err = rows . Scan ( & uid , & username , & department , & created ) checkErr ( err ) fmt . Println ( uid ) fmt . Println ( username ) fmt . Println ( department ) fmt . Println ( created ) } // Delete a record stmt , err = db . Prepare ( \"delete from userinfo where uid=?\" ) checkErr ( err ) res , err = stmt . Exec ( id ) checkErr ( err ) affect , err = res . RowsAffected () checkErr ( err ) fmt . Println ( affect ) db . Close () } func checkErr ( err error ) { if err != nil { panic ( err ) } } \u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u884c\uff0c\u6267\u884c\u6b64 Golang \u6587\u4ef6\u3002 > go run golang_crud_matrixone.go Successfully Created 1 1 1 Mark r&d 2023-01-01 1","title":"\u6b65\u9aa4"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-java-crud-demo/","text":"Java \u57fa\u7840\u793a\u4f8b Note \u672c\u7bc7\u6587\u6863\u6240\u4ecb\u7ecd\u7684\u6f14\u793a\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u4e0b\u8f7d\u5730\u5740\u4e3a\uff1a Java CRUD \u793a\u4f8b \u3002 \u914d\u7f6e\u73af\u5883 \u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u5df2\u7ecf\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e86\u4ee5\u4e0b\u8f6f\u4ef6\u3002 \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \uff0c\u901a\u8fc7 MySQL \u5ba2\u6237\u7aef\u521b\u5efa\u6570\u636e\u5e93\u3002 mysql> create database test; \u4e0b\u8f7d\u5b89\u88c5 lntelliJ IDEA(2022.2.1 or later version) \u3002 \u6839\u636e\u4f60\u7684\u7cfb\u7edf\u73af\u5883\u9009\u62e9 JDK 8+ version \u7248\u672c\u8fdb\u884c\u4e0b\u8f7d\u5b89\u88c5\u3002 MySQL JDBC connector 8.0+ version \uff1a\u63a8\u8350\u4e0b\u8f7d\u5e73\u53f0\u72ec\u7acb\u7248\u672c\uff0c\u5e76\u89e3\u538b\u4e0b\u8f7d\u6587\u4ef6\u3002 Note \u6211\u4eec\u4f7f\u7528 IDEA \u4f5c\u4e3a\u4e00\u4e2a IDE \u793a\u4f8b\u6765\u6f14\u793a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u5730\u9009\u62e9 Eclipse \u6216\u5176\u4ed6 IDE \u5de5\u5177\u5b9e\u8df5\u3002 \u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u7684 Java \u9879\u76ee \u542f\u52a8 IDEA\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Java \u9879\u76ee\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u8fdb\u5165\u83dc\u5355 Project Setting > Libraries \uff0c\u5bfc\u5165 mysql-connector-java-8.0.30.jar \u6587\u4ef6\u3002 \u7f16\u5199 Java \u4ee3\u7801\u8fde\u63a5 MatrixOne \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a JDBCUtils \u7684 Java \u7c7b\u4f5c\u4e3a\u8fde\u63a5\u5b9e\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e2a\u7c7b\u5c06\u4f5c\u4e3a\u8fde\u63a5 MatrixOne \u548c\u6267\u884c SQL \u67e5\u8be2\u7684\u5de5\u5177\u3002 \u5728 src \u76ee\u5f55\u4e0b\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a JDBCUtils.java \u7684\u6587\u4ef6\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u7f16\u8f91\u8be5\u6587\u4ef6\uff1a import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class JDBCUtils { private static String jdbcURL = \"jdbc:mysql://127.0.0.1:6001/test\"; private static String jdbcUsername = \"root\"; private static String jdbcPassword = \"111\"; public static Connection getConnection() { Connection connection = null; try { connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword); } catch (SQLException e) { // TODO Auto-generated catch block e.printStackTrace(); } return connection; } public static void printSQLException(SQLException ex) { for (Throwable e : ex) { if (e instanceof SQLException) { e.printStackTrace(System.err); System.err.println(\"SQLState: \" + ((SQLException) e).getSQLState()); System.err.println(\"Error Code: \" + ((SQLException) e).getErrorCode()); System.err.println(\"Message: \" + e.getMessage()); Throwable t = ex.getCause(); while (t != null) { System.out.println(\"Cause: \" + t); t = t.getCause(); } } } } } \u5176\u6b21\uff0c\u6211\u4eec\u7528 MatrixOne \u7f16\u5199\u521b\u5efa\u3001\u63d2\u5165\u3001\u66f4\u65b0\u548c\u5220\u9664\u64cd\u4f5c\u7684\u793a\u4f8b\u4ee3\u7801\u3002 \u6211\u4eec\u9700\u8981\u5728 src \u76ee\u5f55\u4e0b\u521b\u5efa\u76f8\u5e94\u7684 java \u6e90\u4ee3\u7801\u6587\u4ef6\uff1a Create.java \u3001 Insert.java \u3001 Update.java \u3001 Select.java \uff0c\u5e76\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u5bf9\u5e94\u653e\u5728\u8fd9\u4e9b\u6587\u4ef6\u4e2d\u3002 \u521b\u5efa\uff08 Create.java ) import java.sql.Connection; import java.sql.SQLException; import java.sql.Statement; public class Create { private static final String createTableSQL = \"create table student (\\r\\n\" + \" id int primary key,\\r\\n\" + \" name varchar(20),\\r\\n\" + \" email varchar(20),\\r\\n\" + \" country varchar(20),\\r\\n\" + \" age int\\r\\n\" + \" );\"; public static void main(String[] argv) throws SQLException { Create createTable = new Create(); createTable.createTable(); } public void createTable() throws SQLException { System.out.println(createTableSQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object Statement statement = connection.createStatement();) { // Step 3: Execute the query or update query statement.execute(createTableSQL); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } \u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\u4f1a\u5728 test \u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a\u8868\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u9a8c\u8bc1\u662f\u5426\u521b\u5efa\u4e86\u8868\u3002 mysql> show create table student; +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | student | CREATE TABLE `student` ( `id` INT DEFAULT NULL, `name` VARCHAR(20) DEFAULT NULL, `email` VARCHAR(20) DEFAULT NULL, `country` VARCHAR(20) DEFAULT NULL, `age` INT DEFAULT NULL, PRIMARY KEY (`id`) ) | +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.01 sec) \u63d2\u5165\uff08 Insert.java \uff09 import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; public class Insert { private static final String INSERT_STUDENT_SQL = \"INSERT INTO student\" + \" (id, name, email, country, age) VALUES \" + \" (?, ?, ?, ?, ?);\"; public static void main(String[] argv) throws SQLException { Insert insertTable = new Insert(); insertTable.insertRecord(); } public void insertRecord() throws SQLException { System.out.println(INSERT_STUDENT_SQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(INSERT_STUDENT_SQL)) { preparedStatement.setInt(1, 1); preparedStatement.setString(2, \"Tony\"); preparedStatement.setString(3, \"tony@gmail.com\"); preparedStatement.setString(4, \"US\"); preparedStatement.setString(5, \"20\"); System.out.println(preparedStatement); // Step 3: Execute the query or update query preparedStatement.executeUpdate(); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } \u6267\u884c\u7ed3\u679c\uff1a mysql > select * from student ; + ------+------+----------------+---------+------+ | id | name | email | country | age | + ------+------+----------------+---------+------+ | 1 | Tony | tony @ gmail . com | US | 20 | + ------+------+----------------+---------+------+ 1 row in set ( 0 . 01 sec ) \u66f4\u65b0\uff08 Update.java \uff09 import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; public class Update { private static final String UPDATE_STUDENT_SQL = \"update student set name = ? where id = ?;\"; public static void main(String[] argv) throws SQLException { Update updateTable = new Update(); updateTable.updateRecord(); } public void updateRecord() throws SQLException { System.out.println(UPDATE_STUDENT_SQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_STUDENT_SQL)) { preparedStatement.setString(1, \"Ram\"); preparedStatement.setInt(2, 1); // Step 3: Execute the query or update query preparedStatement.executeUpdate(); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } \u8fd0\u884c\u7ed3\u679c\uff1a mysql > select * from student ; + ------+------+----------------+---------+------+ | id | name | email | country | age | + ------+------+----------------+---------+------+ | 1 | Ram | tony @ gmail . com | US | 20 | + ------+------+----------------+---------+------+ 1 row in set ( 0 . 00 sec ) \u67e5\u8be2\uff08 Select.java \uff09 import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; public class Select { private static final String QUERY = \"select id,name,email,country,age from student where id =?\"; public static void main(String[] args) { // using try-with-resources to avoid closing resources (boiler plate code) // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(QUERY);) { preparedStatement.setInt(1, 1); System.out.println(preparedStatement); // Step 3: Execute the query or update query ResultSet rs = preparedStatement.executeQuery(); // Step 4: Process the ResultSet object. while (rs.next()) { int id = rs.getInt(\"id\"); String name = rs.getString(\"name\"); String email = rs.getString(\"email\"); String country = rs.getString(\"country\"); String password = rs.getString(\"age\"); System.out.println(id + \",\" + name + \",\" + email + \",\" + country + \",\" + password); } } catch (SQLException e) { JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } \u8fd0\u884c\u7ed3\u679c\uff1a","title":"Java \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-java-crud-demo/#java","text":"Note \u672c\u7bc7\u6587\u6863\u6240\u4ecb\u7ecd\u7684\u6f14\u793a\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u4e0b\u8f7d\u5730\u5740\u4e3a\uff1a Java CRUD \u793a\u4f8b \u3002","title":"Java \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-java-crud-demo/#_1","text":"\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u5df2\u7ecf\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e86\u4ee5\u4e0b\u8f6f\u4ef6\u3002 \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \uff0c\u901a\u8fc7 MySQL \u5ba2\u6237\u7aef\u521b\u5efa\u6570\u636e\u5e93\u3002 mysql> create database test; \u4e0b\u8f7d\u5b89\u88c5 lntelliJ IDEA(2022.2.1 or later version) \u3002 \u6839\u636e\u4f60\u7684\u7cfb\u7edf\u73af\u5883\u9009\u62e9 JDK 8+ version \u7248\u672c\u8fdb\u884c\u4e0b\u8f7d\u5b89\u88c5\u3002 MySQL JDBC connector 8.0+ version \uff1a\u63a8\u8350\u4e0b\u8f7d\u5e73\u53f0\u72ec\u7acb\u7248\u672c\uff0c\u5e76\u89e3\u538b\u4e0b\u8f7d\u6587\u4ef6\u3002 Note \u6211\u4eec\u4f7f\u7528 IDEA \u4f5c\u4e3a\u4e00\u4e2a IDE \u793a\u4f8b\u6765\u6f14\u793a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u5730\u9009\u62e9 Eclipse \u6216\u5176\u4ed6 IDE \u5de5\u5177\u5b9e\u8df5\u3002","title":"\u914d\u7f6e\u73af\u5883"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-java-crud-demo/#java_1","text":"\u542f\u52a8 IDEA\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Java \u9879\u76ee\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u8fdb\u5165\u83dc\u5355 Project Setting > Libraries \uff0c\u5bfc\u5165 mysql-connector-java-8.0.30.jar \u6587\u4ef6\u3002","title":"\u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u7684 Java \u9879\u76ee"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-java-crud-demo/#java-matrixone","text":"\u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a JDBCUtils \u7684 Java \u7c7b\u4f5c\u4e3a\u8fde\u63a5\u5b9e\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e2a\u7c7b\u5c06\u4f5c\u4e3a\u8fde\u63a5 MatrixOne \u548c\u6267\u884c SQL \u67e5\u8be2\u7684\u5de5\u5177\u3002 \u5728 src \u76ee\u5f55\u4e0b\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a JDBCUtils.java \u7684\u6587\u4ef6\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u7f16\u8f91\u8be5\u6587\u4ef6\uff1a import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class JDBCUtils { private static String jdbcURL = \"jdbc:mysql://127.0.0.1:6001/test\"; private static String jdbcUsername = \"root\"; private static String jdbcPassword = \"111\"; public static Connection getConnection() { Connection connection = null; try { connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword); } catch (SQLException e) { // TODO Auto-generated catch block e.printStackTrace(); } return connection; } public static void printSQLException(SQLException ex) { for (Throwable e : ex) { if (e instanceof SQLException) { e.printStackTrace(System.err); System.err.println(\"SQLState: \" + ((SQLException) e).getSQLState()); System.err.println(\"Error Code: \" + ((SQLException) e).getErrorCode()); System.err.println(\"Message: \" + e.getMessage()); Throwable t = ex.getCause(); while (t != null) { System.out.println(\"Cause: \" + t); t = t.getCause(); } } } } } \u5176\u6b21\uff0c\u6211\u4eec\u7528 MatrixOne \u7f16\u5199\u521b\u5efa\u3001\u63d2\u5165\u3001\u66f4\u65b0\u548c\u5220\u9664\u64cd\u4f5c\u7684\u793a\u4f8b\u4ee3\u7801\u3002 \u6211\u4eec\u9700\u8981\u5728 src \u76ee\u5f55\u4e0b\u521b\u5efa\u76f8\u5e94\u7684 java \u6e90\u4ee3\u7801\u6587\u4ef6\uff1a Create.java \u3001 Insert.java \u3001 Update.java \u3001 Select.java \uff0c\u5e76\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u5bf9\u5e94\u653e\u5728\u8fd9\u4e9b\u6587\u4ef6\u4e2d\u3002","title":"\u7f16\u5199 Java \u4ee3\u7801\u8fde\u63a5 MatrixOne"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-java-crud-demo/#createjava","text":"import java.sql.Connection; import java.sql.SQLException; import java.sql.Statement; public class Create { private static final String createTableSQL = \"create table student (\\r\\n\" + \" id int primary key,\\r\\n\" + \" name varchar(20),\\r\\n\" + \" email varchar(20),\\r\\n\" + \" country varchar(20),\\r\\n\" + \" age int\\r\\n\" + \" );\"; public static void main(String[] argv) throws SQLException { Create createTable = new Create(); createTable.createTable(); } public void createTable() throws SQLException { System.out.println(createTableSQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object Statement statement = connection.createStatement();) { // Step 3: Execute the query or update query statement.execute(createTableSQL); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } \u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\u4f1a\u5728 test \u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a\u8868\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u9a8c\u8bc1\u662f\u5426\u521b\u5efa\u4e86\u8868\u3002 mysql> show create table student; +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | student | CREATE TABLE `student` ( `id` INT DEFAULT NULL, `name` VARCHAR(20) DEFAULT NULL, `email` VARCHAR(20) DEFAULT NULL, `country` VARCHAR(20) DEFAULT NULL, `age` INT DEFAULT NULL, PRIMARY KEY (`id`) ) | +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.01 sec)","title":"\u521b\u5efa\uff08Create.java)"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-java-crud-demo/#insertjava","text":"import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; public class Insert { private static final String INSERT_STUDENT_SQL = \"INSERT INTO student\" + \" (id, name, email, country, age) VALUES \" + \" (?, ?, ?, ?, ?);\"; public static void main(String[] argv) throws SQLException { Insert insertTable = new Insert(); insertTable.insertRecord(); } public void insertRecord() throws SQLException { System.out.println(INSERT_STUDENT_SQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(INSERT_STUDENT_SQL)) { preparedStatement.setInt(1, 1); preparedStatement.setString(2, \"Tony\"); preparedStatement.setString(3, \"tony@gmail.com\"); preparedStatement.setString(4, \"US\"); preparedStatement.setString(5, \"20\"); System.out.println(preparedStatement); // Step 3: Execute the query or update query preparedStatement.executeUpdate(); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } \u6267\u884c\u7ed3\u679c\uff1a mysql > select * from student ; + ------+------+----------------+---------+------+ | id | name | email | country | age | + ------+------+----------------+---------+------+ | 1 | Tony | tony @ gmail . com | US | 20 | + ------+------+----------------+---------+------+ 1 row in set ( 0 . 01 sec )","title":"\u63d2\u5165\uff08Insert.java\uff09"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-java-crud-demo/#updatejava","text":"import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; public class Update { private static final String UPDATE_STUDENT_SQL = \"update student set name = ? where id = ?;\"; public static void main(String[] argv) throws SQLException { Update updateTable = new Update(); updateTable.updateRecord(); } public void updateRecord() throws SQLException { System.out.println(UPDATE_STUDENT_SQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_STUDENT_SQL)) { preparedStatement.setString(1, \"Ram\"); preparedStatement.setInt(2, 1); // Step 3: Execute the query or update query preparedStatement.executeUpdate(); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } \u8fd0\u884c\u7ed3\u679c\uff1a mysql > select * from student ; + ------+------+----------------+---------+------+ | id | name | email | country | age | + ------+------+----------------+---------+------+ | 1 | Ram | tony @ gmail . com | US | 20 | + ------+------+----------------+---------+------+ 1 row in set ( 0 . 00 sec )","title":"\u66f4\u65b0\uff08Update.java\uff09"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-java-crud-demo/#selectjava","text":"import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; public class Select { private static final String QUERY = \"select id,name,email,country,age from student where id =?\"; public static void main(String[] args) { // using try-with-resources to avoid closing resources (boiler plate code) // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(QUERY);) { preparedStatement.setInt(1, 1); System.out.println(preparedStatement); // Step 3: Execute the query or update query ResultSet rs = preparedStatement.executeQuery(); // Step 4: Process the ResultSet object. while (rs.next()) { int id = rs.getInt(\"id\"); String name = rs.getString(\"name\"); String email = rs.getString(\"email\"); String country = rs.getString(\"country\"); String password = rs.getString(\"age\"); System.out.println(id + \",\" + name + \",\" + email + \",\" + country + \",\" + password); } } catch (SQLException e) { JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } \u8fd0\u884c\u7ed3\u679c\uff1a","title":"\u67e5\u8be2\uff08Select.java\uff09"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-python-crud-demo/","text":"Python \u57fa\u7840\u793a\u4f8b \u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u4f7f\u7528 Python \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u529f\u80fd\u3002 \u5f00\u59cb\u524d\u51c6\u5907 \u73af\u5883\u914d\u7f6e \u5728\u4f60\u5f00\u59cb\u4e4b\u524d\uff0c\u786e\u8ba4\u4f60\u5df2\u7ecf\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e86\u5982\u4e0b\u8f6f\u4ef6\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 Python 3.8(or plus) \u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u68c0\u67e5 Python \u7248\u672c\u786e\u8ba4\u5b89\u88c5\u6210\u529f\uff1a ``` #To check with Python installation and its version python3 -V ``` \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 MySQL\u3002 \u4e0b\u8f7d\u5b89\u88c5 pymysql \u548c cryptography \u5de5\u5177\u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u4e0b\u8f7d\u5b89\u88c5 pymysql \u548c cryptography \u5de5\u5177\uff1a ``` pip3 install pymysql pip3 install cryptography #If you are in China mainland and have a low downloading speed, you can speed up the download by following commands. pip3 install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install cryptography -i https://pypi.tuna.tsinghua.edu.cn/simple ``` \u4f60\u53ef\u4ee5\u53c2\u8003 Python \u8fde\u63a5 MatrixOne \u670d\u52a1 \u4e86\u89e3\u5982\u4f55\u901a\u8fc7 pymysql \u8fde\u63a5\u5230 MatrixOne\uff0c\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664)\u3002 \u65b0\u5efa\u8868 \u65b0\u5efa\u4e00\u4e2a create.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a #!/usr/bin/python3 import pymysql.cursors SQL_CONNECTION = pymysql.connect( host='127.0.0.1', port=6001, user='root', password = \"111\", db='test', cursorclass=pymysql.cursors.DictCursor, autocommit=True ) SQL = \"CREATE TABLE cars (id INT NOT NULL AUTO_INCREMENT, car_model VARCHAR(45) NULL,car_brand VARCHAR(45) NULL,PRIMARY KEY (`id`))\" with SQL_CONNECTION.cursor() as cursor: try: sql_exec = cursor.execute(SQL) print(\"Table created\") except (pymysql.Error, pymysql.Warning) as e: print(f'error! {e}') finally: SQL_CONNECTION.close() \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 python \u6587\u4ef6\u3002\u8fd9\u5c06\u5728 MatrixOne \u4e2d\u7684\u6570 \u200b\u200b \u636e\u5e93 test \u5185\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a cars \u8868\u3002 > python3 create.py Table created \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u521b\u5efa\u6210\u529f\uff1a mysql> show tables; +----------------+ | tables_in_test | +----------------+ | cars | +----------------+ 1 row in set (0.03 sec) mysql> show create table cars; +-------+----------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +-------+----------------------------------------------------------------------------------------------------------------------------------------------------------+ | cars | CREATE TABLE `cars` ( `id` INT NOT NULL AUTO_INCREMENT, `car_model` VARCHAR(45) DEFAULT NULL, `car_brand` VARCHAR(45) DEFAULT NULL, PRIMARY KEY (`id`) ) | +-------+----------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.03 sec) \u63d2\u5165\u6570\u636e \u65b0\u5efa\u4e00\u4e2a insert.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a #!/usr/bin/python3 import pymysql.cursors SQL_CONNECTION = pymysql.connect( host='127.0.0.1', port=6001, user='root', password = \"111\", db='test', cursorclass=pymysql.cursors.DictCursor, autocommit=True ) SQL = \"INSERT INTO cars(car_model, car_brand) VALUES ('accord', 'honda')\" with SQL_CONNECTION.cursor() as cursor: try: sql_exec = cursor.execute(SQL) if sql_exec: print(sql_exec) print(\"Record Added\") else: print(sql_exec) print(\"Not Added\") except (pymysql.Error, pymysql.Warning) as e: print(f'error! {e}') finally: SQL_CONNECTION.close() \u6267\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u5728 cars \u8868\u4e2d\u63d2\u5165\u4e00\u6761\u8bb0\u5f55\uff1a > python3 insert.py 1 Record Added \u4f60\u53ef\u4ee5\u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\u9a8c\u8bc1\u8fd9\u6761\u8bb0\u5f55\u662f\u5426\u63d2\u5165\u6210\u529f\uff1a mysql> select * from cars; +------+-----------+-----------+ | id | car_model | car_brand | +------+-----------+-----------+ | 1 | accord | honda | +------+-----------+-----------+ 1 row in set (0.03 sec) \u67e5\u8be2\u6570\u636e \u65b0\u5efa\u4e00\u4e2a read.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a #!/usr/bin/python3 import pymysql.cursors SQL_CONNECTION = pymysql.connect( host='127.0.0.1', port=6001, user='root', password = \"111\", db='test', cursorclass=pymysql.cursors.DictCursor, autocommit=True ) SQL = \"SELECT * FROM cars\" with SQL_CONNECTION.cursor() as cursor: try: sql_exec = cursor.execute(SQL) if sql_exec: print(sql_exec) print(cursor.fetchall()) else: print(sql_exec) print(\"No Record\") except (pymysql.Error, pymysql.Warning) as e: print(f'error! {e}') finally: SQL_CONNECTION.close() \u6267\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u67e5\u8be2\u5e76\u8fd4\u56de cars \u8868\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\uff1a > python3 read.py 1 [{'id': 1, 'car_model': 'accord', 'car_brand': 'honda'}] \u66f4\u65b0\u6570\u636e \u65b0\u5efa\u4e00\u4e2a update.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a #!/usr/bin/python3 import pymysql.cursors SQL_CONNECTION = pymysql.connect( host='127.0.0.1', port=6001, user='root', password = \"111\", db='test', cursorclass=pymysql.cursors.DictCursor, autocommit=True ) SQL = \"UPDATE cars SET car_model = 'explorer', car_brand = 'ford' WHERE id = '1'\" with SQL_CONNECTION.cursor() as cursor: try: sql_exec = cursor.execute(SQL) if sql_exec: print(sql_exec) print(\"Record Updated\") else: print(sql_exec) print(\"Not Updated\") except (pymysql.Error, pymysql.Warning) as e: print(f'error! {e}') finally: SQL_CONNECTION.close() \u6267\u884c\u4e0b\u9762\u4ee3\u7801\u66f4\u65b0 id \u4e3a \u201c1\u201d \u7684\u8bb0\u5f55\uff1a > python3 update.py 1 Record Updated \u4f60\u53ef\u4ee5\u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\u9a8c\u8bc1\u8fd9\u6761\u8bb0\u5f55\u662f\u5426\u66f4\u65b0\u6210\u529f\uff1a mysql> select * from cars; +------+-----------+-----------+ | id | car_model | car_brand | +------+-----------+-----------+ | 1 | explorer | ford | +------+-----------+-----------+ 1 row in set (0.02 sec) \u5220\u9664\u6570\u636e \u65b0\u5efa\u4e00\u4e2a delete.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a #!/usr/bin/python3 import pymysql.cursors SQL_CONNECTION = pymysql.connect( host='127.0.0.1', port=6001, user='root', password = \"111\", db='test', cursorclass=pymysql.cursors.DictCursor, autocommit=True ) SQL = \"DELETE FROM cars WHERE id = '1'\" with SQL_CONNECTION.cursor() as cursor: try: sql_exec = cursor.execute(SQL) if sql_exec: print(sql_exec) print(\"Record Deleted\") else: print(sql_exec) print(\"Not Deleted\") except (pymysql.Error, pymysql.Warning) as e: print(f'error! {e}') finally: SQL_CONNECTION.close() \u6267\u884c\u4e0b\u9762\u4ee3\u7801\u5220\u9664 id \u4e3a \u201c1\u201d \u7684\u8bb0\u5f55\uff1a > python3 delete.py 1 Record Deleted \u4f60\u53ef\u4ee5\u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\u9a8c\u8bc1\u8fd9\u6761\u8bb0\u5f55\u662f\u5426\u5220\u9664\u6210\u529f\uff1a mysql> select * from cars; Empty set (0.03 sec)","title":"Python \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-python-crud-demo/#python","text":"\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u4f7f\u7528 Python \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u529f\u80fd\u3002","title":"Python \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-python-crud-demo/#_1","text":"","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-python-crud-demo/#_2","text":"\u5728\u4f60\u5f00\u59cb\u4e4b\u524d\uff0c\u786e\u8ba4\u4f60\u5df2\u7ecf\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e86\u5982\u4e0b\u8f6f\u4ef6\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 Python 3.8(or plus) \u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u68c0\u67e5 Python \u7248\u672c\u786e\u8ba4\u5b89\u88c5\u6210\u529f\uff1a ``` #To check with Python installation and its version python3 -V ``` \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 MySQL\u3002 \u4e0b\u8f7d\u5b89\u88c5 pymysql \u548c cryptography \u5de5\u5177\u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u4e0b\u8f7d\u5b89\u88c5 pymysql \u548c cryptography \u5de5\u5177\uff1a ``` pip3 install pymysql pip3 install cryptography #If you are in China mainland and have a low downloading speed, you can speed up the download by following commands. pip3 install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install cryptography -i https://pypi.tuna.tsinghua.edu.cn/simple ``` \u4f60\u53ef\u4ee5\u53c2\u8003 Python \u8fde\u63a5 MatrixOne \u670d\u52a1 \u4e86\u89e3\u5982\u4f55\u901a\u8fc7 pymysql \u8fde\u63a5\u5230 MatrixOne\uff0c\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664)\u3002","title":"\u73af\u5883\u914d\u7f6e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-python-crud-demo/#_3","text":"\u65b0\u5efa\u4e00\u4e2a create.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a #!/usr/bin/python3 import pymysql.cursors SQL_CONNECTION = pymysql.connect( host='127.0.0.1', port=6001, user='root', password = \"111\", db='test', cursorclass=pymysql.cursors.DictCursor, autocommit=True ) SQL = \"CREATE TABLE cars (id INT NOT NULL AUTO_INCREMENT, car_model VARCHAR(45) NULL,car_brand VARCHAR(45) NULL,PRIMARY KEY (`id`))\" with SQL_CONNECTION.cursor() as cursor: try: sql_exec = cursor.execute(SQL) print(\"Table created\") except (pymysql.Error, pymysql.Warning) as e: print(f'error! {e}') finally: SQL_CONNECTION.close() \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 python \u6587\u4ef6\u3002\u8fd9\u5c06\u5728 MatrixOne \u4e2d\u7684\u6570 \u200b\u200b \u636e\u5e93 test \u5185\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a cars \u8868\u3002 > python3 create.py Table created \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u521b\u5efa\u6210\u529f\uff1a mysql> show tables; +----------------+ | tables_in_test | +----------------+ | cars | +----------------+ 1 row in set (0.03 sec) mysql> show create table cars; +-------+----------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +-------+----------------------------------------------------------------------------------------------------------------------------------------------------------+ | cars | CREATE TABLE `cars` ( `id` INT NOT NULL AUTO_INCREMENT, `car_model` VARCHAR(45) DEFAULT NULL, `car_brand` VARCHAR(45) DEFAULT NULL, PRIMARY KEY (`id`) ) | +-------+----------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.03 sec)","title":"\u65b0\u5efa\u8868"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-python-crud-demo/#_4","text":"\u65b0\u5efa\u4e00\u4e2a insert.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a #!/usr/bin/python3 import pymysql.cursors SQL_CONNECTION = pymysql.connect( host='127.0.0.1', port=6001, user='root', password = \"111\", db='test', cursorclass=pymysql.cursors.DictCursor, autocommit=True ) SQL = \"INSERT INTO cars(car_model, car_brand) VALUES ('accord', 'honda')\" with SQL_CONNECTION.cursor() as cursor: try: sql_exec = cursor.execute(SQL) if sql_exec: print(sql_exec) print(\"Record Added\") else: print(sql_exec) print(\"Not Added\") except (pymysql.Error, pymysql.Warning) as e: print(f'error! {e}') finally: SQL_CONNECTION.close() \u6267\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u5728 cars \u8868\u4e2d\u63d2\u5165\u4e00\u6761\u8bb0\u5f55\uff1a > python3 insert.py 1 Record Added \u4f60\u53ef\u4ee5\u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\u9a8c\u8bc1\u8fd9\u6761\u8bb0\u5f55\u662f\u5426\u63d2\u5165\u6210\u529f\uff1a mysql> select * from cars; +------+-----------+-----------+ | id | car_model | car_brand | +------+-----------+-----------+ | 1 | accord | honda | +------+-----------+-----------+ 1 row in set (0.03 sec)","title":"\u63d2\u5165\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-python-crud-demo/#_5","text":"\u65b0\u5efa\u4e00\u4e2a read.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a #!/usr/bin/python3 import pymysql.cursors SQL_CONNECTION = pymysql.connect( host='127.0.0.1', port=6001, user='root', password = \"111\", db='test', cursorclass=pymysql.cursors.DictCursor, autocommit=True ) SQL = \"SELECT * FROM cars\" with SQL_CONNECTION.cursor() as cursor: try: sql_exec = cursor.execute(SQL) if sql_exec: print(sql_exec) print(cursor.fetchall()) else: print(sql_exec) print(\"No Record\") except (pymysql.Error, pymysql.Warning) as e: print(f'error! {e}') finally: SQL_CONNECTION.close() \u6267\u884c\u4e0b\u9762\u7684\u4ee3\u7801\u67e5\u8be2\u5e76\u8fd4\u56de cars \u8868\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\uff1a > python3 read.py 1 [{'id': 1, 'car_model': 'accord', 'car_brand': 'honda'}]","title":"\u67e5\u8be2\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-python-crud-demo/#_6","text":"\u65b0\u5efa\u4e00\u4e2a update.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a #!/usr/bin/python3 import pymysql.cursors SQL_CONNECTION = pymysql.connect( host='127.0.0.1', port=6001, user='root', password = \"111\", db='test', cursorclass=pymysql.cursors.DictCursor, autocommit=True ) SQL = \"UPDATE cars SET car_model = 'explorer', car_brand = 'ford' WHERE id = '1'\" with SQL_CONNECTION.cursor() as cursor: try: sql_exec = cursor.execute(SQL) if sql_exec: print(sql_exec) print(\"Record Updated\") else: print(sql_exec) print(\"Not Updated\") except (pymysql.Error, pymysql.Warning) as e: print(f'error! {e}') finally: SQL_CONNECTION.close() \u6267\u884c\u4e0b\u9762\u4ee3\u7801\u66f4\u65b0 id \u4e3a \u201c1\u201d \u7684\u8bb0\u5f55\uff1a > python3 update.py 1 Record Updated \u4f60\u53ef\u4ee5\u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\u9a8c\u8bc1\u8fd9\u6761\u8bb0\u5f55\u662f\u5426\u66f4\u65b0\u6210\u529f\uff1a mysql> select * from cars; +------+-----------+-----------+ | id | car_model | car_brand | +------+-----------+-----------+ | 1 | explorer | ford | +------+-----------+-----------+ 1 row in set (0.02 sec)","title":"\u66f4\u65b0\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/develop-python-crud-demo/#_7","text":"\u65b0\u5efa\u4e00\u4e2a delete.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a #!/usr/bin/python3 import pymysql.cursors SQL_CONNECTION = pymysql.connect( host='127.0.0.1', port=6001, user='root', password = \"111\", db='test', cursorclass=pymysql.cursors.DictCursor, autocommit=True ) SQL = \"DELETE FROM cars WHERE id = '1'\" with SQL_CONNECTION.cursor() as cursor: try: sql_exec = cursor.execute(SQL) if sql_exec: print(sql_exec) print(\"Record Deleted\") else: print(sql_exec) print(\"Not Deleted\") except (pymysql.Error, pymysql.Warning) as e: print(f'error! {e}') finally: SQL_CONNECTION.close() \u6267\u884c\u4e0b\u9762\u4ee3\u7801\u5220\u9664 id \u4e3a \u201c1\u201d \u7684\u8bb0\u5f55\uff1a > python3 delete.py 1 Record Deleted \u4f60\u53ef\u4ee5\u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\u9a8c\u8bc1\u8fd9\u6761\u8bb0\u5f55\u662f\u5426\u5220\u9664\u6210\u529f\uff1a mysql> select * from cars; Empty set (0.03 sec)","title":"\u5220\u9664\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/gorm-golang-crud-demo/","text":"gorm \u57fa\u7840\u793a\u4f8b \u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u4f7f\u7528 golang \u548c gorm \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u529f\u80fd\u3002 Gorm \u662f Python \u8bed\u8a00\u4e2d\u6700\u6d41\u884c\u7684 ORM \u5de5\u5177\u4e4b\u4e00\u3002 \u5f00\u59cb\u524d\u51c6\u5907 \u76f8\u5173\u8f6f\u4ef6\u7684\u7b80\u5355\u4ecb\u7ecd\uff1a Gorm\uff1a\u57fa\u4e8e golang \u7684\u4e00\u4e2a\u795e\u5947\u7684\u5168\u529f\u80fd ORM \u5e93\uff0c\u672c\u6b21\u6559\u7a0b\u4e3b\u8981\u901a\u8fc7\u4f7f\u7528 gorm.io/gorm \u548c gorm.io/driver/mysql \u8fd9\u4e24\u4e2a\u5e93\u6765\u8ba9 Go \u8fde\u63a5\u5230 MYSQL \u6570\u636e\u5e93\u5e76\u5b8c\u6210 CRUD \u64cd\u4f5c\u3002 \u73af\u5883\u914d\u7f6e \u5728\u4f60\u5f00\u59cb\u4e4b\u524d\uff0c\u786e\u8ba4\u4f60\u5df2\u7ecf\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e86\u5982\u4e0b\u8f6f\u4ef6\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u901a\u8fc7 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne \u5e76\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a test \u7684\u6570\u636e\u5e93\uff1a mysql > create database test ; \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 Golang 1.18 \u7248\u672c\u53ca\u4ee5\u4e0a \uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u884c\u786e\u8ba4\u4f60\u7684 Golang \u7248\u672c\uff1a #To check with Golang installation and its version go version \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef\u3002 \u786e\u8ba4\u4f60\u5df2\u7ecf\u5b89\u88c5 gorm.io/gorm \u4ee5\u53ca gorm.io/driver/mysql \uff0c\u4f7f\u7528 go get \u547d\u4ee4\u5b89\u88c5\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a go get -u gorm.io/gorm go get -u gorm.io/driver/mysql \u4f60\u53ef\u4ee5\u53c2\u8003 Golang \u8fde\u63a5 MatrixOne \u670d\u52a1 \u4e86\u89e3\u5982\u4f55\u901a\u8fc7 Gorm \u8fde\u63a5\u5230 MatrixOne\uff0c\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u3002 \u65b0\u5efa\u8868 \u4f5c\u4e3a\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668\uff08ORM\uff09\u5de5\u5177\uff0c Gorm \u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u521b\u5efa GO \u7c7b\u6765\u6620\u5c04\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u7684\u8868\u3002 \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a USER \u7c7b\uff0c\u8fd9\u91cc\u7684\u7c7b\u540d\u548c\u5c5e\u6027\u540d\u79f0\u5fc5\u987b\u4f7f\u7528\u5927\u5199\u82f1\u6587\u5f00\u5934\u4ee5\u4fdd\u8bc1 public \u8bbf\u95ee\uff0c\u5426\u5219\u4e0d\u80fd\u521b\u5efa\u3002 USER \u7c7b\u5728 GORM \u7684\u4f5c\u7528\u4e0b\u5c06\u8f6c\u5316\u4e3a\u4e00\u6761 SQL \u8bed\u53e5\uff0c\u521b\u5efa\u8868\u540d\u4e3a users \u7684\u8868\u3002 \u65b0\u5efa\u4e00\u4e2a gorm_create.go \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a package main import ( \"fmt\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"gorm.io/gorm/logger\" ) // user model type USER struct { ID uint `gorm:\"primaryKey\"` CNAME string CADDRESS string } func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config { // Logger: logger.Default.LogMode(logger.Info), //print SQL }) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { //get *gorm.DB db := getDBConn () // auto create table db . AutoMigrate ( & USER {}) } \u4f60\u53ef\u4ee5\u53d6\u6d88\u6ce8\u91ca Logger: logger.Default.LogMode(logger.Info) \u4ee5\u628a\u8f6c\u5316\u540e\u7684 SQL \u8f93\u51fa\u51fa\u6765\u3002 \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 go \u6587\u4ef6\uff1a go run gorm_create.go \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u521b\u5efa\u6210\u529f\uff1a mysql > show tables ; + ----------------+ | Tables_in_test | + ----------------+ | users | + ----------------+ 1 row in set ( 0 . 01 sec ) \u63d2\u5165\u6570\u636e \u4e0b\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u5728\u521a\u521a\u521b\u5efa\u7684 users \u8868\u4e2d\u63d2\u5165\u4e24\u6761\u6570\u636e\u8bb0\u5f55\uff0c\u8fd9\u91cc\u7684 ID \u9ed8\u8ba4\u662f\u81ea\u589e\u7684\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e3a\u56fa\u5b9a\u7684\u503c\u3002 \u65b0\u5efa\u4e00\u4e2a gorm_insert.go \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a package main import ( \"fmt\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"gorm.io/gorm/logger\" ) // user model type USER struct { ID uint `gorm:\"primaryKey\"` CNAME string CADDRESS string } func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config {}) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { //get *gorm.DB db := getDBConn () // auto create table db . AutoMigrate ( & USER {}) // **Insert users** users := [] USER { { // ID: 1, //autoincrement CNAME : \"lili\" , CADDRESS : \"Shanghai\" }, { ID : 111 , CNAME : \"zhang\" , CADDRESS : \"Biejing\" , }, } db . Create ( users ) } \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 go \u6587\u4ef6\uff1a go run gorm_insert.go \u540c\u6837\u7684\uff0c\u7ec8\u7aef\u4e5f\u4f1a\u8f93\u51fa SQL \u8bed\u53e5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u6210\u529f\u63d2\u5165\u6570\u636e\uff1a mysql > select * from users ; + ------+-------+----------+ | id | cname | caddress | + ------+-------+----------+ | 1 | lili | Shanghai | | 111 | zhang | Biejing | + ------+-------+----------+ 2 rows in set ( 0 . 01 sec ) \u67e5\u8be2\u6570\u636e \u4e0b\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u7528\u6761\u4ef6\u67e5\u8be2\u90e8\u5206\u6570\u636e\uff0c\u67e5\u8be2 CNAME=zhang \u7684\u6570\u636e\u3002 \u65b0\u5efa\u4e00\u4e2a gorm_query.go \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a package main import ( \"fmt\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"gorm.io/gorm/logger\" ) // user model type USER struct { ID uint `gorm:\"primaryKey\"` CNAME string CADDRESS string } func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config {}) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { //get *gorm.DB db := getDBConn () // auto create table db . AutoMigrate ( & USER {}) // **Query\u2014\u2014 String condition** res := USER {} tx := db . Where ( \"CNAME = ? \" , \"zhang\" ). Find ( & USER {}). Scan ( & res ) if tx . Error != nil { fmt . Println ( tx . Error ) return } fmt . Println ( res ) } \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 go \u6587\u4ef6\uff1a go run gorm_query.go \u7ec8\u7aef\u7684\u8f93\u51fa\u7ed3\u679c\u4e2d\u5c06\u5305\u542b\u4ee5\u4e0b\u6570\u636e\uff1a {111 zhang Biejing} \u66f4\u65b0\u6570\u636e \u4e0b\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u66f4\u65b0\u6570\u636e\u3002 \u65b0\u5efa\u4e00\u4e2a gorm_update.go \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a package main import ( \"fmt\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"gorm.io/gorm/logger\" ) // user model type USER struct { ID uint `gorm:\"primaryKey\"` CNAME string CADDRESS string } func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config {}) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { //get *gorm.DB db := getDBConn () // auto create table db . AutoMigrate ( & USER {}) // **Update** aUser := USER {} tx := db . Where ( \"CNAME = ? \" , \"zhang\" ). Find ( & USER {}). Scan ( & aUser ) if tx . Error != nil { fmt . Println ( tx . Error ) return } res := db . Model ( & aUser ). Update ( \"CADDRESS\" , \"HongKong\" ) if res . Error != nil { fmt . Println ( tx . Error ) return } } \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 go \u6587\u4ef6\uff1a go run gorm_update.go \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u66f4\u65b0\u6210\u529f\uff1a mysql > select * from users ; + ------+-------+----------+ | id | cname | caddress | + ------+-------+----------+ | 111 | zhang | HongKong | | 1 | lili | Shanghai | + ------+-------+----------+ 2 rows in set ( 0 . 00 sec ) \u5220\u9664\u6570\u636e \u4e0b\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u8fdb\u884c\u5355\u6761\u6570\u636e\u7684\u5220\u9664\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5220\u9664\u5355\u6761\u8bb0\u5f55\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u4e3b\u952e\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u89e6\u53d1\u6279\u91cf\u5220\u9664\u3002 \u65b0\u5efa\u4e00\u4e2a gorm_delete.go \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a package main import ( \"fmt\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"gorm.io/gorm/logger\" ) // user model type USER struct { ID uint `gorm:\"primaryKey\"` CNAME string CADDRESS string } func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config {}) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { //get *gorm.DB db := getDBConn () // auto create table db . AutoMigrate ( & USER {}) // **Delete** aUser := USER {} tx := db . Where ( \"CNAME = ? \" , \"zhang\" ). Find ( & USER {}). Scan ( & aUser ) if tx . Error != nil { fmt . Println ( tx . Error ) return } res := db . Delete ( & aUser ) if res . Error != nil { fmt . Println ( tx . Error ) return } } \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 go \u6587\u4ef6\uff1a go run gorm_delete.go \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u5220\u9664\u6210\u529f\uff1a mysql > select * from users ; + ------+-------+----------+ | id | cname | caddress | + ------+-------+----------+ | 1 | lili | Shanghai | + ------+-------+----------+ 1 row in set ( 0 . 00 sec ) \u4ee5\u4e0a\u4ec5\u662f GORM \u4e2d CRUD \u64cd\u4f5c\u7684\u90e8\u5206\u6f14\u793a\uff0c\u66f4\u591a\u7684\u7528\u6cd5\u548c\u6848\u4f8b\u53ef\u4ee5\u53c2\u8003 GORM \u5b98\u65b9\u6307\u5357","title":"Gorm \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/gorm-golang-crud-demo/#gorm","text":"\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u4f7f\u7528 golang \u548c gorm \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u529f\u80fd\u3002 Gorm \u662f Python \u8bed\u8a00\u4e2d\u6700\u6d41\u884c\u7684 ORM \u5de5\u5177\u4e4b\u4e00\u3002","title":"gorm \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/gorm-golang-crud-demo/#_1","text":"\u76f8\u5173\u8f6f\u4ef6\u7684\u7b80\u5355\u4ecb\u7ecd\uff1a Gorm\uff1a\u57fa\u4e8e golang \u7684\u4e00\u4e2a\u795e\u5947\u7684\u5168\u529f\u80fd ORM \u5e93\uff0c\u672c\u6b21\u6559\u7a0b\u4e3b\u8981\u901a\u8fc7\u4f7f\u7528 gorm.io/gorm \u548c gorm.io/driver/mysql \u8fd9\u4e24\u4e2a\u5e93\u6765\u8ba9 Go \u8fde\u63a5\u5230 MYSQL \u6570\u636e\u5e93\u5e76\u5b8c\u6210 CRUD \u64cd\u4f5c\u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/gorm-golang-crud-demo/#_2","text":"\u5728\u4f60\u5f00\u59cb\u4e4b\u524d\uff0c\u786e\u8ba4\u4f60\u5df2\u7ecf\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e86\u5982\u4e0b\u8f6f\u4ef6\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u901a\u8fc7 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne \u5e76\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a test \u7684\u6570\u636e\u5e93\uff1a mysql > create database test ; \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 Golang 1.18 \u7248\u672c\u53ca\u4ee5\u4e0a \uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u884c\u786e\u8ba4\u4f60\u7684 Golang \u7248\u672c\uff1a #To check with Golang installation and its version go version \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef\u3002 \u786e\u8ba4\u4f60\u5df2\u7ecf\u5b89\u88c5 gorm.io/gorm \u4ee5\u53ca gorm.io/driver/mysql \uff0c\u4f7f\u7528 go get \u547d\u4ee4\u5b89\u88c5\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a go get -u gorm.io/gorm go get -u gorm.io/driver/mysql \u4f60\u53ef\u4ee5\u53c2\u8003 Golang \u8fde\u63a5 MatrixOne \u670d\u52a1 \u4e86\u89e3\u5982\u4f55\u901a\u8fc7 Gorm \u8fde\u63a5\u5230 MatrixOne\uff0c\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u3002","title":"\u73af\u5883\u914d\u7f6e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/gorm-golang-crud-demo/#_3","text":"\u4f5c\u4e3a\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668\uff08ORM\uff09\u5de5\u5177\uff0c Gorm \u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u521b\u5efa GO \u7c7b\u6765\u6620\u5c04\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u7684\u8868\u3002 \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a USER \u7c7b\uff0c\u8fd9\u91cc\u7684\u7c7b\u540d\u548c\u5c5e\u6027\u540d\u79f0\u5fc5\u987b\u4f7f\u7528\u5927\u5199\u82f1\u6587\u5f00\u5934\u4ee5\u4fdd\u8bc1 public \u8bbf\u95ee\uff0c\u5426\u5219\u4e0d\u80fd\u521b\u5efa\u3002 USER \u7c7b\u5728 GORM \u7684\u4f5c\u7528\u4e0b\u5c06\u8f6c\u5316\u4e3a\u4e00\u6761 SQL \u8bed\u53e5\uff0c\u521b\u5efa\u8868\u540d\u4e3a users \u7684\u8868\u3002 \u65b0\u5efa\u4e00\u4e2a gorm_create.go \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a package main import ( \"fmt\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"gorm.io/gorm/logger\" ) // user model type USER struct { ID uint `gorm:\"primaryKey\"` CNAME string CADDRESS string } func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config { // Logger: logger.Default.LogMode(logger.Info), //print SQL }) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { //get *gorm.DB db := getDBConn () // auto create table db . AutoMigrate ( & USER {}) } \u4f60\u53ef\u4ee5\u53d6\u6d88\u6ce8\u91ca Logger: logger.Default.LogMode(logger.Info) \u4ee5\u628a\u8f6c\u5316\u540e\u7684 SQL \u8f93\u51fa\u51fa\u6765\u3002 \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 go \u6587\u4ef6\uff1a go run gorm_create.go \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u521b\u5efa\u6210\u529f\uff1a mysql > show tables ; + ----------------+ | Tables_in_test | + ----------------+ | users | + ----------------+ 1 row in set ( 0 . 01 sec )","title":"\u65b0\u5efa\u8868"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/gorm-golang-crud-demo/#_4","text":"\u4e0b\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u5728\u521a\u521a\u521b\u5efa\u7684 users \u8868\u4e2d\u63d2\u5165\u4e24\u6761\u6570\u636e\u8bb0\u5f55\uff0c\u8fd9\u91cc\u7684 ID \u9ed8\u8ba4\u662f\u81ea\u589e\u7684\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e3a\u56fa\u5b9a\u7684\u503c\u3002 \u65b0\u5efa\u4e00\u4e2a gorm_insert.go \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a package main import ( \"fmt\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"gorm.io/gorm/logger\" ) // user model type USER struct { ID uint `gorm:\"primaryKey\"` CNAME string CADDRESS string } func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config {}) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { //get *gorm.DB db := getDBConn () // auto create table db . AutoMigrate ( & USER {}) // **Insert users** users := [] USER { { // ID: 1, //autoincrement CNAME : \"lili\" , CADDRESS : \"Shanghai\" }, { ID : 111 , CNAME : \"zhang\" , CADDRESS : \"Biejing\" , }, } db . Create ( users ) } \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 go \u6587\u4ef6\uff1a go run gorm_insert.go \u540c\u6837\u7684\uff0c\u7ec8\u7aef\u4e5f\u4f1a\u8f93\u51fa SQL \u8bed\u53e5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u6210\u529f\u63d2\u5165\u6570\u636e\uff1a mysql > select * from users ; + ------+-------+----------+ | id | cname | caddress | + ------+-------+----------+ | 1 | lili | Shanghai | | 111 | zhang | Biejing | + ------+-------+----------+ 2 rows in set ( 0 . 01 sec )","title":"\u63d2\u5165\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/gorm-golang-crud-demo/#_5","text":"\u4e0b\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u7528\u6761\u4ef6\u67e5\u8be2\u90e8\u5206\u6570\u636e\uff0c\u67e5\u8be2 CNAME=zhang \u7684\u6570\u636e\u3002 \u65b0\u5efa\u4e00\u4e2a gorm_query.go \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a package main import ( \"fmt\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"gorm.io/gorm/logger\" ) // user model type USER struct { ID uint `gorm:\"primaryKey\"` CNAME string CADDRESS string } func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config {}) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { //get *gorm.DB db := getDBConn () // auto create table db . AutoMigrate ( & USER {}) // **Query\u2014\u2014 String condition** res := USER {} tx := db . Where ( \"CNAME = ? \" , \"zhang\" ). Find ( & USER {}). Scan ( & res ) if tx . Error != nil { fmt . Println ( tx . Error ) return } fmt . Println ( res ) } \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 go \u6587\u4ef6\uff1a go run gorm_query.go \u7ec8\u7aef\u7684\u8f93\u51fa\u7ed3\u679c\u4e2d\u5c06\u5305\u542b\u4ee5\u4e0b\u6570\u636e\uff1a {111 zhang Biejing}","title":"\u67e5\u8be2\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/gorm-golang-crud-demo/#_6","text":"\u4e0b\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u66f4\u65b0\u6570\u636e\u3002 \u65b0\u5efa\u4e00\u4e2a gorm_update.go \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a package main import ( \"fmt\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"gorm.io/gorm/logger\" ) // user model type USER struct { ID uint `gorm:\"primaryKey\"` CNAME string CADDRESS string } func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config {}) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { //get *gorm.DB db := getDBConn () // auto create table db . AutoMigrate ( & USER {}) // **Update** aUser := USER {} tx := db . Where ( \"CNAME = ? \" , \"zhang\" ). Find ( & USER {}). Scan ( & aUser ) if tx . Error != nil { fmt . Println ( tx . Error ) return } res := db . Model ( & aUser ). Update ( \"CADDRESS\" , \"HongKong\" ) if res . Error != nil { fmt . Println ( tx . Error ) return } } \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 go \u6587\u4ef6\uff1a go run gorm_update.go \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u66f4\u65b0\u6210\u529f\uff1a mysql > select * from users ; + ------+-------+----------+ | id | cname | caddress | + ------+-------+----------+ | 111 | zhang | HongKong | | 1 | lili | Shanghai | + ------+-------+----------+ 2 rows in set ( 0 . 00 sec )","title":"\u66f4\u65b0\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/gorm-golang-crud-demo/#_7","text":"\u4e0b\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u8fdb\u884c\u5355\u6761\u6570\u636e\u7684\u5220\u9664\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5220\u9664\u5355\u6761\u8bb0\u5f55\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u4e3b\u952e\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u89e6\u53d1\u6279\u91cf\u5220\u9664\u3002 \u65b0\u5efa\u4e00\u4e2a gorm_delete.go \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a package main import ( \"fmt\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"gorm.io/gorm/logger\" ) // user model type USER struct { ID uint `gorm:\"primaryKey\"` CNAME string CADDRESS string } func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config {}) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { //get *gorm.DB db := getDBConn () // auto create table db . AutoMigrate ( & USER {}) // **Delete** aUser := USER {} tx := db . Where ( \"CNAME = ? \" , \"zhang\" ). Find ( & USER {}). Scan ( & aUser ) if tx . Error != nil { fmt . Println ( tx . Error ) return } res := db . Delete ( & aUser ) if res . Error != nil { fmt . Println ( tx . Error ) return } } \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 go \u6587\u4ef6\uff1a go run gorm_delete.go \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u5220\u9664\u6210\u529f\uff1a mysql > select * from users ; + ------+-------+----------+ | id | cname | caddress | + ------+-------+----------+ | 1 | lili | Shanghai | + ------+-------+----------+ 1 row in set ( 0 . 00 sec ) \u4ee5\u4e0a\u4ec5\u662f GORM \u4e2d CRUD \u64cd\u4f5c\u7684\u90e8\u5206\u6f14\u793a\uff0c\u66f4\u591a\u7684\u7528\u6cd5\u548c\u6848\u4f8b\u53ef\u4ee5\u53c2\u8003 GORM \u5b98\u65b9\u6307\u5357","title":"\u5220\u9664\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/","text":"SpringBoot \u548c JPA \u57fa\u7840\u793a\u4f8b \u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u4f7f\u7528 SpringBoot \u3001 Spring Data JPA \u548c Intellij IDEA \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u529f\u80fd\u3002 \u5f00\u59cb\u4e4b\u524d \u672c\u7bc7\u6559\u7a0b\u6d89\u53ca\u5230\u7684\u8f6f\u4ef6\u4ecb\u7ecd\u5982\u4e0b\uff1a Spring Data JPA\uff1aJPA\uff08Java Persistence API\uff0cJava \u6301\u4e45\u5c42 API\uff09\u662f\u4e00\u79cd\u89c4\u8303\uff0c\u662f JDK 5.0 \u6ce8\u89e3\u6216 XML \u63cf\u8ff0\u5bf9\u8c61\u4e0e\u5173\u7cfb\u8868\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5e76\u5c06\u8fd0\u884c\u671f\u7684\u5b9e\u4f53\u5bf9\u8c61\u6301\u4e45\u5316\u5230\u6570\u636e\u5e93\u4e2d\u3002Spring Data JPA \u662f\u4e00\u4e2a Java \u5bf9\u8c61\u6620\u5c04\u5173\u7cfb\u7684\u89e3\u51b3\u65b9\u6848\u7684 ORM\uff08Object-Relational Mapping\uff09\u6846\u67b6\uff0c\u662f\u4e00\u4e2a\u5c06\u9762\u5411\u5bf9\u8c61\u7684\u57df\u6a21\u578b\u6620\u5c04\u5230\u5173\u7cfb\u6570\u636e\u5e93\u7684\u5f00\u6e90\u6846\u67b6\u3002 Intellij IDEA\uff1aIntelliJ IDEA \u662f\u4e00\u79cd\u5546\u4e1a\u5316\u9500\u552e\u7684 Java \u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08Integrated Development Environment\uff0cIDE\uff09\u5de5\u5177\u8f6f\u4ef6\u3002\u5b83\u6240\u62e5\u6709\u8bf8\u591a\u63d2\u4ef6\uff0c\u53ef\u4ee5\u63d0\u9ad8\u6211\u4eec\u7684\u5de5\u4f5c\u6548\u7387\u3002 Maven\uff1aMaven \u662f Java \u4e2d\u529f\u80fd\u5f3a\u5927\u7684\u9879\u76ee\u7ba1\u7406\u5de5\u5177\uff0c\u53ef\u4ee5\u6839\u636e pom.xml \u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u81ea\u52a8\u4e0b\u8f7d\u548c\u5bfc\u5165 Jar \u6587\u4ef6\u3002\u8fd9\u4e2a\u7279\u6027\u51cf\u5c11\u4e86\u4e0d\u540c\u7248\u672c Jar \u6587\u4ef6\u4e4b\u95f4\u7684\u51b2\u7a81\u3002 Spring\uff1aSpring \u662f Java \u4e2d\u6700\u6d41\u884c\u7684\u6846\u67b6\u4e4b\u4e00\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4f01\u4e1a\u4f7f\u7528 Spring \u6846\u67b6\u6765\u6784\u5efa\u4ed6\u4eec\u7684\u9879\u76ee\u3002Spring Boot \u6784\u5efa\u5728\u4f20\u7edf\u7684 Spring \u6846\u67b6\u4e4b\u4e0a\u3002\u56e0\u6b64\uff0c\u5b83\u63d0\u4f9b\u4e86 Spring \u7684\u6240\u6709\u7279\u6027\uff0c\u800c\u4e14\u6bd4 Spring \u66f4\u6613\u7528\u3002 Postman: Postman \u662f\u4e00\u4e2a\u7528\u4e8e API \u6d4b\u8bd5\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u662f\u4e00\u4e2a HTTP \u5ba2\u6237\u7aef\uff0c\u5229\u7528\u56fe\u5f62\u7528\u6237\u754c\u9762\u6d4b\u8bd5 HTTP \u8bf7\u6c42\uff0c\u4ee5\u83b7\u5f97\u9700\u8981\u8fdb\u884c\u9a8c\u8bc1\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u54cd\u5e94\u3002 \u914d\u7f6e\u73af\u5883 1. \u5b89\u88c5\u6784\u5efa MatrixOne \u521b\u5efa\u5b9e\u4f8b \u3002 \u5728 MySQL \u5ba2\u6237\u7aef\u65b0\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a test \u6570\u636e\u5e93\u3002 mysql> create database test; 2. \u4f7f\u7528 IntelliJ IDEA \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Spring Boot \u9879\u76ee \u9009\u62e9 Spring Initializer \uff0c\u6309\u9700\u547d\u540d\u9879\u76ee\u540d\u79f0\u3002 \u9009\u62e9\u5982\u4e0b\u4f9d\u8d56\u9879\uff1a Spring Web JDBC API Spring Data JPA MySQL Driver \u70b9\u51fb Create \u521b\u5efa\u9879\u76ee\u3002\u4f9d\u8d56\u9879\u5217\u5728 pom.xml \u6587\u4ef6\u4e2d\u3002\u901a\u5e38\u4f60\u65e0\u9700\u4fee\u6539\u4efb\u4f55\u4e1c\u897f\u3002 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>jpademo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>jpademo</name> <description>jpademo</description> <properties> <java.version>1.8</java.version> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <spring-boot.version>2.3.7.RELEASE</spring-boot.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.3.7.RELEASE</version> <configuration> <mainClass>com.example.jpademo.JpademoApplication</mainClass> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project> 3. \u4fee\u6539 application.properties \u6587\u4ef6 \u8fdb\u5165\u5230 resources \u6587\u4ef6\u76ee\u5f55\u4e0b\uff0c\u914d\u7f6e application.properties \u6587\u4ef6\uff0c\u5b8c\u6210 MatrixOne \u8fde\u63a5\u3002 # Application Name spring.application.name=jpademo # Database driver spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # Data Source name spring.datasource.name=defaultDataSource # Database connection url, modify to MatrixOne address and port, with parameters spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 # Database username and password spring.datasource.username=root spring.datasource.password=111 # Web application port server.port=8080 # Hibernate configurations spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect spring.jpa.properties.hibernate.id.new_generator_mappings = false spring.jpa.properties.hibernate.format_sql = true spring.jpa.hibernate.ddl-auto = validate 4. \u5728 MatrixOne \u4e2d\u65b0\u5efa\u8868\u5e76\u63d2\u5165\u6570\u636e \u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5\u5230 MatrixOne \u5e76\u6267\u884c\u4ee5\u4e0b SQL \u8bed\u53e5\u3002\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e9b SQL \u8bed\u53e5\u4fdd\u5b58\u5728 /resource/database/ \u76ee\u5f55\u4e0b\u7684 book.sql \u4e2d\u3002 mysql> USE test; mysql> CREATE TABLE IF NOT EXISTS `book` ( `id` int(11) NOT NULL AUTO_INCREMENT, `author` varchar(255) DEFAULT NULL, `category` varchar(255) DEFAULT NULL, `name` varchar(255) DEFAULT NULL, `pages` int(11) DEFAULT NULL, `price` int(11) DEFAULT NULL, `publication` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ); mysql> INSERT INTO `book` (`id`, `author`, `category`, `name`, `pages`, `price`, `publication`) VALUES (1, 'Antoine de Saint-Exupery', 'Fantancy', 'The Little Prince', 100, 50, 'Amazon'), (2, 'J. K. Rowling', 'Fantancy', 'Harry Potter and the Sorcerer''s Stone', 1000, 200, 'Amazon'), (3, 'Lewis Carroll', 'Fantancy', 'Alice''s Adventures in Wonderland', 1500, 240, 'Amazon'); \u7f16\u5199\u4ee3\u7801 \u5b8c\u6210\u73af\u5883\u914d\u7f6e\u540e\uff0c\u6211\u4eec\u7f16\u5199\u4ee3\u7801\u6765\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 CRUD \u5e94\u7528\u7a0b\u5e8f\u3002 \u5728\u5b8c\u6210\u7f16\u5199\u4ee3\u7801\u540e\uff0c\u4f60\u5c06\u62e5\u6709\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684\u9879\u76ee\u7ed3\u6784\u3002\u4f60\u53ef\u4ee5\u9884\u5148\u521b\u5efa\u8fd9\u4e9b\u5305\u548c java \u7c7b\u3002 \u6211\u4eec\u5c06\u4e3a\u8fd9\u4e2a\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\u7f16\u5199\u521b\u5efa\u3001\u66f4\u65b0\u3001\u63d2\u5165\u3001\u5220\u9664\u548c\u9009\u62e9\u64cd\u4f5c\u3002 1. BookStoreController.java package com.example.jpademo.controller; import com.example.jpademo.entity.Book; import com.example.jpademo.services.IBookStoreService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.*; import java.util.List; @Controller @RequestMapping(\"bookservice\") public class BookStoreController { @Autowired private IBookStoreService service; @GetMapping(\"books\") public ResponseEntity<List<Book>> getBooks(){ List<Book> books = service.getBooks(); return new ResponseEntity<List<Book>>(books, HttpStatus.OK); } @GetMapping(\"books/{id}\") public ResponseEntity<Book> getBook(@PathVariable(\"id\") Integer id){ Book book = service.getBook(id); return new ResponseEntity<Book>(book, HttpStatus.OK); } @PostMapping(\"books\") public ResponseEntity<Book> createBook(@RequestBody Book book){ Book b = service.createBook(book); return new ResponseEntity<Book>(b, HttpStatus.OK); } @PutMapping(\"books/{id}\") public ResponseEntity<Book> updateBook(@PathVariable(\"id\") int id, @RequestBody Book book){ Book b = service.updateBook(id, book); return new ResponseEntity<Book>(b, HttpStatus.OK); } @DeleteMapping(\"books/{id}\") public ResponseEntity<String> deleteBook(@PathVariable(\"id\") int id){ boolean isDeleted = service.deleteBook(id); if(isDeleted){ String responseContent = \"Book has been deleted successfully\"; return new ResponseEntity<String>(responseContent,HttpStatus.OK); } String error = \"Error while deleting book from database\"; return new ResponseEntity<String>(error,HttpStatus.INTERNAL_SERVER_ERROR); } } 2. BooStoreDAO.java package com.example.jpademo.dao; import com.example.jpademo.entity.Book; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import javax.persistence.EntityManager; import javax.persistence.PersistenceContext; import javax.persistence.Query; import java.util.List; @Transactional @Repository public class BookStoreDAO implements IBookStoreDAO { @PersistenceContext private EntityManager entityManager; /** * This method is responsible to get all books available in database and return it as List<Book> */ @SuppressWarnings(\"unchecked\") @Override public List<Book> getBooks() { String hql = \"FROM Book as atcl ORDER BY atcl.id\"; return (List<Book>) entityManager.createQuery(hql).getResultList(); } /** * This method is responsible to get a particular Book detail by given book id */ @Override public Book getBook(int bookId) { return entityManager.find(Book.class, bookId); } /** * This method is responsible to create new book in database */ @Override public Book createBook(Book book) { entityManager.persist(book); Book b = getLastInsertedBook(); return b; } /** * This method is responsible to update book detail in database */ @Override public Book updateBook(int bookId, Book book) { //First We are taking Book detail from database by given book id and // then updating detail with provided book object Book bookFromDB = getBook(bookId); bookFromDB.setName(book.getName()); bookFromDB.setAuthor(book.getAuthor()); bookFromDB.setCategory(book.getCategory()); bookFromDB.setPublication(book.getPublication()); bookFromDB.setPages(book.getPages()); bookFromDB.setPrice(book.getPrice()); entityManager.flush(); //again i am taking updated result of book and returning the book object Book updatedBook = getBook(bookId); return updatedBook; } /** * This method is responsible for deleting a particular(which id will be passed that record) * record from the database */ @Override public boolean deleteBook(int bookId) { Book book = getBook(bookId); entityManager.remove(book); //we are checking here that whether entityManager contains earlier deleted book or not // if contains then book is not deleted from DB that's why returning false; boolean status = entityManager.contains(book); if(status){ return false; } return true; } /** * This method will get the latest inserted record from the database and return the object of Book class * @return book */ private Book getLastInsertedBook(){ String hql = \"from Book order by id DESC\"; Query query = entityManager.createQuery(hql); query.setMaxResults(1); Book book = (Book)query.getSingleResult(); return book; } } 3. IBookStoreDAO.java package com.example.jpademo.dao; import com.example.jpademo.entity.Book; import java.util.List; public interface IBookStoreDAO { List<Book> getBooks(); Book getBook(int bookId); Book createBook(Book book); Book updateBook(int bookId,Book book); boolean deleteBook(int bookId); } 4. Book.java package com.example.jpademo.entity; import javax.persistence.*; import java.io.Serializable; @Entity @Table(name=\"book\") public class Book implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy= GenerationType.AUTO) @Column(name=\"id\") private int id; @Column(name=\"name\") private String name; @Column(name=\"author\") private String author; @Column(name=\"publication\") private String publication; @Column(name=\"category\") private String category; @Column(name=\"pages\") private int pages; @Column(name=\"price\") private int price; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAuthor() { return author; } public void setAuthor(String author) { this.author = author; } public String getPublication() { return publication; } public void setPublication(String publication) { this.publication = publication; } public String getCategory() { return category; } public void setCategory(String category) { this.category = category; } public int getPages() { return pages; } public void setPages(int pages) { this.pages = pages; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } } 5. BookStoreService.java package com.example.jpademo.services; import com.example.jpademo.dao.IBookStoreDAO; import com.example.jpademo.entity.Book; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class BookStoreService implements IBookStoreService { @Autowired private IBookStoreDAO dao; @Override public List<Book> getBooks() { return dao.getBooks(); } @Override public Book createBook(Book book) { return dao.createBook(book); } @Override public Book updateBook(int bookId, Book book) { return dao.updateBook(bookId, book); } @Override public Book getBook(int bookId) { return dao.getBook(bookId); } @Override public boolean deleteBook(int bookId) { return dao.deleteBook(bookId); } } 6. IBookStoreService.java package com.example.jpademo.services; import com.example.jpademo.entity.Book; import java.util.List; public interface IBookStoreService { List<Book> getBooks(); Book createBook(Book book); Book updateBook(int bookId, Book book); Book getBook(int bookId); boolean deleteBook(int bookId); } 7. JpademoApplication package com.example.jpademo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class JpademoApplication { public static void main(String[] args) { SpringApplication.run(JpademoApplication.class, args); } } \u6d4b\u8bd5 \u6784\u5efa\u5e76\u542f\u52a8\u8fd9\u4e2a\u9879\u76ee\u3002 \u5f53\u51fa\u73b0\u4e0b\u9762\u7684\u6d88\u606f\u793a\u4f8b\u65f6\uff0c\u8868\u793a\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u6b63\u5e38\u542f\u52a8\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Postman \u8c03\u7528 REST \u7aef\u53e3\u3002 2022-10-27 11:16:16.793 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : Starting JpademoApplication on username-macbookpro.local with PID 93488 (/Users/username/IdeaProjects/jpademo/target/classes started by username in /Users/username/IdeaProjects/jpademo) 2022-10-27 11:16:16.796 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : No active profile set, falling back to default profiles: default 2022-10-27 11:16:18.022 INFO 93488 --- [ main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode. 2022-10-27 11:16:18.093 INFO 93488 --- [ main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 50ms. Found 0 JPA repository interfaces. 2022-10-27 11:16:18.806 INFO 93488 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2022-10-27 11:16:18.814 INFO 93488 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2022-10-27 11:16:18.814 INFO 93488 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.41] 2022-10-27 11:16:18.886 INFO 93488 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2022-10-27 11:16:18.886 INFO 93488 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2005 ms 2022-10-27 11:16:19.068 INFO 93488 --- [ main] o.hibernate.jpa.internal.util.LogHelper : HHH000204: Processing PersistenceUnitInfo [name: default] 2022-10-27 11:16:19.119 INFO 93488 --- [ main] org.hibernate.Version : HHH000412: Hibernate ORM core version 5.4.25.Final 2022-10-27 11:16:19.202 INFO 93488 --- [ main] o.hibernate.annotations.common.Version : HCANN000001: Hibernate Commons Annotations {5.1.2.Final} 2022-10-27 11:16:19.282 INFO 93488 --- [ main] com.zaxxer.hikari.HikariDataSource : defaultDataSource - Starting... 2022-10-27 11:16:20.025 INFO 93488 --- [ main] com.zaxxer.hikari.HikariDataSource : defaultDataSource - Start completed. 2022-10-27 11:16:20.035 INFO 93488 --- [ main] org.hibernate.dialect.Dialect : HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect 2022-10-27 11:16:21.929 INFO 93488 --- [ main] o.h.e.t.j.p.i.JtaPlatformInitiator : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform] 2022-10-27 11:16:21.937 INFO 93488 --- [ main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default' 2022-10-27 11:16:22.073 WARN 93488 --- [ main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning 2022-10-27 11:16:22.221 INFO 93488 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2022-10-27 11:16:22.415 INFO 93488 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2022-10-27 11:16:22.430 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : Started JpademoApplication in 6.079 seconds (JVM running for 8.765) 2022-10-27 11:16:40.180 INFO 93488 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring DispatcherServlet 'dispatcherServlet' 2022-10-27 11:16:40.183 INFO 93488 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Initializing Servlet 'dispatcherServlet' 2022-10-27 11:16:40.249 INFO 93488 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Completed initialization in 66 ms 1. \u83b7\u53d6 Book \u5217\u8868\uff0c\u4f7f\u7528 GET \u8bf7\u6c42\u8c03\u7528\u4ee5\u4e0b\u63a5\u53e3 http://localhost:8080/bookservice/books 2. \u521b\u5efa\u4e00\u4e2a\u65b0 Book\uff0c\u4f7f\u7528 POST \u8bf7\u6c42\u8c03\u7528\u4ee5\u4e0b\u63a5\u53e3 http://localhost:8080/bookservice/books \u5c06 Header \u4e2d\u7684\u5185\u5bb9\u7c7b\u578b\u8bbe\u7f6e\u4e3a application/json \uff0c\u5c06 Request Body \u8bbe\u7f6e\u4e3a\u539f\u59cb JSON \u6709\u6548\u8d1f\u8f7d\u3002 { \"name\": \"The Lion, the Witch and the Wardrobe\", \"author\": \"C. S. Lewis\", \"publication\": \"Amazon\", \"category\": \"Fantancy\", \"pages\": 123, \"price\": 10 } 3. \u5982\u9700\u83b7\u53d6\u7279\u5b9a Book\uff0c\u4f7f\u7528 GET \u8bf7\u6c42\u8c03\u7528\u4ee5\u4e0b\u63a5\u53e3 http://localhost:8080/bookservice/books/<id> 4. \u5728\u6570\u636e\u5e93\u4e2d\u5347\u7ea7 Book\uff0c\u4f7f\u7528 PUT \u8bf7\u6c42\u8c03\u7528\u4ee5\u4e0b\u63a5\u53e3 http://localhost:8080/bookservice/books/<id> \u5c06 Header \u4e2d\u7684\u5185\u5bb9\u7c7b\u578b\u8bbe\u7f6e\u4e3a application/json \u3002 \u5c06 Request Body \u8bbe\u7f6e\u4e3a\u539f\u59cb JSON \u6709\u6548\u8d1f\u8f7d { \"name\": \"Black Beauty\", \"author\": \"Anna Sewell\", \"publication\": \"Amazon\", \"category\": \"Fantancy\", \"pages\": 134, \"price\": 12 } 5. \u5982\u9700\u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\u7279\u5b9a\u7684 Book\uff0c\u4f7f\u7528 DELETE \u8bf7\u6c42\u8c03\u7528\u4ee5\u4e0b\u63a5\u53e3 http://localhost:8080/bookservice/books/<id> mysql> select * from book; +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ | id | author | category | name | pages | price | publication | +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ | 1 | Antoine de Saint-Exupery | Fantancy | The Little Prince | 100 | 50 | Amazon | | 2 | Anna Sewell | Fantancy | Black Beauty | 134 | 12 | Amazon | | 3 | Lewis Carroll | Fantancy | Alice's Adventures in Wonderland | 1500 | 240 | Amazon | +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ 3 rows in set (0.02 sec)","title":"SpringBoot \u548c JPA \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#springboot-jpa","text":"\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u4f7f\u7528 SpringBoot \u3001 Spring Data JPA \u548c Intellij IDEA \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u529f\u80fd\u3002","title":"SpringBoot \u548c JPA \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#_1","text":"\u672c\u7bc7\u6559\u7a0b\u6d89\u53ca\u5230\u7684\u8f6f\u4ef6\u4ecb\u7ecd\u5982\u4e0b\uff1a Spring Data JPA\uff1aJPA\uff08Java Persistence API\uff0cJava \u6301\u4e45\u5c42 API\uff09\u662f\u4e00\u79cd\u89c4\u8303\uff0c\u662f JDK 5.0 \u6ce8\u89e3\u6216 XML \u63cf\u8ff0\u5bf9\u8c61\u4e0e\u5173\u7cfb\u8868\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5e76\u5c06\u8fd0\u884c\u671f\u7684\u5b9e\u4f53\u5bf9\u8c61\u6301\u4e45\u5316\u5230\u6570\u636e\u5e93\u4e2d\u3002Spring Data JPA \u662f\u4e00\u4e2a Java \u5bf9\u8c61\u6620\u5c04\u5173\u7cfb\u7684\u89e3\u51b3\u65b9\u6848\u7684 ORM\uff08Object-Relational Mapping\uff09\u6846\u67b6\uff0c\u662f\u4e00\u4e2a\u5c06\u9762\u5411\u5bf9\u8c61\u7684\u57df\u6a21\u578b\u6620\u5c04\u5230\u5173\u7cfb\u6570\u636e\u5e93\u7684\u5f00\u6e90\u6846\u67b6\u3002 Intellij IDEA\uff1aIntelliJ IDEA \u662f\u4e00\u79cd\u5546\u4e1a\u5316\u9500\u552e\u7684 Java \u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08Integrated Development Environment\uff0cIDE\uff09\u5de5\u5177\u8f6f\u4ef6\u3002\u5b83\u6240\u62e5\u6709\u8bf8\u591a\u63d2\u4ef6\uff0c\u53ef\u4ee5\u63d0\u9ad8\u6211\u4eec\u7684\u5de5\u4f5c\u6548\u7387\u3002 Maven\uff1aMaven \u662f Java \u4e2d\u529f\u80fd\u5f3a\u5927\u7684\u9879\u76ee\u7ba1\u7406\u5de5\u5177\uff0c\u53ef\u4ee5\u6839\u636e pom.xml \u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u81ea\u52a8\u4e0b\u8f7d\u548c\u5bfc\u5165 Jar \u6587\u4ef6\u3002\u8fd9\u4e2a\u7279\u6027\u51cf\u5c11\u4e86\u4e0d\u540c\u7248\u672c Jar \u6587\u4ef6\u4e4b\u95f4\u7684\u51b2\u7a81\u3002 Spring\uff1aSpring \u662f Java \u4e2d\u6700\u6d41\u884c\u7684\u6846\u67b6\u4e4b\u4e00\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4f01\u4e1a\u4f7f\u7528 Spring \u6846\u67b6\u6765\u6784\u5efa\u4ed6\u4eec\u7684\u9879\u76ee\u3002Spring Boot \u6784\u5efa\u5728\u4f20\u7edf\u7684 Spring \u6846\u67b6\u4e4b\u4e0a\u3002\u56e0\u6b64\uff0c\u5b83\u63d0\u4f9b\u4e86 Spring \u7684\u6240\u6709\u7279\u6027\uff0c\u800c\u4e14\u6bd4 Spring \u66f4\u6613\u7528\u3002 Postman: Postman \u662f\u4e00\u4e2a\u7528\u4e8e API \u6d4b\u8bd5\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u662f\u4e00\u4e2a HTTP \u5ba2\u6237\u7aef\uff0c\u5229\u7528\u56fe\u5f62\u7528\u6237\u754c\u9762\u6d4b\u8bd5 HTTP \u8bf7\u6c42\uff0c\u4ee5\u83b7\u5f97\u9700\u8981\u8fdb\u884c\u9a8c\u8bc1\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u54cd\u5e94\u3002","title":"\u5f00\u59cb\u4e4b\u524d"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#_2","text":"","title":"\u914d\u7f6e\u73af\u5883"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#1-matrixone","text":"\u521b\u5efa\u5b9e\u4f8b \u3002 \u5728 MySQL \u5ba2\u6237\u7aef\u65b0\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a test \u6570\u636e\u5e93\u3002 mysql> create database test;","title":"1. \u5b89\u88c5\u6784\u5efa MatrixOne"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#2-intellij-idea-spring-boot","text":"\u9009\u62e9 Spring Initializer \uff0c\u6309\u9700\u547d\u540d\u9879\u76ee\u540d\u79f0\u3002 \u9009\u62e9\u5982\u4e0b\u4f9d\u8d56\u9879\uff1a Spring Web JDBC API Spring Data JPA MySQL Driver \u70b9\u51fb Create \u521b\u5efa\u9879\u76ee\u3002\u4f9d\u8d56\u9879\u5217\u5728 pom.xml \u6587\u4ef6\u4e2d\u3002\u901a\u5e38\u4f60\u65e0\u9700\u4fee\u6539\u4efb\u4f55\u4e1c\u897f\u3002 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>jpademo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>jpademo</name> <description>jpademo</description> <properties> <java.version>1.8</java.version> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <spring-boot.version>2.3.7.RELEASE</spring-boot.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.3.7.RELEASE</version> <configuration> <mainClass>com.example.jpademo.JpademoApplication</mainClass> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project>","title":"2. \u4f7f\u7528 IntelliJ IDEA \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Spring Boot \u9879\u76ee"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#3-applicationproperties","text":"\u8fdb\u5165\u5230 resources \u6587\u4ef6\u76ee\u5f55\u4e0b\uff0c\u914d\u7f6e application.properties \u6587\u4ef6\uff0c\u5b8c\u6210 MatrixOne \u8fde\u63a5\u3002 # Application Name spring.application.name=jpademo # Database driver spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # Data Source name spring.datasource.name=defaultDataSource # Database connection url, modify to MatrixOne address and port, with parameters spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 # Database username and password spring.datasource.username=root spring.datasource.password=111 # Web application port server.port=8080 # Hibernate configurations spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect spring.jpa.properties.hibernate.id.new_generator_mappings = false spring.jpa.properties.hibernate.format_sql = true spring.jpa.hibernate.ddl-auto = validate","title":"3. \u4fee\u6539 application.properties \u6587\u4ef6"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#4-matrixone","text":"\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5\u5230 MatrixOne \u5e76\u6267\u884c\u4ee5\u4e0b SQL \u8bed\u53e5\u3002\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e9b SQL \u8bed\u53e5\u4fdd\u5b58\u5728 /resource/database/ \u76ee\u5f55\u4e0b\u7684 book.sql \u4e2d\u3002 mysql> USE test; mysql> CREATE TABLE IF NOT EXISTS `book` ( `id` int(11) NOT NULL AUTO_INCREMENT, `author` varchar(255) DEFAULT NULL, `category` varchar(255) DEFAULT NULL, `name` varchar(255) DEFAULT NULL, `pages` int(11) DEFAULT NULL, `price` int(11) DEFAULT NULL, `publication` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ); mysql> INSERT INTO `book` (`id`, `author`, `category`, `name`, `pages`, `price`, `publication`) VALUES (1, 'Antoine de Saint-Exupery', 'Fantancy', 'The Little Prince', 100, 50, 'Amazon'), (2, 'J. K. Rowling', 'Fantancy', 'Harry Potter and the Sorcerer''s Stone', 1000, 200, 'Amazon'), (3, 'Lewis Carroll', 'Fantancy', 'Alice''s Adventures in Wonderland', 1500, 240, 'Amazon');","title":"4. \u5728 MatrixOne \u4e2d\u65b0\u5efa\u8868\u5e76\u63d2\u5165\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#_3","text":"\u5b8c\u6210\u73af\u5883\u914d\u7f6e\u540e\uff0c\u6211\u4eec\u7f16\u5199\u4ee3\u7801\u6765\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 CRUD \u5e94\u7528\u7a0b\u5e8f\u3002 \u5728\u5b8c\u6210\u7f16\u5199\u4ee3\u7801\u540e\uff0c\u4f60\u5c06\u62e5\u6709\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684\u9879\u76ee\u7ed3\u6784\u3002\u4f60\u53ef\u4ee5\u9884\u5148\u521b\u5efa\u8fd9\u4e9b\u5305\u548c java \u7c7b\u3002 \u6211\u4eec\u5c06\u4e3a\u8fd9\u4e2a\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\u7f16\u5199\u521b\u5efa\u3001\u66f4\u65b0\u3001\u63d2\u5165\u3001\u5220\u9664\u548c\u9009\u62e9\u64cd\u4f5c\u3002","title":"\u7f16\u5199\u4ee3\u7801"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#1-bookstorecontrollerjava","text":"package com.example.jpademo.controller; import com.example.jpademo.entity.Book; import com.example.jpademo.services.IBookStoreService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.*; import java.util.List; @Controller @RequestMapping(\"bookservice\") public class BookStoreController { @Autowired private IBookStoreService service; @GetMapping(\"books\") public ResponseEntity<List<Book>> getBooks(){ List<Book> books = service.getBooks(); return new ResponseEntity<List<Book>>(books, HttpStatus.OK); } @GetMapping(\"books/{id}\") public ResponseEntity<Book> getBook(@PathVariable(\"id\") Integer id){ Book book = service.getBook(id); return new ResponseEntity<Book>(book, HttpStatus.OK); } @PostMapping(\"books\") public ResponseEntity<Book> createBook(@RequestBody Book book){ Book b = service.createBook(book); return new ResponseEntity<Book>(b, HttpStatus.OK); } @PutMapping(\"books/{id}\") public ResponseEntity<Book> updateBook(@PathVariable(\"id\") int id, @RequestBody Book book){ Book b = service.updateBook(id, book); return new ResponseEntity<Book>(b, HttpStatus.OK); } @DeleteMapping(\"books/{id}\") public ResponseEntity<String> deleteBook(@PathVariable(\"id\") int id){ boolean isDeleted = service.deleteBook(id); if(isDeleted){ String responseContent = \"Book has been deleted successfully\"; return new ResponseEntity<String>(responseContent,HttpStatus.OK); } String error = \"Error while deleting book from database\"; return new ResponseEntity<String>(error,HttpStatus.INTERNAL_SERVER_ERROR); } }","title":"1. BookStoreController.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#2-boostoredaojava","text":"package com.example.jpademo.dao; import com.example.jpademo.entity.Book; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import javax.persistence.EntityManager; import javax.persistence.PersistenceContext; import javax.persistence.Query; import java.util.List; @Transactional @Repository public class BookStoreDAO implements IBookStoreDAO { @PersistenceContext private EntityManager entityManager; /** * This method is responsible to get all books available in database and return it as List<Book> */ @SuppressWarnings(\"unchecked\") @Override public List<Book> getBooks() { String hql = \"FROM Book as atcl ORDER BY atcl.id\"; return (List<Book>) entityManager.createQuery(hql).getResultList(); } /** * This method is responsible to get a particular Book detail by given book id */ @Override public Book getBook(int bookId) { return entityManager.find(Book.class, bookId); } /** * This method is responsible to create new book in database */ @Override public Book createBook(Book book) { entityManager.persist(book); Book b = getLastInsertedBook(); return b; } /** * This method is responsible to update book detail in database */ @Override public Book updateBook(int bookId, Book book) { //First We are taking Book detail from database by given book id and // then updating detail with provided book object Book bookFromDB = getBook(bookId); bookFromDB.setName(book.getName()); bookFromDB.setAuthor(book.getAuthor()); bookFromDB.setCategory(book.getCategory()); bookFromDB.setPublication(book.getPublication()); bookFromDB.setPages(book.getPages()); bookFromDB.setPrice(book.getPrice()); entityManager.flush(); //again i am taking updated result of book and returning the book object Book updatedBook = getBook(bookId); return updatedBook; } /** * This method is responsible for deleting a particular(which id will be passed that record) * record from the database */ @Override public boolean deleteBook(int bookId) { Book book = getBook(bookId); entityManager.remove(book); //we are checking here that whether entityManager contains earlier deleted book or not // if contains then book is not deleted from DB that's why returning false; boolean status = entityManager.contains(book); if(status){ return false; } return true; } /** * This method will get the latest inserted record from the database and return the object of Book class * @return book */ private Book getLastInsertedBook(){ String hql = \"from Book order by id DESC\"; Query query = entityManager.createQuery(hql); query.setMaxResults(1); Book book = (Book)query.getSingleResult(); return book; } }","title":"2. BooStoreDAO.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#3-ibookstoredaojava","text":"package com.example.jpademo.dao; import com.example.jpademo.entity.Book; import java.util.List; public interface IBookStoreDAO { List<Book> getBooks(); Book getBook(int bookId); Book createBook(Book book); Book updateBook(int bookId,Book book); boolean deleteBook(int bookId); }","title":"3. IBookStoreDAO.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#4-bookjava","text":"package com.example.jpademo.entity; import javax.persistence.*; import java.io.Serializable; @Entity @Table(name=\"book\") public class Book implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy= GenerationType.AUTO) @Column(name=\"id\") private int id; @Column(name=\"name\") private String name; @Column(name=\"author\") private String author; @Column(name=\"publication\") private String publication; @Column(name=\"category\") private String category; @Column(name=\"pages\") private int pages; @Column(name=\"price\") private int price; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAuthor() { return author; } public void setAuthor(String author) { this.author = author; } public String getPublication() { return publication; } public void setPublication(String publication) { this.publication = publication; } public String getCategory() { return category; } public void setCategory(String category) { this.category = category; } public int getPages() { return pages; } public void setPages(int pages) { this.pages = pages; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } }","title":"4. Book.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#5-bookstoreservicejava","text":"package com.example.jpademo.services; import com.example.jpademo.dao.IBookStoreDAO; import com.example.jpademo.entity.Book; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class BookStoreService implements IBookStoreService { @Autowired private IBookStoreDAO dao; @Override public List<Book> getBooks() { return dao.getBooks(); } @Override public Book createBook(Book book) { return dao.createBook(book); } @Override public Book updateBook(int bookId, Book book) { return dao.updateBook(bookId, book); } @Override public Book getBook(int bookId) { return dao.getBook(bookId); } @Override public boolean deleteBook(int bookId) { return dao.deleteBook(bookId); } }","title":"5. BookStoreService.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#6-ibookstoreservicejava","text":"package com.example.jpademo.services; import com.example.jpademo.entity.Book; import java.util.List; public interface IBookStoreService { List<Book> getBooks(); Book createBook(Book book); Book updateBook(int bookId, Book book); Book getBook(int bookId); boolean deleteBook(int bookId); }","title":"6. IBookStoreService.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#7-jpademoapplication","text":"package com.example.jpademo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class JpademoApplication { public static void main(String[] args) { SpringApplication.run(JpademoApplication.class, args); } }","title":"7. JpademoApplication"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#_4","text":"\u6784\u5efa\u5e76\u542f\u52a8\u8fd9\u4e2a\u9879\u76ee\u3002 \u5f53\u51fa\u73b0\u4e0b\u9762\u7684\u6d88\u606f\u793a\u4f8b\u65f6\uff0c\u8868\u793a\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u6b63\u5e38\u542f\u52a8\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Postman \u8c03\u7528 REST \u7aef\u53e3\u3002 2022-10-27 11:16:16.793 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : Starting JpademoApplication on username-macbookpro.local with PID 93488 (/Users/username/IdeaProjects/jpademo/target/classes started by username in /Users/username/IdeaProjects/jpademo) 2022-10-27 11:16:16.796 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : No active profile set, falling back to default profiles: default 2022-10-27 11:16:18.022 INFO 93488 --- [ main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode. 2022-10-27 11:16:18.093 INFO 93488 --- [ main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 50ms. Found 0 JPA repository interfaces. 2022-10-27 11:16:18.806 INFO 93488 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2022-10-27 11:16:18.814 INFO 93488 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2022-10-27 11:16:18.814 INFO 93488 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.41] 2022-10-27 11:16:18.886 INFO 93488 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2022-10-27 11:16:18.886 INFO 93488 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2005 ms 2022-10-27 11:16:19.068 INFO 93488 --- [ main] o.hibernate.jpa.internal.util.LogHelper : HHH000204: Processing PersistenceUnitInfo [name: default] 2022-10-27 11:16:19.119 INFO 93488 --- [ main] org.hibernate.Version : HHH000412: Hibernate ORM core version 5.4.25.Final 2022-10-27 11:16:19.202 INFO 93488 --- [ main] o.hibernate.annotations.common.Version : HCANN000001: Hibernate Commons Annotations {5.1.2.Final} 2022-10-27 11:16:19.282 INFO 93488 --- [ main] com.zaxxer.hikari.HikariDataSource : defaultDataSource - Starting... 2022-10-27 11:16:20.025 INFO 93488 --- [ main] com.zaxxer.hikari.HikariDataSource : defaultDataSource - Start completed. 2022-10-27 11:16:20.035 INFO 93488 --- [ main] org.hibernate.dialect.Dialect : HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect 2022-10-27 11:16:21.929 INFO 93488 --- [ main] o.h.e.t.j.p.i.JtaPlatformInitiator : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform] 2022-10-27 11:16:21.937 INFO 93488 --- [ main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default' 2022-10-27 11:16:22.073 WARN 93488 --- [ main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning 2022-10-27 11:16:22.221 INFO 93488 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2022-10-27 11:16:22.415 INFO 93488 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2022-10-27 11:16:22.430 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : Started JpademoApplication in 6.079 seconds (JVM running for 8.765) 2022-10-27 11:16:40.180 INFO 93488 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring DispatcherServlet 'dispatcherServlet' 2022-10-27 11:16:40.183 INFO 93488 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Initializing Servlet 'dispatcherServlet' 2022-10-27 11:16:40.249 INFO 93488 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Completed initialization in 66 ms","title":"\u6d4b\u8bd5"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#1-book-get","text":"http://localhost:8080/bookservice/books","title":"1. \u83b7\u53d6 Book \u5217\u8868\uff0c\u4f7f\u7528 GET \u8bf7\u6c42\u8c03\u7528\u4ee5\u4e0b\u63a5\u53e3"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#2-book-post","text":"http://localhost:8080/bookservice/books \u5c06 Header \u4e2d\u7684\u5185\u5bb9\u7c7b\u578b\u8bbe\u7f6e\u4e3a application/json \uff0c\u5c06 Request Body \u8bbe\u7f6e\u4e3a\u539f\u59cb JSON \u6709\u6548\u8d1f\u8f7d\u3002 { \"name\": \"The Lion, the Witch and the Wardrobe\", \"author\": \"C. S. Lewis\", \"publication\": \"Amazon\", \"category\": \"Fantancy\", \"pages\": 123, \"price\": 10 }","title":"2. \u521b\u5efa\u4e00\u4e2a\u65b0 Book\uff0c\u4f7f\u7528 POST \u8bf7\u6c42\u8c03\u7528\u4ee5\u4e0b\u63a5\u53e3"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#3-book-get","text":"http://localhost:8080/bookservice/books/<id>","title":"3. \u5982\u9700\u83b7\u53d6\u7279\u5b9a Book\uff0c\u4f7f\u7528 GET \u8bf7\u6c42\u8c03\u7528\u4ee5\u4e0b\u63a5\u53e3"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#4-book-put","text":"http://localhost:8080/bookservice/books/<id> \u5c06 Header \u4e2d\u7684\u5185\u5bb9\u7c7b\u578b\u8bbe\u7f6e\u4e3a application/json \u3002 \u5c06 Request Body \u8bbe\u7f6e\u4e3a\u539f\u59cb JSON \u6709\u6548\u8d1f\u8f7d { \"name\": \"Black Beauty\", \"author\": \"Anna Sewell\", \"publication\": \"Amazon\", \"category\": \"Fantancy\", \"pages\": 134, \"price\": 12 }","title":"4. \u5728\u6570\u636e\u5e93\u4e2d\u5347\u7ea7 Book\uff0c\u4f7f\u7528 PUT \u8bf7\u6c42\u8c03\u7528\u4ee5\u4e0b\u63a5\u53e3"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-hibernate-crud-demo/#5-book-delete","text":"http://localhost:8080/bookservice/books/<id> mysql> select * from book; +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ | id | author | category | name | pages | price | publication | +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ | 1 | Antoine de Saint-Exupery | Fantancy | The Little Prince | 100 | 50 | Amazon | | 2 | Anna Sewell | Fantancy | Black Beauty | 134 | 12 | Amazon | | 3 | Lewis Carroll | Fantancy | Alice's Adventures in Wonderland | 1500 | 240 | Amazon | +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ 3 rows in set (0.02 sec)","title":"5. \u5982\u9700\u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\u7279\u5b9a\u7684 Book\uff0c\u4f7f\u7528 DELETE \u8bf7\u6c42\u8c03\u7528\u4ee5\u4e0b\u63a5\u53e3"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/","text":"SpringBoot \u548c MyBatis \u57fa\u7840\u793a\u4f8b \u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u4f7f\u7528 SpringBoot \u3001 Mybatis \u548c Intellij IDEA \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u529f\u80fd\u3002 \u5f00\u59cb\u4e4b\u524d \u672c\u7bc7\u6559\u7a0b\u6d89\u53ca\u5230\u7684\u8f6f\u4ef6\u4ecb\u7ecd\u5982\u4e0b\uff1a MyBatis\uff1aMyBatis \u662f\u4e00\u6b3e\u4f18\u79c0\u7684\u6301\u4e45\u5c42\u6846\u67b6\uff0c\u5b83\u652f\u6301\u81ea\u5b9a\u4e49 SQL\u3001\u5b58\u50a8\u8fc7\u7a0b\u4ee5\u53ca\u9ad8\u7ea7\u6620\u5c04\u3002\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8\u9879\u76ee\u4e2d\u7684 SQL \u672c\u8eab\u3002 Intellij IDEA\uff1aIntelliJ IDEA \u662f\u4e00\u79cd\u5546\u4e1a\u5316\u9500\u552e\u7684 Java \u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08Integrated Development Environment\uff0cIDE\uff09\u5de5\u5177\u8f6f\u4ef6\u3002\u5b83\u6240\u62e5\u6709\u7684\u8bf8\u591a\u63d2\u4ef6\uff0c\u53ef\u4ee5\u63d0\u9ad8\u6211\u4eec\u7684\u5de5\u4f5c\u6548\u7387\u3002 Maven\uff1aMaven \u662f Java \u4e2d\u529f\u80fd\u5f3a\u5927\u7684\u9879\u76ee\u7ba1\u7406\u5de5\u5177\uff0c\u53ef\u4ee5\u6839\u636e pom.xml \u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u81ea\u52a8\u4e0b\u8f7d\u548c\u5bfc\u5165 Jar \u6587\u4ef6\u3002\u8fd9\u4e2a\u7279\u6027\u51cf\u5c11\u4e86\u4e0d\u540c\u7248\u672c Jar \u6587\u4ef6\u4e4b\u95f4\u7684\u51b2\u7a81\u3002 Spring\uff1aSpring \u662f Java \u4e2d\u6700\u6d41\u884c\u7684\u6846\u67b6\u4e4b\u4e00\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4f01\u4e1a\u4f7f\u7528 Spring \u6846\u67b6\u6765\u6784\u5efa\u4ed6\u4eec\u7684\u9879\u76ee\u3002Spring Boot \u6784\u5efa\u5728\u4f20\u7edf\u7684 Spring \u6846\u67b6\u4e4b\u4e0a\u3002\u56e0\u6b64\uff0c\u5b83\u63d0\u4f9b\u4e86 Spring \u7684\u6240\u6709\u7279\u6027\uff0c\u800c\u4e14\u6bd4 Spring \u66f4\u6613\u7528\u3002 \u914d\u7f6e\u73af\u5883 1. \u5b89\u88c5\u6784\u5efa MatrixOne \u521b\u5efa\u5b9e\u4f8b \u3002 \u5728 MySQL \u5ba2\u6237\u7aef\u65b0\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a test \u6570\u636e\u5e93\u3002 mysql> create database test; 2. \u4f7f\u7528 IntelliJ IDEA \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Spring Boot \u9879\u76ee \u9009\u62e9 Spring Initializer \uff0c\u6309\u9700\u547d\u540d\u9879\u76ee\u540d\u79f0\u3002 \u9009\u62e9\u5982\u4e0b\u4f9d\u8d56\u9879\uff1a Spring Web MyBatis Framework JDBC API MySQL Driver \u70b9\u51fb Create \u521b\u5efa\u9879\u76ee\u3002\u4f9d\u8d56\u9879\u5217\u5728 pom.xml \u6587\u4ef6\u4e2d\u3002\u901a\u5e38\u4f60\u65e0\u9700\u4fee\u6539\u4efb\u4f55\u4e1c\u897f\u3002 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>mybatis-demo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>mybatis-demo</name> <description>mybatis-demo</description> <properties> <java.version>1.8</java.version> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <spring-boot.version>2.3.7.RELEASE</spring-boot.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.4</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.3.7.RELEASE</version> <configuration> <mainClass>com.example.mybatisdemo.MybatisDemoApplication</mainClass> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project> 3. \u4fee\u6539 application.properties \u6587\u4ef6 \u8fdb\u5165\u5230 resources \u6587\u4ef6\u76ee\u5f55\u4e0b\uff0c\u914d\u7f6e application.properties \u6587\u4ef6\uff0c\u5b8c\u6210 MatrixOne \u8fde\u63a5\u3002 # Application Name spring.application.name=MyBatisDemo # Database driver spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # Data Source name spring.datasource.name=defaultDataSource # Database connection url, modify to MatrixOne address and port, with paratemers spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 # Database username and password spring.datasource.username=root spring.datasource.password=111 # Mybatis mapper location mybatis.mapper-locations=classpath:mapping/*xml # Mybatis entity package mybatis.type-aliases-package=com.example.mybatisdemo.entity # Web application port server.port=8080 \u7f16\u5199\u4ee3\u7801 \u5b8c\u6210\u73af\u5883\u914d\u7f6e\u540e\uff0c\u6211\u4eec\u7f16\u5199\u4ee3\u7801\u6765\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 CRUD \u5e94\u7528\u7a0b\u5e8f\u3002 \u5728\u5b8c\u6210\u7f16\u5199\u4ee3\u7801\u540e\uff0c\u4f60\u5c06\u62e5\u6709\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684\u9879\u76ee\u7ed3\u6784\u3002\u4f60\u53ef\u4ee5\u9884\u5148\u521b\u5efa\u8fd9\u4e9b\u5305\u548c java \u7c7b\u3002 \u6211\u4eec\u5c06\u4e3a\u8fd9\u4e2a\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\u7f16\u5199\u521b\u5efa\u3001\u66f4\u65b0\u3001\u63d2\u5165\u3001\u5220\u9664\u548c\u9009\u62e9\u64cd\u4f5c\u3002 1. UserController.java package com.example.mybatisdemo.controller; import com.example.mybatisdemo.entity.User; import com.example.mybatisdemo.service.UserService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\"/test\") public class UserController { String tableName = \"user\"; @Autowired private UserService userService; @RequestMapping(value = \"/create\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) @ResponseBody public String createTable(){ return userService.createTable(tableName); } @RequestMapping(value = \"/selectUserByid\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) @ResponseBody public String GetUser(User user){ return userService.Sel(user).toString(); } @RequestMapping(value = \"/add\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Add(User user){ return userService.Add(user); } @RequestMapping(value = \"/update\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Update(User user){ return userService.Update(user); } @RequestMapping(value = \"/delete\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Delete(User user){ return userService.Delete(user); } } 2. User.java package com.example.mybatisdemo.entity; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; public class User { private Integer id; private String username; private String password; private String address; public User(Integer id, String username, String password, String address) { this.id = id; this.username = username; this.password = password; this.address = address; } public Integer getId() { return id; } public String getUsername() { return username; } public String getPassword() { return password; } public String getAddress() { return address; } public void setId(Integer id) { this.id = id; } public void setUsername(String username) { this.username = username; } public void setPassword(String password) { this.password = password; } public void setAddress(String address) { this.address = address; } @Override public String toString() { return \"User{\" + \"id=\" + id + \", username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", address='\" + address + '\\'' + '}'; } } 3. UserMapper.java package com.example.mybatisdemo.mapper; import com.example.mybatisdemo.entity.User; import org.apache.ibatis.annotations.Param; import org.springframework.stereotype.Repository; @Repository public interface UserMapper { int createTable(@Param(\"tableName\") String tableName); User Sel(@Param(\"user\")User user); int Add(@Param(\"user\")User user); int Update(@Param(\"user\")User user); int Delete(@Param(\"user\")User user); } 4. UserService.java package com.example.mybatisdemo.service; import com.example.mybatisdemo.entity.User; import com.example.mybatisdemo.mapper.UserMapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class UserService { @Autowired UserMapper userMapper; public String createTable(String table){ int a = userMapper.createTable(table); if (a == 1) { return \"Create table failed\"; } else { return \"Create table successfully\"; } } public User Sel(User user) { return userMapper.Sel(user); } public String Add(User user) { int a = userMapper.Add(user); if (a == 1) { return \"Add user successfully\"; } else { return \"Add user failed\"; } } public String Update(User user) { int a = userMapper.Update(user); if (a == 1) { return \"Update user successfully\"; } else { return \"Update user failed\"; } } public String Delete(User user) { int a = userMapper.Delete(user); if (a == 1) { return \"Delete user successfully\"; } else { return \"Delete user failed\"; } } }; 5. MyBatisDemoApplication.java package com.example.mybatisdemo; import org.mybatis.spring.annotation.MapperScan; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @MapperScan(\"com.example.mybatisdemo.mapper\") @SpringBootApplication public class MyBatisDemoApplication { public static void main(String[] args) { SpringApplication.run(MyBatisDemoApplication.class, args); } } 6. UserMapper.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> <mapper namespace=\"com.example.mybatisdemo.mapper.UserMapper\"> <resultMap id=\"BaseResultMap\" type=\"com.example.mybatisdemo.entity.User\"> <result column=\"id\" jdbcType=\"INTEGER\" property=\"id\"/> <result column=\"userName\" jdbcType=\"VARCHAR\" property=\"username\"/> <result column=\"passWord\" jdbcType=\"VARCHAR\" property=\"password\"/> <result column=\"realName\" jdbcType=\"VARCHAR\" property=\"address\"/> </resultMap> <update id=\"createTable\" parameterType=\"string\"> CREATE TABLE ${tableName} ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(255) DEFAULT NULL, `password` varchar(255) DEFAULT NULL, `address` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ); </update> <select id=\"Sel\" resultType=\"com.example.mybatisdemo.entity.User\"> select * from user where 1=1 <if test=\"user.id != null\"> AND id = #{user.id} </if> </select> <insert id=\"Add\" parameterType=\"com.example.mybatisdemo.entity.User\"> INSERT INTO user <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\"> <if test=\"user.username != null\"> username, </if> <if test=\"user.password != null\"> password, </if> <if test=\"user.address != null\"> address, </if> </trim> <trim prefix=\"VALUES (\" suffix=\")\" suffixOverrides=\",\"> <if test=\"user.username != null\"> #{user.username,jdbcType=VARCHAR}, </if> <if test=\"user.password != null\"> #{user.password,jdbcType=VARCHAR}, </if> <if test=\"user.address != null\"> #{user.address,jdbcType=VARCHAR}, </if> </trim> </insert> <update id=\"Update\" parameterType=\"com.example.mybatisdemo.entity.User\"> UPDATE user <set> <if test=\"user.username != null\"> username = #{user.username}, </if> <if test=\"user.password != null\"> password = #{user.password}, </if> <if test=\"user.address != null\"> address = #{user.address}, </if> </set> WHERE id=#{user.id} </update> <delete id=\"Delete\" parameterType=\"com.example.mybatisdemo.entity.User\"> DELETE FROM user WHERE id = #{user.id} </delete> </mapper> \u6d4b\u8bd5 \u6784\u5efa\u5e76\u542f\u52a8\u8fd9\u4e2a\u9879\u76ee\u3002 \u5f53\u51fa\u73b0\u4e0b\u9762\u7684\u6d88\u606f\u793a\u4f8b\u65f6\uff0c\u8868\u793a\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u6b63\u5e38\u542f\u52a8\uff0c\u4f60\u53ef\u4ee5\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u53d1\u9001 HTTP \u8bf7\u6c42\u3002 2022-10-26 16:13:24.030 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : Starting MyBatisDemoApplication on username-macbookpro.local with PID 60253 (/Users/username/IdeaProjects/MyBatisDemo/target/classes started by username in /Users/username/IdeaProjects/MyBatisDemo) 2022-10-26 16:13:24.035 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : No active profile set, falling back to default profiles: default 2022-10-26 16:13:25.415 INFO 60253 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2022-10-26 16:13:25.421 INFO 60253 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2022-10-26 16:13:25.421 INFO 60253 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.41] 2022-10-26 16:13:25.476 INFO 60253 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2022-10-26 16:13:25.477 INFO 60253 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1390 ms 2022-10-26 16:13:26.020 INFO 60253 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2022-10-26 16:13:26.248 INFO 60253 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2022-10-26 16:13:26.272 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : Started MyBatisDemoApplication in 2.669 seconds (JVM running for 3.544) 1. \u6d4b\u8bd5\u65b0\u5efa\u8868 \u6253\u5f00\u4f60\u7684\u7684\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u7f51\u5740\uff1a http://localhost:8080/test/create \u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\uff0c\u9a8c\u8bc1\u8868\u662f\u5426\u5df2\u6210\u529f\u521b\u5efa\u3002 mysql> use test; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql> show tables; +----------------+ | tables_in_test | +----------------+ | user | +----------------+ 1 row in set (0.00 sec) mysql> show create table user; +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | user | CREATE TABLE `user` ( `id` INT NOT NULL AUTO_INCREMENT, `username` VARCHAR(255) DEFAULT null, `password` VARCHAR(255) DEFAULT null, `address` VARCHAR(255) DEFAULT null, PRIMARY KEY (`id`) ) | +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.01 sec) 2. \u6d4b\u8bd5\u589e\u52a0\u7528\u6237 \u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u7f51\u5740\uff1a http://localhost:8080/test/add?username=tom&password=123456&address=shanghai \u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u6210\u529f\u6dfb\u52a0\u8bb0\u5f55\uff1a mysql> select * from user; +------+----------+----------+----------+ | id | username | password | address | +------+----------+----------+----------+ | 1 | tom | 123456 | shanghai | +------+----------+----------+----------+ 1 row in set (0.00 sec) 3. \u6d4b\u8bd5\u67e5\u8be2\u7528\u6237 \u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u7f51\u5740\uff1a http://localhost:8080/test/selectUserByid?id=1 \u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece\u6d4f\u89c8\u5668\u4e2d\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\u3002 4. \u6d4b\u8bd5\u66f4\u65b0\u7528\u6237 \u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u7f51\u5740\uff1a http://localhost:8080/test/update?id=1&username=tom&password=654321&address=beijing \u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u6210\u529f\u66f4\u65b0\u8bb0\u5f55\uff1a mysql> select * from user; +------+----------+----------+---------+ | id | username | password | address | +------+----------+----------+---------+ | 1 | tom | 654321 | beijing | +------+----------+----------+---------+ 1 row in set (0.00 sec) 5. \u6d4b\u8bd5\u5220\u9664\u7528\u6237 \u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u7f51\u5740\uff1a http://localhost:8080/test/delete?id=1 \u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u6210\u529f\u5220\u9664\u8bb0\u5f55\uff1a mysql> select * from user; Empty set (0.00 sec)","title":"SpringBoot \u548c MyBatis \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#springboot-mybatis","text":"\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u4f7f\u7528 SpringBoot \u3001 Mybatis \u548c Intellij IDEA \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u529f\u80fd\u3002","title":"SpringBoot \u548c MyBatis \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#_1","text":"\u672c\u7bc7\u6559\u7a0b\u6d89\u53ca\u5230\u7684\u8f6f\u4ef6\u4ecb\u7ecd\u5982\u4e0b\uff1a MyBatis\uff1aMyBatis \u662f\u4e00\u6b3e\u4f18\u79c0\u7684\u6301\u4e45\u5c42\u6846\u67b6\uff0c\u5b83\u652f\u6301\u81ea\u5b9a\u4e49 SQL\u3001\u5b58\u50a8\u8fc7\u7a0b\u4ee5\u53ca\u9ad8\u7ea7\u6620\u5c04\u3002\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8\u9879\u76ee\u4e2d\u7684 SQL \u672c\u8eab\u3002 Intellij IDEA\uff1aIntelliJ IDEA \u662f\u4e00\u79cd\u5546\u4e1a\u5316\u9500\u552e\u7684 Java \u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08Integrated Development Environment\uff0cIDE\uff09\u5de5\u5177\u8f6f\u4ef6\u3002\u5b83\u6240\u62e5\u6709\u7684\u8bf8\u591a\u63d2\u4ef6\uff0c\u53ef\u4ee5\u63d0\u9ad8\u6211\u4eec\u7684\u5de5\u4f5c\u6548\u7387\u3002 Maven\uff1aMaven \u662f Java \u4e2d\u529f\u80fd\u5f3a\u5927\u7684\u9879\u76ee\u7ba1\u7406\u5de5\u5177\uff0c\u53ef\u4ee5\u6839\u636e pom.xml \u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u81ea\u52a8\u4e0b\u8f7d\u548c\u5bfc\u5165 Jar \u6587\u4ef6\u3002\u8fd9\u4e2a\u7279\u6027\u51cf\u5c11\u4e86\u4e0d\u540c\u7248\u672c Jar \u6587\u4ef6\u4e4b\u95f4\u7684\u51b2\u7a81\u3002 Spring\uff1aSpring \u662f Java \u4e2d\u6700\u6d41\u884c\u7684\u6846\u67b6\u4e4b\u4e00\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4f01\u4e1a\u4f7f\u7528 Spring \u6846\u67b6\u6765\u6784\u5efa\u4ed6\u4eec\u7684\u9879\u76ee\u3002Spring Boot \u6784\u5efa\u5728\u4f20\u7edf\u7684 Spring \u6846\u67b6\u4e4b\u4e0a\u3002\u56e0\u6b64\uff0c\u5b83\u63d0\u4f9b\u4e86 Spring \u7684\u6240\u6709\u7279\u6027\uff0c\u800c\u4e14\u6bd4 Spring \u66f4\u6613\u7528\u3002","title":"\u5f00\u59cb\u4e4b\u524d"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#_2","text":"","title":"\u914d\u7f6e\u73af\u5883"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#1-matrixone","text":"\u521b\u5efa\u5b9e\u4f8b \u3002 \u5728 MySQL \u5ba2\u6237\u7aef\u65b0\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a test \u6570\u636e\u5e93\u3002 mysql> create database test;","title":"1. \u5b89\u88c5\u6784\u5efa MatrixOne"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#2-intellij-idea-spring-boot","text":"\u9009\u62e9 Spring Initializer \uff0c\u6309\u9700\u547d\u540d\u9879\u76ee\u540d\u79f0\u3002 \u9009\u62e9\u5982\u4e0b\u4f9d\u8d56\u9879\uff1a Spring Web MyBatis Framework JDBC API MySQL Driver \u70b9\u51fb Create \u521b\u5efa\u9879\u76ee\u3002\u4f9d\u8d56\u9879\u5217\u5728 pom.xml \u6587\u4ef6\u4e2d\u3002\u901a\u5e38\u4f60\u65e0\u9700\u4fee\u6539\u4efb\u4f55\u4e1c\u897f\u3002 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>mybatis-demo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>mybatis-demo</name> <description>mybatis-demo</description> <properties> <java.version>1.8</java.version> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <spring-boot.version>2.3.7.RELEASE</spring-boot.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.4</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.3.7.RELEASE</version> <configuration> <mainClass>com.example.mybatisdemo.MybatisDemoApplication</mainClass> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project>","title":"2. \u4f7f\u7528 IntelliJ IDEA \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Spring Boot \u9879\u76ee"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#3-applicationproperties","text":"\u8fdb\u5165\u5230 resources \u6587\u4ef6\u76ee\u5f55\u4e0b\uff0c\u914d\u7f6e application.properties \u6587\u4ef6\uff0c\u5b8c\u6210 MatrixOne \u8fde\u63a5\u3002 # Application Name spring.application.name=MyBatisDemo # Database driver spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # Data Source name spring.datasource.name=defaultDataSource # Database connection url, modify to MatrixOne address and port, with paratemers spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 # Database username and password spring.datasource.username=root spring.datasource.password=111 # Mybatis mapper location mybatis.mapper-locations=classpath:mapping/*xml # Mybatis entity package mybatis.type-aliases-package=com.example.mybatisdemo.entity # Web application port server.port=8080","title":"3. \u4fee\u6539 application.properties \u6587\u4ef6"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#_3","text":"\u5b8c\u6210\u73af\u5883\u914d\u7f6e\u540e\uff0c\u6211\u4eec\u7f16\u5199\u4ee3\u7801\u6765\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 CRUD \u5e94\u7528\u7a0b\u5e8f\u3002 \u5728\u5b8c\u6210\u7f16\u5199\u4ee3\u7801\u540e\uff0c\u4f60\u5c06\u62e5\u6709\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684\u9879\u76ee\u7ed3\u6784\u3002\u4f60\u53ef\u4ee5\u9884\u5148\u521b\u5efa\u8fd9\u4e9b\u5305\u548c java \u7c7b\u3002 \u6211\u4eec\u5c06\u4e3a\u8fd9\u4e2a\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\u7f16\u5199\u521b\u5efa\u3001\u66f4\u65b0\u3001\u63d2\u5165\u3001\u5220\u9664\u548c\u9009\u62e9\u64cd\u4f5c\u3002","title":"\u7f16\u5199\u4ee3\u7801"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#1-usercontrollerjava","text":"package com.example.mybatisdemo.controller; import com.example.mybatisdemo.entity.User; import com.example.mybatisdemo.service.UserService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\"/test\") public class UserController { String tableName = \"user\"; @Autowired private UserService userService; @RequestMapping(value = \"/create\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) @ResponseBody public String createTable(){ return userService.createTable(tableName); } @RequestMapping(value = \"/selectUserByid\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) @ResponseBody public String GetUser(User user){ return userService.Sel(user).toString(); } @RequestMapping(value = \"/add\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Add(User user){ return userService.Add(user); } @RequestMapping(value = \"/update\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Update(User user){ return userService.Update(user); } @RequestMapping(value = \"/delete\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Delete(User user){ return userService.Delete(user); } }","title":"1. UserController.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#2-userjava","text":"package com.example.mybatisdemo.entity; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; public class User { private Integer id; private String username; private String password; private String address; public User(Integer id, String username, String password, String address) { this.id = id; this.username = username; this.password = password; this.address = address; } public Integer getId() { return id; } public String getUsername() { return username; } public String getPassword() { return password; } public String getAddress() { return address; } public void setId(Integer id) { this.id = id; } public void setUsername(String username) { this.username = username; } public void setPassword(String password) { this.password = password; } public void setAddress(String address) { this.address = address; } @Override public String toString() { return \"User{\" + \"id=\" + id + \", username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", address='\" + address + '\\'' + '}'; } }","title":"2. User.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#3-usermapperjava","text":"package com.example.mybatisdemo.mapper; import com.example.mybatisdemo.entity.User; import org.apache.ibatis.annotations.Param; import org.springframework.stereotype.Repository; @Repository public interface UserMapper { int createTable(@Param(\"tableName\") String tableName); User Sel(@Param(\"user\")User user); int Add(@Param(\"user\")User user); int Update(@Param(\"user\")User user); int Delete(@Param(\"user\")User user); }","title":"3. UserMapper.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#4-userservicejava","text":"package com.example.mybatisdemo.service; import com.example.mybatisdemo.entity.User; import com.example.mybatisdemo.mapper.UserMapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class UserService { @Autowired UserMapper userMapper; public String createTable(String table){ int a = userMapper.createTable(table); if (a == 1) { return \"Create table failed\"; } else { return \"Create table successfully\"; } } public User Sel(User user) { return userMapper.Sel(user); } public String Add(User user) { int a = userMapper.Add(user); if (a == 1) { return \"Add user successfully\"; } else { return \"Add user failed\"; } } public String Update(User user) { int a = userMapper.Update(user); if (a == 1) { return \"Update user successfully\"; } else { return \"Update user failed\"; } } public String Delete(User user) { int a = userMapper.Delete(user); if (a == 1) { return \"Delete user successfully\"; } else { return \"Delete user failed\"; } } };","title":"4. UserService.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#5-mybatisdemoapplicationjava","text":"package com.example.mybatisdemo; import org.mybatis.spring.annotation.MapperScan; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @MapperScan(\"com.example.mybatisdemo.mapper\") @SpringBootApplication public class MyBatisDemoApplication { public static void main(String[] args) { SpringApplication.run(MyBatisDemoApplication.class, args); } }","title":"5. MyBatisDemoApplication.java"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#6-usermapperxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> <mapper namespace=\"com.example.mybatisdemo.mapper.UserMapper\"> <resultMap id=\"BaseResultMap\" type=\"com.example.mybatisdemo.entity.User\"> <result column=\"id\" jdbcType=\"INTEGER\" property=\"id\"/> <result column=\"userName\" jdbcType=\"VARCHAR\" property=\"username\"/> <result column=\"passWord\" jdbcType=\"VARCHAR\" property=\"password\"/> <result column=\"realName\" jdbcType=\"VARCHAR\" property=\"address\"/> </resultMap> <update id=\"createTable\" parameterType=\"string\"> CREATE TABLE ${tableName} ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(255) DEFAULT NULL, `password` varchar(255) DEFAULT NULL, `address` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ); </update> <select id=\"Sel\" resultType=\"com.example.mybatisdemo.entity.User\"> select * from user where 1=1 <if test=\"user.id != null\"> AND id = #{user.id} </if> </select> <insert id=\"Add\" parameterType=\"com.example.mybatisdemo.entity.User\"> INSERT INTO user <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\"> <if test=\"user.username != null\"> username, </if> <if test=\"user.password != null\"> password, </if> <if test=\"user.address != null\"> address, </if> </trim> <trim prefix=\"VALUES (\" suffix=\")\" suffixOverrides=\",\"> <if test=\"user.username != null\"> #{user.username,jdbcType=VARCHAR}, </if> <if test=\"user.password != null\"> #{user.password,jdbcType=VARCHAR}, </if> <if test=\"user.address != null\"> #{user.address,jdbcType=VARCHAR}, </if> </trim> </insert> <update id=\"Update\" parameterType=\"com.example.mybatisdemo.entity.User\"> UPDATE user <set> <if test=\"user.username != null\"> username = #{user.username}, </if> <if test=\"user.password != null\"> password = #{user.password}, </if> <if test=\"user.address != null\"> address = #{user.address}, </if> </set> WHERE id=#{user.id} </update> <delete id=\"Delete\" parameterType=\"com.example.mybatisdemo.entity.User\"> DELETE FROM user WHERE id = #{user.id} </delete> </mapper>","title":"6. UserMapper.xml"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#_4","text":"\u6784\u5efa\u5e76\u542f\u52a8\u8fd9\u4e2a\u9879\u76ee\u3002 \u5f53\u51fa\u73b0\u4e0b\u9762\u7684\u6d88\u606f\u793a\u4f8b\u65f6\uff0c\u8868\u793a\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u6b63\u5e38\u542f\u52a8\uff0c\u4f60\u53ef\u4ee5\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u53d1\u9001 HTTP \u8bf7\u6c42\u3002 2022-10-26 16:13:24.030 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : Starting MyBatisDemoApplication on username-macbookpro.local with PID 60253 (/Users/username/IdeaProjects/MyBatisDemo/target/classes started by username in /Users/username/IdeaProjects/MyBatisDemo) 2022-10-26 16:13:24.035 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : No active profile set, falling back to default profiles: default 2022-10-26 16:13:25.415 INFO 60253 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2022-10-26 16:13:25.421 INFO 60253 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2022-10-26 16:13:25.421 INFO 60253 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.41] 2022-10-26 16:13:25.476 INFO 60253 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2022-10-26 16:13:25.477 INFO 60253 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1390 ms 2022-10-26 16:13:26.020 INFO 60253 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2022-10-26 16:13:26.248 INFO 60253 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2022-10-26 16:13:26.272 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : Started MyBatisDemoApplication in 2.669 seconds (JVM running for 3.544)","title":"\u6d4b\u8bd5"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#1","text":"\u6253\u5f00\u4f60\u7684\u7684\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u7f51\u5740\uff1a http://localhost:8080/test/create \u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\uff0c\u9a8c\u8bc1\u8868\u662f\u5426\u5df2\u6210\u529f\u521b\u5efa\u3002 mysql> use test; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql> show tables; +----------------+ | tables_in_test | +----------------+ | user | +----------------+ 1 row in set (0.00 sec) mysql> show create table user; +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | user | CREATE TABLE `user` ( `id` INT NOT NULL AUTO_INCREMENT, `username` VARCHAR(255) DEFAULT null, `password` VARCHAR(255) DEFAULT null, `address` VARCHAR(255) DEFAULT null, PRIMARY KEY (`id`) ) | +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.01 sec)","title":"1. \u6d4b\u8bd5\u65b0\u5efa\u8868"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#2","text":"\u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u7f51\u5740\uff1a http://localhost:8080/test/add?username=tom&password=123456&address=shanghai \u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u6210\u529f\u6dfb\u52a0\u8bb0\u5f55\uff1a mysql> select * from user; +------+----------+----------+----------+ | id | username | password | address | +------+----------+----------+----------+ | 1 | tom | 123456 | shanghai | +------+----------+----------+----------+ 1 row in set (0.00 sec)","title":"2. \u6d4b\u8bd5\u589e\u52a0\u7528\u6237"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#3","text":"\u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u7f51\u5740\uff1a http://localhost:8080/test/selectUserByid?id=1 \u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece\u6d4f\u89c8\u5668\u4e2d\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\u3002","title":"3. \u6d4b\u8bd5\u67e5\u8be2\u7528\u6237"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#4","text":"\u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u7f51\u5740\uff1a http://localhost:8080/test/update?id=1&username=tom&password=654321&address=beijing \u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u6210\u529f\u66f4\u65b0\u8bb0\u5f55\uff1a mysql> select * from user; +------+----------+----------+---------+ | id | username | password | address | +------+----------+----------+---------+ | 1 | tom | 654321 | beijing | +------+----------+----------+---------+ 1 row in set (0.00 sec)","title":"4. \u6d4b\u8bd5\u66f4\u65b0\u7528\u6237"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/springboot-mybatis-crud-demo/#5","text":"\u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\u5e76\u8f93\u5165\u7f51\u5740\uff1a http://localhost:8080/test/delete?id=1 \u5728 MySQL \u5ba2\u6237\u7aef\u4e2d\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u6210\u529f\u5220\u9664\u8bb0\u5f55\uff1a mysql> select * from user; Empty set (0.00 sec)","title":"5. \u6d4b\u8bd5\u5220\u9664\u7528\u6237"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/sqlalchemy-python-crud-demo/","text":"SQLAlchemy \u57fa\u7840\u793a\u4f8b \u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u4f7f\u7528 Python \u548c SQLAlchemy \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u529f\u80fd\u3002 SQLAlchemy \u662f Python \u8bed\u8a00\u4e2d\u6700\u6d41\u884c\u7684 ORM \u5de5\u5177\u4e4b\u4e00\u3002 \u5f00\u59cb\u524d\u51c6\u5907 \u76f8\u5173\u8f6f\u4ef6\u7684\u7b80\u5355\u4ecb\u7ecd\uff1a SQLAlchemy\uff1aSQLAlchemy \u662f\u4e00\u4e2a Python \u5e93\uff0c\u53ef\u4ee5\u4fc3\u8fdb Python \u7a0b\u5e8f\u548c\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u5927\u591a\u6570\u65f6\u5019\uff0c\u8fd9\u4e2a\u5e93\u7528\u4f5c\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668 (ORM) \u5de5\u5177\uff0c\u5c06 Python \u7c7b\u8f6c\u6362\u4e3a\u5173\u7cfb\u6570\u636e\u5e93\u4e0a\u7684\u8868\uff0c\u5e76\u81ea\u52a8\u5c06\u51fd\u6570\u8c03\u7528\u8f6c\u6362\u4e3a SQL \u8bed\u53e5\u3002 Faker\uff1aFaker \u662f\u4e00\u4e2a\u751f\u6210\u5047\u6570\u636e\u7684 Python \u5e93\u3002\u865a\u5047\u6570\u636e\u901a\u5e38\u7528\u4e8e\u6d4b\u8bd5\u6216\u7528\u4e00\u4e9b\u865a\u62df\u6570\u636e\u586b\u5145\u6570\u636e\u5e93\u3002 \u73af\u5883\u914d\u7f6e \u5728\u4f60\u5f00\u59cb\u4e4b\u524d\uff0c\u786e\u8ba4\u4f60\u5df2\u7ecf\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e86\u5982\u4e0b\u8f6f\u4ef6\uff1a \u521b\u5efa\u5b9e\u4f8b \u3002 \u901a\u8fc7 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne \u5e76\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a test \u7684\u6570\u636e\u5e93\uff1a mysql> create database test; \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 Python 3.8(or plus) version \u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u68c0\u67e5 Python \u7248\u672c\u786e\u8ba4\u5b89\u88c5\u6210\u529f\uff1a ``` #To check with Python installation and its version python3 -V ``` \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 MySQL\u3002 \u4e0b\u8f7d\u5b89\u88c5 sqlalchemy \u3001 pymysql \u3001 cryptography \u548c faker \u5de5\u5177\u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u4e0b\u8f7d\u5b89\u88c5 sqlalchemy \u3001 pymysql \u3001 cryptography \u548c faker \u5de5\u5177\uff1a ``` pip3 install sqlalchemy pip3 install pymysql pip3 install cryptography pip3 install faker #If you are in China mainland and have a low downloading speed, you can speed up the download by following commands. pip3 install sqlalchemy -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install cryptography -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install faker -i https://pypi.tuna.tsinghua.edu.cn/simple ``` \u4f60\u53ef\u4ee5\u53c2\u8003 Python \u8fde\u63a5 MatrixOne \u670d\u52a1 \u4e86\u89e3\u5982\u4f55\u901a\u8fc7 SQLAlchemy \u8fde\u63a5\u5230 MatrixOne\uff0c\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664)\u3002 \u65b0\u5efa\u8868 \u4f5c\u4e3a\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668\uff08ORM\uff09\u5de5\u5177\uff0cSQLAlchemy \u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u521b\u5efa Python \u7c7b\u6765\u6620\u5c04\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u7684\u8868\u3002 \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a Customer \u7c7b\uff0c\u5b83\u5b9a\u4e49\u7684 Customer \u7684\u4ee3\u7801\u76f8\u5f53\u4e8e\u4e00\u6761 SQL \u8bed\u53e5\uff0c\u5b83\u8868\u793a MatrixOne \u4e2d\u7684\u547d\u540d\u4e3a Customer \u7684\u8868\uff1a CREATE TABLE `User` ( `id` INT NOT NULL AUTO_INCREMENT, `cname` VARCHAR(64) DEFAULT NULL, `caddress` VARCHAR(512) DEFAULT NULL, PRIMARY KEY (`id`) ) \u65b0\u5efa\u4e00\u4e2a sqlalchemy_create.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a from faker import Factory from sqlalchemy import create_engine, Column, Integer, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker faker = Factory.create() engine = create_engine('mysql+pymysql://root:111@127.0.0.1:6001/test') Session = sessionmaker(bind=engine) session = Session() Base = declarative_base() class Customer(Base): __tablename__ = \"Customer\" id = Column(Integer, primary_key=True,autoincrement=True) cname = Column(String(64)) caddress = Column(String(512)) def __init__(self,name,address): self.cname = name self.caddress = address def __str__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress def __repr__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress # Generate 10 Customer records Customers = [Customer(name= faker.name(),address = faker.address()) for i in range(10)] # Create the table Base.metadata.create_all(engine) # Insert all customer records to Customer table session.add_all(Customers) session.commit() \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 python \u6587\u4ef6\uff1a > python3 sqlalchemy_create.py \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u521b\u5efa\u6210\u529f\uff1a mysql> show tables; +----------------+ | tables_in_test | +----------------+ | Customer | +----------------+ 1 row in set (0.04 sec) mysql> select * from `Customer`; +------+------------------+-----------------------------------------------------+ | id | cname | caddress | +------+------------------+-----------------------------------------------------+ | 1 | Wendy Luna | 002 Brian Plaza Andrewhaven, SC 88456 | | 2 | Meagan Rodriguez | USCGC Olson FPO AP 21249 | | 3 | Angela Ramos | 029 Todd Curve Apt. 352 Mooreville, FM 15950 | | 4 | Lisa Bruce | 68103 Mackenzie Mountain North Andrew, UT 29853 | | 5 | Julie Moore | Unit 1117 Box 1029 DPO AP 87468 | | 6 | David Massey | 207 Wayne Groves Apt. 733 Vanessashire, NE 34549 | | 7 | David Mccann | 97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 | | 8 | Morgan Price | 57463 Lisa Drive Thompsonshire, NM 88077 | | 9 | Samuel Griffin | 186 Patel Crossing North Stefaniechester, WV 08221 | | 10 | Tristan Pierce | 593 Blankenship Rapids New Jameshaven, SD 89585 | +------+------------------+-----------------------------------------------------+ 10 rows in set (0.03 sec) \u8bfb\u53d6\u6570\u636e \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5c06\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u4ece Customer \u8868\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 \u7b2c\u4e00\u79cd\u65b9\u5f0f\u662f\u5168\u8868\u626b\u63cf\uff1a select * from `Customer` \u7b2c\u4e8c\u79cd\u65b9\u5f0f\u662f\u70b9\u67e5\u8be2\uff1a select * from `Customer` where `cname` = 'David Mccann'; \u65b0\u5efa\u4e00\u4e2a sqlalchemy_read.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a from sqlalchemy import create_engine, Column, Integer, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker engine = create_engine('mysql+pymysql://root:111@127.0.0.1:6001/test') Session = sessionmaker(bind=engine) session = Session() Base = declarative_base() class Customer(Base): __tablename__ = \"Customer\" id = Column(Integer, primary_key=True,autoincrement=True) cname = Column(String(64)) caddress = Column(String(512)) def __init__(self,name,address): self.cname = name self.caddress = address def __str__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress def __repr__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress # query all data customers = session.query(Customer).all() for customer in customers: print(customer.__str__() +\"\\n--------------------------\\n\") # query with a filter condition Mccann = session.query(Customer).filter_by(cname='David Mccann').first() print(Mccann) print(\"\\n------------------------\\n\") \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 python \u6587\u4ef6\u5e76\u67e5\u770b\u7ed3\u679c\uff1a > python3 sqlalchemy_read.py cname:Wendy Luna caddress:002 Brian Plaza Andrewhaven, SC 88456 -------------------------- cname:Meagan Rodriguez caddress:USCGC Olson FPO AP 21249 -------------------------- cname:Angela Ramos caddress:029 Todd Curve Apt. 352 Mooreville, FM 15950 -------------------------- cname:Lisa Bruce caddress:68103 Mackenzie Mountain North Andrew, UT 29853 -------------------------- cname:Julie Moore caddress:Unit 1117 Box 1029 DPO AP 87468 -------------------------- cname:David Massey caddress:207 Wayne Groves Apt. 733 Vanessashire, NE 34549 -------------------------- cname:David Mccann caddress:97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 -------------------------- cname:Morgan Price caddress:57463 Lisa Drive Thompsonshire, NM 88077 -------------------------- cname:Samuel Griffin caddress:186 Patel Crossing North Stefaniechester, WV 08221 -------------------------- cname:Tristan Pierce caddress:593 Blankenship Rapids New Jameshaven, SD 89585 -------------------------- cname:David Mccann caddress:97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 ------------------------ \u66f4\u65b0\u6570\u636e \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u66f4\u65b0 Customer \u8868\u7684\u7b2c\u4e00\u4e2a cname \u5217\u4e3a\u53e6\u4e00\u4e2a\u503c\u3002 \u65b0\u5efa\u4e00\u4e2a sqlalchemy_update.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a from sqlalchemy import create_engine, Column, Integer, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker engine = create_engine('mysql+pymysql://root:111@127.0.0.1:6001/test') Session = sessionmaker(bind=engine) session = Session() Base = declarative_base() class Customer(Base): __tablename__ = \"Customer\" id = Column(Integer, primary_key=True,autoincrement=True) cname = Column(String(64)) caddress = Column(String(512)) def __init__(self,name,address): self.cname = name self.caddress = address def __str__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress def __repr__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress customer = session.query(Customer).first() print(customer) print(\"\\n---------------------\\n\") # Rename customer customer.cname = \"Coby White\" session.commit() # See the updated result customer = session.query(Customer).first() print(customer) \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 python \u6587\u4ef6\u5e76\u67e5\u770b\u7ed3\u679c\uff1a > python3 sqlalchemy_update.py cname:Wendy Luna caddress:002 Brian Plaza Andrewhaven, SC 88456 --------------------- cname:Coby White caddress:002 Brian Plaza Andrewhaven, SC 88456 \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u66f4\u65b0\u6210\u529f\uff1a mysql> select * from `Customer`; +------+------------------+-----------------------------------------------------+ | id | cname | caddress | +------+------------------+-----------------------------------------------------+ | 1 | Coby White | 002 Brian Plaza Andrewhaven, SC 88456 | | 2 | Meagan Rodriguez | USCGC Olson FPO AP 21249 | | 3 | Angela Ramos | 029 Todd Curve Apt. 352 Mooreville, FM 15950 | | 4 | Lisa Bruce | 68103 Mackenzie Mountain North Andrew, UT 29853 | | 5 | Julie Moore | Unit 1117 Box 1029 DPO AP 87468 | | 6 | David Massey | 207 Wayne Groves Apt. 733 Vanessashire, NE 34549 | | 7 | David Mccann | 97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 | | 8 | Morgan Price | 57463 Lisa Drive Thompsonshire, NM 88077 | | 9 | Samuel Griffin | 186 Patel Crossing North Stefaniechester, WV 08221 | | 10 | Tristan Pierce | 593 Blankenship Rapids New Jameshaven, SD 89585 | +------+------------------+-----------------------------------------------------+ 10 rows in set (0.02 sec) \u5220\u9664\u6570\u636e \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u5220\u9664 Customer \u8868\u7684\u7b2c\u4e00\u6761\u6570\u636e\u3002 \u65b0\u5efa\u4e00\u4e2a sqlalchemy_detele.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a from sqlalchemy import create_engine, Column, Integer, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker engine = create_engine('mysql+pymysql://root:111@127.0.0.1:6001/test') Session = sessionmaker(bind=engine) session = Session() Base = declarative_base() class Customer(Base): __tablename__ = \"Customer\" id = Column(Integer, primary_key=True,autoincrement=True) cname = Column(String(64)) caddress = Column(String(512)) def __init__(self,name,address): self.cname = name self.caddress = address def __str__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress def __repr__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress # delete the first record customer = session.query(Customer).first() session.delete(customer) session.commit() # query all data customers = session.query(Customer).all() for customer in customers: print(customer.__str__() +\"\\n--------------------------\\n\") \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 python \u6587\u4ef6\u5e76\u67e5\u770b\u7ed3\u679c\uff1a > python3 sqlalchemy_delete.py cname:Meagan Rodriguez caddress:USCGC Olson FPO AP 21249 -------------------------- cname:Angela Ramos caddress:029 Todd Curve Apt. 352 Mooreville, FM 15950 -------------------------- cname:Lisa Bruce caddress:68103 Mackenzie Mountain North Andrew, UT 29853 -------------------------- cname:Julie Moore caddress:Unit 1117 Box 1029 DPO AP 87468 -------------------------- cname:David Massey caddress:207 Wayne Groves Apt. 733 Vanessashire, NE 34549 -------------------------- cname:David Mccann caddress:97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 -------------------------- cname:Morgan Price caddress:57463 Lisa Drive Thompsonshire, NM 88077 -------------------------- cname:Samuel Griffin caddress:186 Patel Crossing North Stefaniechester, WV 08221 -------------------------- cname:Tristan Pierce caddress:593 Blankenship Rapids New Jameshaven, SD 89585 -------------------------- \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u4e2d\u7684\u8bb0\u5f55\u662f\u5426\u5220\u9664\u6210\u529f\uff1a mysql> select * from `Customer`; +------+------------------+-----------------------------------------------------+ | id | cname | caddress | +------+------------------+-----------------------------------------------------+ | 2 | Meagan Rodriguez | USCGC Olson FPO AP 21249 | | 3 | Angela Ramos | 029 Todd Curve Apt. 352 Mooreville, FM 15950 | | 4 | Lisa Bruce | 68103 Mackenzie Mountain North Andrew, UT 29853 | | 5 | Julie Moore | Unit 1117 Box 1029 DPO AP 87468 | | 6 | David Massey | 207 Wayne Groves Apt. 733 Vanessashire, NE 34549 | | 7 | David Mccann | 97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 | | 8 | Morgan Price | 57463 Lisa Drive Thompsonshire, NM 88077 | | 9 | Samuel Griffin | 186 Patel Crossing North Stefaniechester, WV 08221 | | 10 | Tristan Pierce | 593 Blankenship Rapids New Jameshaven, SD 89585 | +------+------------------+-----------------------------------------------------+ 9 rows in set (0.04 sec)","title":"SQLAlchemy \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/sqlalchemy-python-crud-demo/#sqlalchemy","text":"\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u4f7f\u7528 Python \u548c SQLAlchemy \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u529f\u80fd\u3002 SQLAlchemy \u662f Python \u8bed\u8a00\u4e2d\u6700\u6d41\u884c\u7684 ORM \u5de5\u5177\u4e4b\u4e00\u3002","title":"SQLAlchemy \u57fa\u7840\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/sqlalchemy-python-crud-demo/#_1","text":"\u76f8\u5173\u8f6f\u4ef6\u7684\u7b80\u5355\u4ecb\u7ecd\uff1a SQLAlchemy\uff1aSQLAlchemy \u662f\u4e00\u4e2a Python \u5e93\uff0c\u53ef\u4ee5\u4fc3\u8fdb Python \u7a0b\u5e8f\u548c\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u5927\u591a\u6570\u65f6\u5019\uff0c\u8fd9\u4e2a\u5e93\u7528\u4f5c\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668 (ORM) \u5de5\u5177\uff0c\u5c06 Python \u7c7b\u8f6c\u6362\u4e3a\u5173\u7cfb\u6570\u636e\u5e93\u4e0a\u7684\u8868\uff0c\u5e76\u81ea\u52a8\u5c06\u51fd\u6570\u8c03\u7528\u8f6c\u6362\u4e3a SQL \u8bed\u53e5\u3002 Faker\uff1aFaker \u662f\u4e00\u4e2a\u751f\u6210\u5047\u6570\u636e\u7684 Python \u5e93\u3002\u865a\u5047\u6570\u636e\u901a\u5e38\u7528\u4e8e\u6d4b\u8bd5\u6216\u7528\u4e00\u4e9b\u865a\u62df\u6570\u636e\u586b\u5145\u6570\u636e\u5e93\u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/sqlalchemy-python-crud-demo/#_2","text":"\u5728\u4f60\u5f00\u59cb\u4e4b\u524d\uff0c\u786e\u8ba4\u4f60\u5df2\u7ecf\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e86\u5982\u4e0b\u8f6f\u4ef6\uff1a \u521b\u5efa\u5b9e\u4f8b \u3002 \u901a\u8fc7 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne \u5e76\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a test \u7684\u6570\u636e\u5e93\uff1a mysql> create database test; \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 Python 3.8(or plus) version \u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u68c0\u67e5 Python \u7248\u672c\u786e\u8ba4\u5b89\u88c5\u6210\u529f\uff1a ``` #To check with Python installation and its version python3 -V ``` \u786e\u8ba4\u4f60\u5df2\u5b8c\u6210\u5b89\u88c5 MySQL\u3002 \u4e0b\u8f7d\u5b89\u88c5 sqlalchemy \u3001 pymysql \u3001 cryptography \u548c faker \u5de5\u5177\u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u4e0b\u8f7d\u5b89\u88c5 sqlalchemy \u3001 pymysql \u3001 cryptography \u548c faker \u5de5\u5177\uff1a ``` pip3 install sqlalchemy pip3 install pymysql pip3 install cryptography pip3 install faker #If you are in China mainland and have a low downloading speed, you can speed up the download by following commands. pip3 install sqlalchemy -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install cryptography -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install faker -i https://pypi.tuna.tsinghua.edu.cn/simple ``` \u4f60\u53ef\u4ee5\u53c2\u8003 Python \u8fde\u63a5 MatrixOne \u670d\u52a1 \u4e86\u89e3\u5982\u4f55\u901a\u8fc7 SQLAlchemy \u8fde\u63a5\u5230 MatrixOne\uff0c\u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u5982\u4f55\u5b9e\u73b0 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664)\u3002","title":"\u73af\u5883\u914d\u7f6e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/sqlalchemy-python-crud-demo/#_3","text":"\u4f5c\u4e3a\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668\uff08ORM\uff09\u5de5\u5177\uff0cSQLAlchemy \u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u521b\u5efa Python \u7c7b\u6765\u6620\u5c04\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u7684\u8868\u3002 \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a Customer \u7c7b\uff0c\u5b83\u5b9a\u4e49\u7684 Customer \u7684\u4ee3\u7801\u76f8\u5f53\u4e8e\u4e00\u6761 SQL \u8bed\u53e5\uff0c\u5b83\u8868\u793a MatrixOne \u4e2d\u7684\u547d\u540d\u4e3a Customer \u7684\u8868\uff1a CREATE TABLE `User` ( `id` INT NOT NULL AUTO_INCREMENT, `cname` VARCHAR(64) DEFAULT NULL, `caddress` VARCHAR(512) DEFAULT NULL, PRIMARY KEY (`id`) ) \u65b0\u5efa\u4e00\u4e2a sqlalchemy_create.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a from faker import Factory from sqlalchemy import create_engine, Column, Integer, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker faker = Factory.create() engine = create_engine('mysql+pymysql://root:111@127.0.0.1:6001/test') Session = sessionmaker(bind=engine) session = Session() Base = declarative_base() class Customer(Base): __tablename__ = \"Customer\" id = Column(Integer, primary_key=True,autoincrement=True) cname = Column(String(64)) caddress = Column(String(512)) def __init__(self,name,address): self.cname = name self.caddress = address def __str__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress def __repr__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress # Generate 10 Customer records Customers = [Customer(name= faker.name(),address = faker.address()) for i in range(10)] # Create the table Base.metadata.create_all(engine) # Insert all customer records to Customer table session.add_all(Customers) session.commit() \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 python \u6587\u4ef6\uff1a > python3 sqlalchemy_create.py \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u521b\u5efa\u6210\u529f\uff1a mysql> show tables; +----------------+ | tables_in_test | +----------------+ | Customer | +----------------+ 1 row in set (0.04 sec) mysql> select * from `Customer`; +------+------------------+-----------------------------------------------------+ | id | cname | caddress | +------+------------------+-----------------------------------------------------+ | 1 | Wendy Luna | 002 Brian Plaza Andrewhaven, SC 88456 | | 2 | Meagan Rodriguez | USCGC Olson FPO AP 21249 | | 3 | Angela Ramos | 029 Todd Curve Apt. 352 Mooreville, FM 15950 | | 4 | Lisa Bruce | 68103 Mackenzie Mountain North Andrew, UT 29853 | | 5 | Julie Moore | Unit 1117 Box 1029 DPO AP 87468 | | 6 | David Massey | 207 Wayne Groves Apt. 733 Vanessashire, NE 34549 | | 7 | David Mccann | 97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 | | 8 | Morgan Price | 57463 Lisa Drive Thompsonshire, NM 88077 | | 9 | Samuel Griffin | 186 Patel Crossing North Stefaniechester, WV 08221 | | 10 | Tristan Pierce | 593 Blankenship Rapids New Jameshaven, SD 89585 | +------+------------------+-----------------------------------------------------+ 10 rows in set (0.03 sec)","title":"\u65b0\u5efa\u8868"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/sqlalchemy-python-crud-demo/#_4","text":"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5c06\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u4ece Customer \u8868\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 \u7b2c\u4e00\u79cd\u65b9\u5f0f\u662f\u5168\u8868\u626b\u63cf\uff1a select * from `Customer` \u7b2c\u4e8c\u79cd\u65b9\u5f0f\u662f\u70b9\u67e5\u8be2\uff1a select * from `Customer` where `cname` = 'David Mccann'; \u65b0\u5efa\u4e00\u4e2a sqlalchemy_read.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a from sqlalchemy import create_engine, Column, Integer, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker engine = create_engine('mysql+pymysql://root:111@127.0.0.1:6001/test') Session = sessionmaker(bind=engine) session = Session() Base = declarative_base() class Customer(Base): __tablename__ = \"Customer\" id = Column(Integer, primary_key=True,autoincrement=True) cname = Column(String(64)) caddress = Column(String(512)) def __init__(self,name,address): self.cname = name self.caddress = address def __str__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress def __repr__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress # query all data customers = session.query(Customer).all() for customer in customers: print(customer.__str__() +\"\\n--------------------------\\n\") # query with a filter condition Mccann = session.query(Customer).filter_by(cname='David Mccann').first() print(Mccann) print(\"\\n------------------------\\n\") \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 python \u6587\u4ef6\u5e76\u67e5\u770b\u7ed3\u679c\uff1a > python3 sqlalchemy_read.py cname:Wendy Luna caddress:002 Brian Plaza Andrewhaven, SC 88456 -------------------------- cname:Meagan Rodriguez caddress:USCGC Olson FPO AP 21249 -------------------------- cname:Angela Ramos caddress:029 Todd Curve Apt. 352 Mooreville, FM 15950 -------------------------- cname:Lisa Bruce caddress:68103 Mackenzie Mountain North Andrew, UT 29853 -------------------------- cname:Julie Moore caddress:Unit 1117 Box 1029 DPO AP 87468 -------------------------- cname:David Massey caddress:207 Wayne Groves Apt. 733 Vanessashire, NE 34549 -------------------------- cname:David Mccann caddress:97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 -------------------------- cname:Morgan Price caddress:57463 Lisa Drive Thompsonshire, NM 88077 -------------------------- cname:Samuel Griffin caddress:186 Patel Crossing North Stefaniechester, WV 08221 -------------------------- cname:Tristan Pierce caddress:593 Blankenship Rapids New Jameshaven, SD 89585 -------------------------- cname:David Mccann caddress:97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 ------------------------","title":"\u8bfb\u53d6\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/sqlalchemy-python-crud-demo/#_5","text":"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u66f4\u65b0 Customer \u8868\u7684\u7b2c\u4e00\u4e2a cname \u5217\u4e3a\u53e6\u4e00\u4e2a\u503c\u3002 \u65b0\u5efa\u4e00\u4e2a sqlalchemy_update.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a from sqlalchemy import create_engine, Column, Integer, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker engine = create_engine('mysql+pymysql://root:111@127.0.0.1:6001/test') Session = sessionmaker(bind=engine) session = Session() Base = declarative_base() class Customer(Base): __tablename__ = \"Customer\" id = Column(Integer, primary_key=True,autoincrement=True) cname = Column(String(64)) caddress = Column(String(512)) def __init__(self,name,address): self.cname = name self.caddress = address def __str__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress def __repr__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress customer = session.query(Customer).first() print(customer) print(\"\\n---------------------\\n\") # Rename customer customer.cname = \"Coby White\" session.commit() # See the updated result customer = session.query(Customer).first() print(customer) \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 python \u6587\u4ef6\u5e76\u67e5\u770b\u7ed3\u679c\uff1a > python3 sqlalchemy_update.py cname:Wendy Luna caddress:002 Brian Plaza Andrewhaven, SC 88456 --------------------- cname:Coby White caddress:002 Brian Plaza Andrewhaven, SC 88456 \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u662f\u5426\u66f4\u65b0\u6210\u529f\uff1a mysql> select * from `Customer`; +------+------------------+-----------------------------------------------------+ | id | cname | caddress | +------+------------------+-----------------------------------------------------+ | 1 | Coby White | 002 Brian Plaza Andrewhaven, SC 88456 | | 2 | Meagan Rodriguez | USCGC Olson FPO AP 21249 | | 3 | Angela Ramos | 029 Todd Curve Apt. 352 Mooreville, FM 15950 | | 4 | Lisa Bruce | 68103 Mackenzie Mountain North Andrew, UT 29853 | | 5 | Julie Moore | Unit 1117 Box 1029 DPO AP 87468 | | 6 | David Massey | 207 Wayne Groves Apt. 733 Vanessashire, NE 34549 | | 7 | David Mccann | 97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 | | 8 | Morgan Price | 57463 Lisa Drive Thompsonshire, NM 88077 | | 9 | Samuel Griffin | 186 Patel Crossing North Stefaniechester, WV 08221 | | 10 | Tristan Pierce | 593 Blankenship Rapids New Jameshaven, SD 89585 | +------+------------------+-----------------------------------------------------+ 10 rows in set (0.02 sec)","title":"\u66f4\u65b0\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/Tutorial/sqlalchemy-python-crud-demo/#_6","text":"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5c06\u6307\u5bfc\u4f60\u5220\u9664 Customer \u8868\u7684\u7b2c\u4e00\u6761\u6570\u636e\u3002 \u65b0\u5efa\u4e00\u4e2a sqlalchemy_detele.py \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u62f7\u8d1d\u7c98\u8d34\u5230\u6587\u4ef6\u5185\uff1a from sqlalchemy import create_engine, Column, Integer, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker engine = create_engine('mysql+pymysql://root:111@127.0.0.1:6001/test') Session = sessionmaker(bind=engine) session = Session() Base = declarative_base() class Customer(Base): __tablename__ = \"Customer\" id = Column(Integer, primary_key=True,autoincrement=True) cname = Column(String(64)) caddress = Column(String(512)) def __init__(self,name,address): self.cname = name self.caddress = address def __str__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress def __repr__(self): return \"cname:\"+self.cname +\" caddress:\"+self.caddress # delete the first record customer = session.query(Customer).first() session.delete(customer) session.commit() # query all data customers = session.query(Customer).all() for customer in customers: print(customer.__str__() +\"\\n--------------------------\\n\") \u6253\u5f00\u7ec8\u7aef\uff0c\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u6b64 python \u6587\u4ef6\u5e76\u67e5\u770b\u7ed3\u679c\uff1a > python3 sqlalchemy_delete.py cname:Meagan Rodriguez caddress:USCGC Olson FPO AP 21249 -------------------------- cname:Angela Ramos caddress:029 Todd Curve Apt. 352 Mooreville, FM 15950 -------------------------- cname:Lisa Bruce caddress:68103 Mackenzie Mountain North Andrew, UT 29853 -------------------------- cname:Julie Moore caddress:Unit 1117 Box 1029 DPO AP 87468 -------------------------- cname:David Massey caddress:207 Wayne Groves Apt. 733 Vanessashire, NE 34549 -------------------------- cname:David Mccann caddress:97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 -------------------------- cname:Morgan Price caddress:57463 Lisa Drive Thompsonshire, NM 88077 -------------------------- cname:Samuel Griffin caddress:186 Patel Crossing North Stefaniechester, WV 08221 -------------------------- cname:Tristan Pierce caddress:593 Blankenship Rapids New Jameshaven, SD 89585 -------------------------- \u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u9a8c\u8bc1\u8868\u4e2d\u7684\u8bb0\u5f55\u662f\u5426\u5220\u9664\u6210\u529f\uff1a mysql> select * from `Customer`; +------+------------------+-----------------------------------------------------+ | id | cname | caddress | +------+------------------+-----------------------------------------------------+ | 2 | Meagan Rodriguez | USCGC Olson FPO AP 21249 | | 3 | Angela Ramos | 029 Todd Curve Apt. 352 Mooreville, FM 15950 | | 4 | Lisa Bruce | 68103 Mackenzie Mountain North Andrew, UT 29853 | | 5 | Julie Moore | Unit 1117 Box 1029 DPO AP 87468 | | 6 | David Massey | 207 Wayne Groves Apt. 733 Vanessashire, NE 34549 | | 7 | David Mccann | 97274 Sanders Tunnel Apt. 480 Anthonyberg, DC 06558 | | 8 | Morgan Price | 57463 Lisa Drive Thompsonshire, NM 88077 | | 9 | Samuel Griffin | 186 Patel Crossing North Stefaniechester, WV 08221 | | 10 | Tristan Pierce | 593 Blankenship Rapids New Jameshaven, SD 89585 | +------+------------------+-----------------------------------------------------+ 9 rows in set (0.04 sec)","title":"\u5220\u9664\u6570\u636e"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/connect-mo-with-web/","text":"\u4f7f\u7528 Web \u9875\u9762\u8fde\u63a5 MatrixOne \u5b9e\u4f8b MatrixOne Cloud \u652f\u6301\u4f7f\u7528 Web \u9875\u9762\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u6211\u4eec\u5c06\u6b64\u8bbf\u95ee\u5e73\u53f0\u79f0\u4e3a\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u3002\u8fd9\u4e2a\u5e73\u53f0\u7279\u522b\u9002\u5408\u6570\u636e\u5e93\u7ba1\u7406\u5458\u548c\u6570\u636e\u5206\u6790\u5e08\u4f7f\u7528\uff0c\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u53ef\u89c6\u5316\u6570\u636e\u5e93\u64cd\u4f5c\u529f\u80fd\uff0c\u5305\u62ec\u6570\u636e\u4e1a\u52a1\u76d1\u63a7\u3001\u6570\u636e\u5bf9\u8c61\u67e5\u770b\u4e0e\u64cd\u4f5c\u3001\u67e5\u8be2\u5386\u53f2\u8bb0\u5f55\u3001\u67e5\u8be2\u7f16\u8f91\u5668\u7b49\u3002 \u8bbf\u95ee\u5165\u53e3 \u5728 MatrixOne Cloud \u5b9e\u4f8b\u7ba1\u7406\u5e73\u53f0\u7684\u5b9e\u4f8b\u5217\u8868\u4e2d\uff0c\u627e\u5230\u60a8\u9700\u8981\u8bbf\u95ee\u7684\u6570\u636e\u5e93\u5b9e\u4f8b\u5361\u7247\uff0c\u7136\u540e\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u5165\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\uff1a \u767b\u5f55\u60a8\u7684 MO Cloud \u8d26\u53f7\uff0c\u8fdb\u5165\u5b9e\u4f8b\u7ba1\u7406\u5e73\u53f0\u3002 \u5982\u679c\u60a8\u8fd8\u6ca1\u6709 MO Cloud \u8d26\u53f7\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb \u6ce8\u518c\u767b\u5f55 \u5f00\u59cb\u6ce8\u518c\uff0c\u6216\u8005\u53c2\u7167 \u5feb\u901f\u4f53\u9a8c MatrixOne Cloud \u7684\u6ce8\u518c\u6307\u5357\u3002 \u5728\u83dc\u5355\u680f\u4e2d\u70b9\u51fb Instances \u8fdb\u5165\u5b9e\u4f8b\u5217\u8868\u9875\u9762\uff0c\u7136\u540e\u9009\u62e9\u5b9e\u4f8b\u3002 \u70b9\u51fb Connect \u3002 \u9009\u62e9 Connect to Platform \u3002 \u8fd9\u5c06\u8fdb\u5165\u8be5\u5b9e\u4f8b\u7684\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u767b\u5f55\u9875\u9762\uff0c\u60a8\u9700\u8981\u8f93\u5165\u6570\u636e\u5e93\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u624d\u80fd\u6210\u529f\u767b\u5f55\u3002 \u8bbf\u95ee\u6570\u636e\u5e93 \u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u63d0\u4f9b\u4e86\u591a\u79cd\u6570\u636e\u5e93\u8bbf\u95ee\u529f\u80fd\uff1a Dashboard\uff08\u4eea\u8868\u76d8\uff09\uff1a \u5728\u83dc\u5355\u680f\u4e2d\u70b9\u51fb Dashboard \uff0c\u53ef\u4ee5\u67e5\u770b\u6570\u636e\u5e93\u7684\u4e1a\u52a1\u76d1\u63a7\u4fe1\u606f\u3002\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 \u6570\u636e\u76d1\u63a7\u6587\u6863 \u3002 Database\uff08\u6570\u636e\u5e93\uff09\uff1a \u5728\u83dc\u5355\u680f\u4e2d\u70b9\u51fb Database \uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u548c\u64cd\u4f5c\u6570\u636e\u5bf9\u8c61\u3002\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 \u76f8\u5173\u6587\u6863 \u3002 Query -> SQL Editor\uff08\u67e5\u8be2 -> SQL \u7f16\u8f91\u5668\uff09\uff1a \u5728\u83dc\u5355\u680f\u4e2d\u4f9d\u6b21\u70b9\u51fb Query -> SQL Editor \uff0c\u53ef\u4ee5\u8fdb\u884c SQL \u7684\u7f16\u8f91\u548c\u6267\u884c\u3002\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 SQL \u7f16\u8f91\u5668\u6587\u6863 \u3002 Query -> Queries History\uff08\u67e5\u8be2 -> \u67e5\u8be2\u5386\u53f2\uff09\uff1a \u5728\u83dc\u5355\u680f\u4e2d\u4f9d\u6b21\u70b9\u51fb Query -> Queries History \uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u5386\u53f2 SQL \u67e5\u8be2\u7684\u6267\u884c\u72b6\u6001\u3002\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 \u67e5\u8be2\u5206\u6790\u6587\u6863 \u3002 \u5e0c\u671b\u8fd9\u4e9b\u64cd\u4f5c\u6307\u5357\u80fd\u591f\u5e2e\u52a9\u60a8\u987a\u5229\u4f7f\u7528 MatrixOne \u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u3002\u5982\u679c\u60a8\u6709\u4efb\u4f55\u7591\u95ee\u6216\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u5e2e\u52a9\uff0c\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u6587\u6863\u6216\u8054\u7cfb\u652f\u6301\u56e2\u961f\u3002","title":"\u4f7f\u7528 Web \u9875\u9762\u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/connect-mo-with-web/#web-matrixone","text":"MatrixOne Cloud \u652f\u6301\u4f7f\u7528 Web \u9875\u9762\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u6211\u4eec\u5c06\u6b64\u8bbf\u95ee\u5e73\u53f0\u79f0\u4e3a\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u3002\u8fd9\u4e2a\u5e73\u53f0\u7279\u522b\u9002\u5408\u6570\u636e\u5e93\u7ba1\u7406\u5458\u548c\u6570\u636e\u5206\u6790\u5e08\u4f7f\u7528\uff0c\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u53ef\u89c6\u5316\u6570\u636e\u5e93\u64cd\u4f5c\u529f\u80fd\uff0c\u5305\u62ec\u6570\u636e\u4e1a\u52a1\u76d1\u63a7\u3001\u6570\u636e\u5bf9\u8c61\u67e5\u770b\u4e0e\u64cd\u4f5c\u3001\u67e5\u8be2\u5386\u53f2\u8bb0\u5f55\u3001\u67e5\u8be2\u7f16\u8f91\u5668\u7b49\u3002","title":"\u4f7f\u7528 Web \u9875\u9762\u8fde\u63a5 MatrixOne \u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/connect-mo-with-web/#_1","text":"\u5728 MatrixOne Cloud \u5b9e\u4f8b\u7ba1\u7406\u5e73\u53f0\u7684\u5b9e\u4f8b\u5217\u8868\u4e2d\uff0c\u627e\u5230\u60a8\u9700\u8981\u8bbf\u95ee\u7684\u6570\u636e\u5e93\u5b9e\u4f8b\u5361\u7247\uff0c\u7136\u540e\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u5165\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\uff1a \u767b\u5f55\u60a8\u7684 MO Cloud \u8d26\u53f7\uff0c\u8fdb\u5165\u5b9e\u4f8b\u7ba1\u7406\u5e73\u53f0\u3002 \u5982\u679c\u60a8\u8fd8\u6ca1\u6709 MO Cloud \u8d26\u53f7\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb \u6ce8\u518c\u767b\u5f55 \u5f00\u59cb\u6ce8\u518c\uff0c\u6216\u8005\u53c2\u7167 \u5feb\u901f\u4f53\u9a8c MatrixOne Cloud \u7684\u6ce8\u518c\u6307\u5357\u3002 \u5728\u83dc\u5355\u680f\u4e2d\u70b9\u51fb Instances \u8fdb\u5165\u5b9e\u4f8b\u5217\u8868\u9875\u9762\uff0c\u7136\u540e\u9009\u62e9\u5b9e\u4f8b\u3002 \u70b9\u51fb Connect \u3002 \u9009\u62e9 Connect to Platform \u3002 \u8fd9\u5c06\u8fdb\u5165\u8be5\u5b9e\u4f8b\u7684\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u767b\u5f55\u9875\u9762\uff0c\u60a8\u9700\u8981\u8f93\u5165\u6570\u636e\u5e93\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u624d\u80fd\u6210\u529f\u767b\u5f55\u3002","title":"\u8bbf\u95ee\u5165\u53e3"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/connect-mo-with-web/#_2","text":"\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u63d0\u4f9b\u4e86\u591a\u79cd\u6570\u636e\u5e93\u8bbf\u95ee\u529f\u80fd\uff1a Dashboard\uff08\u4eea\u8868\u76d8\uff09\uff1a \u5728\u83dc\u5355\u680f\u4e2d\u70b9\u51fb Dashboard \uff0c\u53ef\u4ee5\u67e5\u770b\u6570\u636e\u5e93\u7684\u4e1a\u52a1\u76d1\u63a7\u4fe1\u606f\u3002\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 \u6570\u636e\u76d1\u63a7\u6587\u6863 \u3002 Database\uff08\u6570\u636e\u5e93\uff09\uff1a \u5728\u83dc\u5355\u680f\u4e2d\u70b9\u51fb Database \uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u548c\u64cd\u4f5c\u6570\u636e\u5bf9\u8c61\u3002\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 \u76f8\u5173\u6587\u6863 \u3002 Query -> SQL Editor\uff08\u67e5\u8be2 -> SQL \u7f16\u8f91\u5668\uff09\uff1a \u5728\u83dc\u5355\u680f\u4e2d\u4f9d\u6b21\u70b9\u51fb Query -> SQL Editor \uff0c\u53ef\u4ee5\u8fdb\u884c SQL \u7684\u7f16\u8f91\u548c\u6267\u884c\u3002\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 SQL \u7f16\u8f91\u5668\u6587\u6863 \u3002 Query -> Queries History\uff08\u67e5\u8be2 -> \u67e5\u8be2\u5386\u53f2\uff09\uff1a \u5728\u83dc\u5355\u680f\u4e2d\u4f9d\u6b21\u70b9\u51fb Query -> Queries History \uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u5386\u53f2 SQL \u67e5\u8be2\u7684\u6267\u884c\u72b6\u6001\u3002\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 \u67e5\u8be2\u5206\u6790\u6587\u6863 \u3002 \u5e0c\u671b\u8fd9\u4e9b\u64cd\u4f5c\u6307\u5357\u80fd\u591f\u5e2e\u52a9\u60a8\u987a\u5229\u4f7f\u7528 MatrixOne \u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u3002\u5982\u679c\u60a8\u6709\u4efb\u4f55\u7591\u95ee\u6216\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u5e2e\u52a9\uff0c\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u6587\u6863\u6216\u8054\u7cfb\u652f\u6301\u56e2\u961f\u3002","title":"\u8bbf\u95ee\u6570\u636e\u5e93"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/connect-to-matrixone-with-go/","text":"\u4f7f\u7528 Golang \u8fde\u63a5 MatrixOne \u652f\u6301 Golang \u8fde\u63a5\uff0c\u5e76\u4e14\u652f\u6301 Go-MySQL-Driver \u3002 \u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 Golang \u8fde\u63a5 MatrixOne\u3002 \u5f00\u59cb\u524d\u51c6\u5907 \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u5df2\u5b89\u88c5 Golang 1.18 \u7248\u672c\u53ca\u4ee5\u4e0a \uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5\uff0c\u53ef\u4ee5\u70b9\u51fb Golang 1.18 \u7248\u672c\u53ca\u4ee5\u4e0a \u81f3\u5b98\u65b9\u7f51\u7ad9\u8fdb\u884c\u4e0b\u8f7d\u5b89\u88c5\uff1b\u5982\u679c\u4f60\u5df2\u5b89\u88c5\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u884c\u68c0\u67e5\u7248\u672c\uff1a #\u68c0\u67e5 Golang \u7248\u672c\u53f7\uff0c\u786e\u8ba4\u662f\u5426\u5b89\u88c5 go version \u5df2\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef \uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5\uff0c\u53ef\u4ee5\u70b9\u51fb MySQL \u5ba2\u6237\u7aef \u81f3\u5b98\u65b9\u7f51\u7ad9\u8fdb\u884c\u4e0b\u8f7d\u5b89\u88c5\u3002 \u5df2\u5b89\u88c5 Git \u5de5\u5177\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5\uff0c\u53ef\u4ee5\u70b9\u51fb Git \u81f3\u5b98\u65b9\u7f51\u7ad9\u8fdb\u884c\u4e0b\u8f7d\u5b89\u88c5\u3002 \u4f7f\u7528 Golang \u8fde\u63a5 MatrixOne \u670d\u52a1 Go-MySQL-Driver \u662f\u4e00\u4e2a\u7528\u4e8e Go \u8bed\u8a00\u7684 MySQL \u9a71\u52a8\u7a0b\u5e8f\uff0c\u5b83\u5b9e\u73b0\u4e86 Go \u6807\u51c6\u5e93\u4e2d database/sql \u63a5\u53e3\u7684\u65b9\u6cd5\uff0c\u4f7f\u5f97 Go \u8bed\u8a00\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u8fde\u63a5\u548c\u64cd\u4f5c MySQL \u6570\u636e\u5e93\u3002 \u5b89\u88c5 Go-MySQL-Driver \u5de5\u5177\uff1a \u4f7f\u7528 Go Tool \u5c06 Go-MySQL-Driver \u5305\u5b89\u88c5\u5230\u4f60\u7684 $GOPATH \u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u884c\u5b89\u88c5 Go-MySQL-Driver \u5de5\u5177\uff1a > go get -u github.com/go-sql-driver/mysql \u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne\u3002\u65b0\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a test \u6570\u636e\u5e93\uff1a mysql > create database test ; \u521b\u5efa\u4e00\u4e2a\u7eaf\u6587\u672c\u6587\u4ef6 golang_connect_matrixone.go \u5e76\u5c06\u4ee3\u7801\u5199\u5165\u6587\u4ef6\uff1a package main import ( \"database/sql\" \"fmt\" _ \"github.com/go-sql-driver/mysql\" ) func main () { //\"username:password@[protocol](address:port)/database\" db , _ := sql . Open ( \"mysql\" , \"root:111@tcp(127.0.0.1:6001)/test\" ) // Set database connection defer db . Close () //Close DB err := db . Ping () //Connect to DB if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed return } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } } \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u5728\u7ec8\u7aef\u5185\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff1a > go run golang_connect_matrixone.go Database Connection Succeed \u4f7f\u7528 Gorm \u8fde\u63a5 MatrixOne \u670d\u52a1 gorm \u662f\u4e00\u4e2a\u57fa\u4e8e golang \u7684\u4e00\u4e2a\u795e\u5947\u7684\u5168\u529f\u80fd ORM \u5e93\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 gorm.io/gorm \u548c gorm.io/driver/mysql \u8fd9\u4e24\u4e2a\u5e93\u6765\u8ba9 Go \u8fde\u63a5\u5230 MYSQL \u6570\u636e\u5e93\u3002 \u5b89\u88c5 gorm.io/gorm \u548c gorm.io/driver/mysql \u5e93\uff0c\u4f7f\u7528 go get \u547d\u4ee4\u5b89\u88c5\uff1a go get -u gorm.io/gorm go get -u gorm.io/driver/mysql \u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne\u3002\u65b0\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a test \u6570\u636e\u5e93\uff1a mysql > create database test ; \u521b\u5efa\u4e00\u4e2a\u6587\u672c\u6587\u4ef6 golang_gorm_connect_matrixone.go \u5e76\u5c06\u4ee3\u7801\u5199\u5165\u6587\u4ef6\uff1a package main import ( \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"fmt\" ) func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config { }) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { getDBConn () } \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u5728\u7ec8\u7aef\u5185\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff1a > go run golang_gorm_connect_matrixone.go Database Connection Succeed \u53c2\u8003\u6587\u6863 \u5173\u4e8e\u4f7f\u7528 Golang \u901a\u8fc7 MatrixOne \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 CRUD \u7684\u793a\u4f8b\uff0c\u53c2\u89c1 Golang \u57fa\u7840\u793a\u4f8b \u3002 \u5173\u4e8e\u4f7f\u7528 Gorm \u901a\u8fc7 MatrixOne \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 CRUD \u7684\u793a\u4f8b\uff0c\u53c2\u89c1 Gorm \u57fa\u7840\u793a\u4f8b \u3002","title":"Golang \u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/connect-to-matrixone-with-go/#golang","text":"MatrixOne \u652f\u6301 Golang \u8fde\u63a5\uff0c\u5e76\u4e14\u652f\u6301 Go-MySQL-Driver \u3002 \u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 Golang \u8fde\u63a5 MatrixOne\u3002","title":"\u4f7f\u7528 Golang \u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/connect-to-matrixone-with-go/#_1","text":"\u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u5df2\u5b89\u88c5 Golang 1.18 \u7248\u672c\u53ca\u4ee5\u4e0a \uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5\uff0c\u53ef\u4ee5\u70b9\u51fb Golang 1.18 \u7248\u672c\u53ca\u4ee5\u4e0a \u81f3\u5b98\u65b9\u7f51\u7ad9\u8fdb\u884c\u4e0b\u8f7d\u5b89\u88c5\uff1b\u5982\u679c\u4f60\u5df2\u5b89\u88c5\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u884c\u68c0\u67e5\u7248\u672c\uff1a #\u68c0\u67e5 Golang \u7248\u672c\u53f7\uff0c\u786e\u8ba4\u662f\u5426\u5b89\u88c5 go version \u5df2\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef \uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5\uff0c\u53ef\u4ee5\u70b9\u51fb MySQL \u5ba2\u6237\u7aef \u81f3\u5b98\u65b9\u7f51\u7ad9\u8fdb\u884c\u4e0b\u8f7d\u5b89\u88c5\u3002 \u5df2\u5b89\u88c5 Git \u5de5\u5177\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5\uff0c\u53ef\u4ee5\u70b9\u51fb Git \u81f3\u5b98\u65b9\u7f51\u7ad9\u8fdb\u884c\u4e0b\u8f7d\u5b89\u88c5\u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/connect-to-matrixone-with-go/#golang-matrixone","text":"Go-MySQL-Driver \u662f\u4e00\u4e2a\u7528\u4e8e Go \u8bed\u8a00\u7684 MySQL \u9a71\u52a8\u7a0b\u5e8f\uff0c\u5b83\u5b9e\u73b0\u4e86 Go \u6807\u51c6\u5e93\u4e2d database/sql \u63a5\u53e3\u7684\u65b9\u6cd5\uff0c\u4f7f\u5f97 Go \u8bed\u8a00\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u8fde\u63a5\u548c\u64cd\u4f5c MySQL \u6570\u636e\u5e93\u3002 \u5b89\u88c5 Go-MySQL-Driver \u5de5\u5177\uff1a \u4f7f\u7528 Go Tool \u5c06 Go-MySQL-Driver \u5305\u5b89\u88c5\u5230\u4f60\u7684 $GOPATH \u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u884c\u5b89\u88c5 Go-MySQL-Driver \u5de5\u5177\uff1a > go get -u github.com/go-sql-driver/mysql \u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne\u3002\u65b0\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a test \u6570\u636e\u5e93\uff1a mysql > create database test ; \u521b\u5efa\u4e00\u4e2a\u7eaf\u6587\u672c\u6587\u4ef6 golang_connect_matrixone.go \u5e76\u5c06\u4ee3\u7801\u5199\u5165\u6587\u4ef6\uff1a package main import ( \"database/sql\" \"fmt\" _ \"github.com/go-sql-driver/mysql\" ) func main () { //\"username:password@[protocol](address:port)/database\" db , _ := sql . Open ( \"mysql\" , \"root:111@tcp(127.0.0.1:6001)/test\" ) // Set database connection defer db . Close () //Close DB err := db . Ping () //Connect to DB if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed return } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } } \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u5728\u7ec8\u7aef\u5185\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff1a > go run golang_connect_matrixone.go Database Connection Succeed","title":"\u4f7f\u7528 Golang \u8fde\u63a5 MatrixOne \u670d\u52a1"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/connect-to-matrixone-with-go/#gorm-matrixone","text":"gorm \u662f\u4e00\u4e2a\u57fa\u4e8e golang \u7684\u4e00\u4e2a\u795e\u5947\u7684\u5168\u529f\u80fd ORM \u5e93\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 gorm.io/gorm \u548c gorm.io/driver/mysql \u8fd9\u4e24\u4e2a\u5e93\u6765\u8ba9 Go \u8fde\u63a5\u5230 MYSQL \u6570\u636e\u5e93\u3002 \u5b89\u88c5 gorm.io/gorm \u548c gorm.io/driver/mysql \u5e93\uff0c\u4f7f\u7528 go get \u547d\u4ee4\u5b89\u88c5\uff1a go get -u gorm.io/gorm go get -u gorm.io/driver/mysql \u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne\u3002\u65b0\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a test \u6570\u636e\u5e93\uff1a mysql > create database test ; \u521b\u5efa\u4e00\u4e2a\u6587\u672c\u6587\u4ef6 golang_gorm_connect_matrixone.go \u5e76\u5c06\u4ee3\u7801\u5199\u5165\u6587\u4ef6\uff1a package main import ( \"gorm.io/driver/mysql\" \"gorm.io/gorm\" \"fmt\" ) func getDBConn () * gorm . DB { dsn := \"root:111@tcp(127.0.0.1:6001)/test?charset=utf8mb4&parseTime=True&loc=Local\" //MO db , err := gorm . Open ( mysql . Open ( dsn ), & gorm . Config { }) // get connection if err != nil { fmt . Println ( \"Database Connection Failed\" ) //Connection failed } else { fmt . Println ( \"Database Connection Succeed\" ) //Connection succeed } return db } func main () { getDBConn () } \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u5728\u7ec8\u7aef\u5185\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff1a > go run golang_gorm_connect_matrixone.go Database Connection Succeed","title":"\u4f7f\u7528 Gorm \u8fde\u63a5 MatrixOne \u670d\u52a1"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/connect-to-matrixone-with-go/#_2","text":"\u5173\u4e8e\u4f7f\u7528 Golang \u901a\u8fc7 MatrixOne \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 CRUD \u7684\u793a\u4f8b\uff0c\u53c2\u89c1 Golang \u57fa\u7840\u793a\u4f8b \u3002 \u5173\u4e8e\u4f7f\u7528 Gorm \u901a\u8fc7 MatrixOne \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 CRUD \u7684\u793a\u4f8b\uff0c\u53c2\u89c1 Gorm \u57fa\u7840\u793a\u4f8b \u3002","title":"\u53c2\u8003\u6587\u6863"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/database-client-tools/","text":"\u5ba2\u6237\u7aef\u5de5\u5177\u8fde\u63a5 MatrixOne \u73b0\u5728\u652f\u6301\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u6570\u636e\u5e93\u5ba2\u6237\u7aef\u5de5\u5177\u7684\u65b9\u5f0f\u8fde\u63a5 MatrixOne \u670d\u52a1\uff1a MySQL Client Navicat DBeaver \u524d\u671f\u51c6\u5907 \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002\u3002 \u901a\u8fc7 MySQL Client \u8fde\u63a5 MatrixOne \u670d\u52a1 \u4e0b\u8f7d\u5b89\u88c5 MySQL Client \u3002 \u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u6765\u8fde\u63a5 MatrixOne \u670d\u52a1\u3002 mysql -h IP -P PORT -uUsername -p \u8fde\u63a5\u7b26\u7684\u683c\u5f0f\u4e0e MySQL \u683c\u5f0f\u76f8\u540c\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u6b64\u5904\u4ee5\u5185\u7f6e\u5e10\u53f7\u4f5c\u4e3a\u793a\u4f8b\uff1a user: root password: 111 mysql -h 127.0.0.1 -P 6001 -uroot -p Enter password: Note \u4e0a\u8ff0\u4ee3\u7801\u6bb5\u4e2d\u7684\u767b\u5f55\u8d26\u53f7\u4e3a\u521d\u59cb\u8d26\u53f7\uff0c\u8bf7\u5728\u767b\u5f55 MatrixOne \u540e\u53ca\u65f6\u4fee\u6539\u521d\u59cb\u5bc6\u7801\uff0c\u53c2\u89c1 \u5bc6\u7801\u7ba1\u7406 \u3002 \u8fde\u63a5\u6210\u529f\u63d0\u793a\u5982\u4e0b\uff1a Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 1031 Server version: 8.0.30-MatrixOne-v1.0.0-rc1 MatrixOne Copyright (c) 2000, 2022, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. \u66f4\u591a\u5173\u4e8e\u5b89\u88c5\u90e8\u7f72\u7684\u95ee\u9898\uff0c\u53c2\u89c1 \u90e8\u7f72\u5e38\u89c1\u95ee\u9898 \u3002 Note MatrixOne \u4e0e\u5ba2\u6237\u7aef\u9ed8\u8ba4\u662f\u975e\u52a0\u5bc6\u4f20\u8f93\uff0c\u5982\u679c\u9700\u8981\u5f00\u542f\u52a0\u5bc6\u4f20\u8f93\u8bf7\u53c2\u89c1 \u6570\u636e\u4f20\u8f93\u52a0\u5bc6 \u3002 \u901a\u8fc7 Navicat \u8fde\u63a5 MatrixOne \u670d\u52a1 \u4e0b\u8f7d\u5b89\u88c5 Navicat \u3002 \u5b89\u88c5 Navicat \u5b8c\u6210\u540e\uff0c\u6253\u5f00 Navicat\uff0c\u70b9\u51fb\u5de6\u4e0a\u89d2 Connection > MySQL \uff0c\u5728\u5f39\u7a97\u4e2d\u586b\u5165\u5982\u4e0b\u53c2\u6570\uff1a Connction Name : MatrixOne Host : 127.0.0.1 Port : 6001 User Name : root Password : 111 Save password \uff1a\u52fe\u9009 \u70b9\u51fb Save \u4fdd\u5b58\u8bbe\u7f6e\u3002 \u53cc\u51fb\u5de6\u4fa7\u6570\u636e\u5e93\u76ee\u5f55\u4e2d\u7684 MatrixOne \uff0c\u56fe\u6807\u70b9\u4eae\uff0c\u8fde\u63a5\u6210\u529f\u3002 \u8fde\u63a5\u5230 MatrixOne \u540e\uff0c\u5728\u5de6\u4fa7\u6570\u636e\u5e93\u76ee\u5f55\u680f\uff0c\u4f60\u5c06\u770b\u5230 6 \u4e2a\u9ed8\u8ba4\u7cfb\u7edf\u6570\u636e\u5e93\uff1a \u53f3\u4fa7\u7a97\u53e3\u53ef\u67e5\u770b\u6709\u5173\u6b64\u8fde\u63a5\u7684\u57fa\u672c\u4fe1\u606f\uff1a \u901a\u8fc7 DBeaver \u8fde\u63a5 MatrixOne \u670d\u52a1 \u4e0b\u8f7d\u5b89\u88c5 DBeaver \u3002 \u5b89\u88c5 DBeaver \u5b8c\u6210\u540e\uff0c\u6253\u5f00 DBeaver\uff0c\u70b9\u51fb\u5de6\u4e0a\u89d2 \u8fde\u63a5 \u56fe\u6807\uff0c\u5728\u5f39\u7a97\u4e2d\u9009\u62e9 MySQL \uff0c\u70b9\u51fb Next \u3002 \u5728 Connect to a database \u7a97\u53e3\u7684 Main \u533a\u4e2d\u586b\u5199\u5982\u4e0b\u53c2\u6570\uff1a Host : 127.0.0.1 Port : 6001 Database : MatrixOne User Name : root Password : 111 Save password locally : \u52fe\u9009 \u53cc\u51fb\u5de6\u4fa7\u76ee\u5f55\u4e2d\u7684 MatrixOne \uff0c\u8fde\u63a5 MatrixOne \u670d\u52a1\u3002\u4f60\u53ef\u4ee5\u5728\u5de6\u4fa7\u76ee\u5f55\u6811\u4e2d\u770b\u5230\u9ed8\u8ba4\u7684\u56db\u4e2a\u7cfb\u7edf\u6570\u636e\u5e93\uff1a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDBeaver \u4e2d\u4e0d\u5c55\u793a\u89c6\u56fe\u3002\u5982\u9700\u663e\u793a\u5b8c\u6574\u7684\u7cfb\u7edf\u6570\u636e\u5e93\uff0c\u4f60\u53ef\u4ee5\u53f3\u952e\u5355\u51fb MatrixOne \uff0c\u9009\u62e9 Connection view \u5e76\u6253\u5f00 Show system objects \uff1a \u8bbe\u7f6e\u5b8c\u6210\u540e\uff0c\u4f60\u5c06\u770b\u5230 6 \u4e2a\u7cfb\u7edf\u6570\u636e\u5e93\u3002","title":"\u5ba2\u6237\u7aef\u5de5\u5177\u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/database-client-tools/#_1","text":"MatrixOne \u73b0\u5728\u652f\u6301\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u6570\u636e\u5e93\u5ba2\u6237\u7aef\u5de5\u5177\u7684\u65b9\u5f0f\u8fde\u63a5 MatrixOne \u670d\u52a1\uff1a MySQL Client Navicat DBeaver","title":"\u5ba2\u6237\u7aef\u5de5\u5177\u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/database-client-tools/#_2","text":"\u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002\u3002","title":"\u524d\u671f\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/database-client-tools/#mysql-client-matrixone","text":"\u4e0b\u8f7d\u5b89\u88c5 MySQL Client \u3002 \u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u6765\u8fde\u63a5 MatrixOne \u670d\u52a1\u3002 mysql -h IP -P PORT -uUsername -p \u8fde\u63a5\u7b26\u7684\u683c\u5f0f\u4e0e MySQL \u683c\u5f0f\u76f8\u540c\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u6b64\u5904\u4ee5\u5185\u7f6e\u5e10\u53f7\u4f5c\u4e3a\u793a\u4f8b\uff1a user: root password: 111 mysql -h 127.0.0.1 -P 6001 -uroot -p Enter password: Note \u4e0a\u8ff0\u4ee3\u7801\u6bb5\u4e2d\u7684\u767b\u5f55\u8d26\u53f7\u4e3a\u521d\u59cb\u8d26\u53f7\uff0c\u8bf7\u5728\u767b\u5f55 MatrixOne \u540e\u53ca\u65f6\u4fee\u6539\u521d\u59cb\u5bc6\u7801\uff0c\u53c2\u89c1 \u5bc6\u7801\u7ba1\u7406 \u3002 \u8fde\u63a5\u6210\u529f\u63d0\u793a\u5982\u4e0b\uff1a Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 1031 Server version: 8.0.30-MatrixOne-v1.0.0-rc1 MatrixOne Copyright (c) 2000, 2022, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. \u66f4\u591a\u5173\u4e8e\u5b89\u88c5\u90e8\u7f72\u7684\u95ee\u9898\uff0c\u53c2\u89c1 \u90e8\u7f72\u5e38\u89c1\u95ee\u9898 \u3002 Note MatrixOne \u4e0e\u5ba2\u6237\u7aef\u9ed8\u8ba4\u662f\u975e\u52a0\u5bc6\u4f20\u8f93\uff0c\u5982\u679c\u9700\u8981\u5f00\u542f\u52a0\u5bc6\u4f20\u8f93\u8bf7\u53c2\u89c1 \u6570\u636e\u4f20\u8f93\u52a0\u5bc6 \u3002","title":"\u901a\u8fc7 MySQL Client \u8fde\u63a5 MatrixOne \u670d\u52a1"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/database-client-tools/#navicat-matrixone","text":"\u4e0b\u8f7d\u5b89\u88c5 Navicat \u3002 \u5b89\u88c5 Navicat \u5b8c\u6210\u540e\uff0c\u6253\u5f00 Navicat\uff0c\u70b9\u51fb\u5de6\u4e0a\u89d2 Connection > MySQL \uff0c\u5728\u5f39\u7a97\u4e2d\u586b\u5165\u5982\u4e0b\u53c2\u6570\uff1a Connction Name : MatrixOne Host : 127.0.0.1 Port : 6001 User Name : root Password : 111 Save password \uff1a\u52fe\u9009 \u70b9\u51fb Save \u4fdd\u5b58\u8bbe\u7f6e\u3002 \u53cc\u51fb\u5de6\u4fa7\u6570\u636e\u5e93\u76ee\u5f55\u4e2d\u7684 MatrixOne \uff0c\u56fe\u6807\u70b9\u4eae\uff0c\u8fde\u63a5\u6210\u529f\u3002 \u8fde\u63a5\u5230 MatrixOne \u540e\uff0c\u5728\u5de6\u4fa7\u6570\u636e\u5e93\u76ee\u5f55\u680f\uff0c\u4f60\u5c06\u770b\u5230 6 \u4e2a\u9ed8\u8ba4\u7cfb\u7edf\u6570\u636e\u5e93\uff1a \u53f3\u4fa7\u7a97\u53e3\u53ef\u67e5\u770b\u6709\u5173\u6b64\u8fde\u63a5\u7684\u57fa\u672c\u4fe1\u606f\uff1a","title":"\u901a\u8fc7 Navicat \u8fde\u63a5 MatrixOne \u670d\u52a1"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/database-client-tools/#dbeaver-matrixone","text":"\u4e0b\u8f7d\u5b89\u88c5 DBeaver \u3002 \u5b89\u88c5 DBeaver \u5b8c\u6210\u540e\uff0c\u6253\u5f00 DBeaver\uff0c\u70b9\u51fb\u5de6\u4e0a\u89d2 \u8fde\u63a5 \u56fe\u6807\uff0c\u5728\u5f39\u7a97\u4e2d\u9009\u62e9 MySQL \uff0c\u70b9\u51fb Next \u3002 \u5728 Connect to a database \u7a97\u53e3\u7684 Main \u533a\u4e2d\u586b\u5199\u5982\u4e0b\u53c2\u6570\uff1a Host : 127.0.0.1 Port : 6001 Database : MatrixOne User Name : root Password : 111 Save password locally : \u52fe\u9009 \u53cc\u51fb\u5de6\u4fa7\u76ee\u5f55\u4e2d\u7684 MatrixOne \uff0c\u8fde\u63a5 MatrixOne \u670d\u52a1\u3002\u4f60\u53ef\u4ee5\u5728\u5de6\u4fa7\u76ee\u5f55\u6811\u4e2d\u770b\u5230\u9ed8\u8ba4\u7684\u56db\u4e2a\u7cfb\u7edf\u6570\u636e\u5e93\uff1a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDBeaver \u4e2d\u4e0d\u5c55\u793a\u89c6\u56fe\u3002\u5982\u9700\u663e\u793a\u5b8c\u6574\u7684\u7cfb\u7edf\u6570\u636e\u5e93\uff0c\u4f60\u53ef\u4ee5\u53f3\u952e\u5355\u51fb MatrixOne \uff0c\u9009\u62e9 Connection view \u5e76\u6253\u5f00 Show system objects \uff1a \u8bbe\u7f6e\u5b8c\u6210\u540e\uff0c\u4f60\u5c06\u770b\u5230 6 \u4e2a\u7cfb\u7edf\u6570\u636e\u5e93\u3002","title":"\u901a\u8fc7 DBeaver \u8fde\u63a5 MatrixOne \u670d\u52a1"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/python-connect-to-matrixone/","text":"\u4f7f\u7528 Python \u8fde\u63a5 MatrixOne \u652f\u6301 Python \u8fde\u63a5\uff0c\u652f\u6301 pymysql \u548c sqlalchemy \u4e24\u79cd\u9a71\u52a8\u7a0b\u5e8f\u3002 \u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u4e86\u89e3\u5982\u4f55\u901a\u8fc7\u8fd9\u4e24\u4e2a python \u9a71\u52a8\u7a0b\u5e8f\u8fde\u63a5 MatrixOne\u3002 \u5f00\u59cb\u524d\u51c6\u5907 \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u5df2\u5b89\u88c5 Python 3.8(or plus) version \u3002 #\u68c0\u67e5 Python \u7248\u672c\u53f7\uff0c\u786e\u8ba4\u662f\u5426\u5b89\u88c5 python3 -V \u5df2\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef\u3002 \u4f7f\u7528 pymysql \u5de5\u5177\u8fde\u63a5 MatrixOne \u670d\u52a1 PyMySQL \u662f\u4e00\u4e2a\u7eaf Python MySQL \u5ba2\u6237\u7aef\u5e93\u3002 \u4e0b\u8f7d\u5b89\u88c5 pymysql \u548c cryptography \u5de5\u5177\uff1a pip3 install pymysql pip3 install cryptography #If you are in China mainland and have a low downloading speed, you can speed up the download by following commands. pip3 install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install cryptography -i https://pypi.tuna.tsinghua.edu.cn/simple \u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne\u3002\u65b0\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a test \u6570\u636e\u5e93\uff1a mysql > create database test ; \u521b\u5efa\u4e00\u4e2a\u7eaf\u6587\u672c\u6587\u4ef6 pymysql_connect_matrixone.py \u5e76\u5c06\u4ee3\u7801\u5199\u5165\u6587\u4ef6\uff1a #!/usr/bin/python3 import pymysql # Open database connection db = pymysql . connect ( host = '127.0.0.1' , port = 6001 , user = 'root' , password = \"111\" , db = 'test' , ) # prepare a cursor object using cursor() method cursor = db . cursor () # execute SQL query using execute() method. cursor . execute ( \"SELECT VERSION()\" ) # Fetch a single row using fetchone() method. data = cursor . fetchone () print ( \"Database version : %s \" % data ) # disconnect from server db . close () \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u5728\u7ec8\u7aef\u5185\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff1a > python3 pymysql_connect_matrixone.py Database version : 8.0.30-MatrixOne-v1.0.0-rc1 \u4f7f\u7528 sqlalchemy \u8fde\u63a5 MatrixOne SQLAlchemy \u662f Python SQL \u5de5\u5177\u5305\u548c\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668 (ORM)\uff0c\u5b83\u4e3a\u5e94\u7528\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86 SQL \u7684\u5168\u90e8\u529f\u80fd\u3002 \u4e0b\u8f7d\u5e76\u5b89\u88c5 sqlalchemy \u5de5\u5177\uff0c\u4e0b\u8f7d\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a pip3 install sqlalchemy #If you are in China mainland and have a low downloading speed, you can speed up the download by following commands. pip3 install sqlalchemy -i https://pypi.tuna.tsinghua.edu.cn/simple \u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne\u3002\u65b0\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a test \u6570\u636e\u5e93\uff0c\u5e76\u4e14\u65b0\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a student \u8868\uff0c\u7136\u540e\u63d2\u5165\u4e24\u6761\u6570\u636e\uff1a mysql > create database test ; mysql > use test ; mysql > create table student ( name varchar ( 20 ), age int ); mysql > insert into student values ( \"tom\" , 11 ), ( \"alice\" , \"10\" ); \u521b\u5efa\u4e00\u4e2a\u7eaf\u6587\u672c\u6587\u4ef6 sqlalchemy_connect_matrixone.py \u5e76\u5c06\u4ee3\u7801\u5199\u5165\u6587\u4ef6\uff1a #!/usr/bin/python3 from sqlalchemy import create_engine , text # Open database connection my_conn = create_engine ( \"mysql+mysqldb://root:111@127.0.0.1:6001/test\" ) # execute SQL query using execute() method. query = text ( \"SELECT * FROM student LIMIT 0,10\" ) my_data = my_conn . execute ( query ) # print SQL result for row in my_data : print ( \"name:\" , row [ \"name\" ]) print ( \"age:\" , row [ \"age\" ]) \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u5728\u7ec8\u7aef\u5185\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff1a python3 sqlalchemy_connect_matrixone.py name: tom age: 11 name: alice age: 10","title":"Python \u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/python-connect-to-matrixone/#python","text":"MatrixOne \u652f\u6301 Python \u8fde\u63a5\uff0c\u652f\u6301 pymysql \u548c sqlalchemy \u4e24\u79cd\u9a71\u52a8\u7a0b\u5e8f\u3002 \u672c\u7bc7\u6587\u6863\u5c06\u6307\u5bfc\u4f60\u4e86\u89e3\u5982\u4f55\u901a\u8fc7\u8fd9\u4e24\u4e2a python \u9a71\u52a8\u7a0b\u5e8f\u8fde\u63a5 MatrixOne\u3002","title":"\u4f7f\u7528 Python \u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/python-connect-to-matrixone/#_1","text":"\u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u5df2\u5b89\u88c5 Python 3.8(or plus) version \u3002 #\u68c0\u67e5 Python \u7248\u672c\u53f7\uff0c\u786e\u8ba4\u662f\u5426\u5b89\u88c5 python3 -V \u5df2\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef\u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/python-connect-to-matrixone/#pymysql-matrixone","text":"PyMySQL \u662f\u4e00\u4e2a\u7eaf Python MySQL \u5ba2\u6237\u7aef\u5e93\u3002 \u4e0b\u8f7d\u5b89\u88c5 pymysql \u548c cryptography \u5de5\u5177\uff1a pip3 install pymysql pip3 install cryptography #If you are in China mainland and have a low downloading speed, you can speed up the download by following commands. pip3 install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install cryptography -i https://pypi.tuna.tsinghua.edu.cn/simple \u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne\u3002\u65b0\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a test \u6570\u636e\u5e93\uff1a mysql > create database test ; \u521b\u5efa\u4e00\u4e2a\u7eaf\u6587\u672c\u6587\u4ef6 pymysql_connect_matrixone.py \u5e76\u5c06\u4ee3\u7801\u5199\u5165\u6587\u4ef6\uff1a #!/usr/bin/python3 import pymysql # Open database connection db = pymysql . connect ( host = '127.0.0.1' , port = 6001 , user = 'root' , password = \"111\" , db = 'test' , ) # prepare a cursor object using cursor() method cursor = db . cursor () # execute SQL query using execute() method. cursor . execute ( \"SELECT VERSION()\" ) # Fetch a single row using fetchone() method. data = cursor . fetchone () print ( \"Database version : %s \" % data ) # disconnect from server db . close () \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u5728\u7ec8\u7aef\u5185\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff1a > python3 pymysql_connect_matrixone.py Database version : 8.0.30-MatrixOne-v1.0.0-rc1","title":"\u4f7f\u7528 pymysql \u5de5\u5177\u8fde\u63a5 MatrixOne \u670d\u52a1"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/python-connect-to-matrixone/#sqlalchemy-matrixone","text":"SQLAlchemy \u662f Python SQL \u5de5\u5177\u5305\u548c\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668 (ORM)\uff0c\u5b83\u4e3a\u5e94\u7528\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86 SQL \u7684\u5168\u90e8\u529f\u80fd\u3002 \u4e0b\u8f7d\u5e76\u5b89\u88c5 sqlalchemy \u5de5\u5177\uff0c\u4e0b\u8f7d\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a pip3 install sqlalchemy #If you are in China mainland and have a low downloading speed, you can speed up the download by following commands. pip3 install sqlalchemy -i https://pypi.tuna.tsinghua.edu.cn/simple \u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne\u3002\u65b0\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a test \u6570\u636e\u5e93\uff0c\u5e76\u4e14\u65b0\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a student \u8868\uff0c\u7136\u540e\u63d2\u5165\u4e24\u6761\u6570\u636e\uff1a mysql > create database test ; mysql > use test ; mysql > create table student ( name varchar ( 20 ), age int ); mysql > insert into student values ( \"tom\" , 11 ), ( \"alice\" , \"10\" ); \u521b\u5efa\u4e00\u4e2a\u7eaf\u6587\u672c\u6587\u4ef6 sqlalchemy_connect_matrixone.py \u5e76\u5c06\u4ee3\u7801\u5199\u5165\u6587\u4ef6\uff1a #!/usr/bin/python3 from sqlalchemy import create_engine , text # Open database connection my_conn = create_engine ( \"mysql+mysqldb://root:111@127.0.0.1:6001/test\" ) # execute SQL query using execute() method. query = text ( \"SELECT * FROM student LIMIT 0,10\" ) my_data = my_conn . execute ( query ) # print SQL result for row in my_data : print ( \"name:\" , row [ \"name\" ]) print ( \"age:\" , row [ \"age\" ]) \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u5728\u7ec8\u7aef\u5185\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff1a python3 sqlalchemy_connect_matrixone.py name: tom age: 11 name: alice age: 10","title":"\u4f7f\u7528 sqlalchemy \u8fde\u63a5 MatrixOne"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-jdbc/","text":"\u4f7f\u7528 JDBC \u8fde\u63a5 \u5728 Java \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Java \u4ee3\u7801\u4f7f\u7528 JDBC \u8fde\u63a5\u5668\uff08Java Database Connectivity\uff09\u8fde\u63a5\u5230 MatrixOne\u3002JDBC \u662f\u7528\u4e8e\u6570\u636e\u5e93\u8fde\u63a5\u7684\u6807\u51c6 API \u4e4b\u4e00\uff0c\u4f7f\u7528\u5b83\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u8fd0\u884c SQL \u8bed\u53e5\u5e76\u4e14\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6570\u636e\u3002 \u5f00\u59cb\u524d\u51c6\u5907 \u4f7f\u7528 MatrixOne \u8fdb\u884c Java \u6570\u636e\u5e93\u8fde\u63a5\u524d\uff0c\u9700\u8981\u5b8c\u6210\u4ee5\u4e0b\u4e0b\u8f7d\u5b89\u88c5\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u4e0b\u8f7d\u5b89\u88c5 JDK 8+ version \u3002 \u4e0b\u8f7d\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef\u3002 \u4e0b\u8f7d\u5b89\u88c5 JAVA IDE\uff0c\u672c\u7bc7\u6587\u6863\u4ee5 IntelliJ IDEA \u4e3a\u4f8b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u5176\u4ed6 IDE \u5de5\u5177\u3002 \u6b65\u9aa4 \u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne\u3002\u5728 MatrixOne \u65b0\u5efa\u4e00\u4e2a\u540d\u4e3a test \u6570\u636e\u5e93\u548c\u4e00\u4e2a\u65b0\u7684\u8868 t1 \uff1a create database test ; use test ; create table t1 ( code int primary key , title char ( 35 ) ); \u5728 IDEA \u4e2d\u65b0\u5efa Java \u540d\u79f0\u4e3a testJDBC \u7684\u9879\u76ee\u5e76\u9009\u62e9\u5728 Build System \u4e2d\u9009\u62e9 Maven \u4f5c\u4e3a\u6784\u5efa\u7cfb\u7edf\uff0c\u70b9\u51fb Create \u3002 \u70b9\u51fb File > Project Structure \uff0c\u8fdb\u5165\u5230 Project Setting \uff0c\u70b9\u9009 Library \uff0c\u5e76\u70b9\u51fb + \u6309\u94ae\uff0c\u6dfb\u52a0 From Maven \u3002 \u8f93\u5165\u6846\u4e2d\u8f93\u5165 mysql-connector-java \u641c\u7d22\u6574\u4e2a\u5e93\uff0c\u9009\u62e9 mysql:mysql-connector-java:8.0.30 \uff0c\u5e94\u7528\u5230\u672c\u9879\u76ee\u4e2d\u3002 \u4fee\u6539 src/main/java/org/example/Main.java \u4e2d\u7684\u9ed8\u8ba4 Java \u6e90\u4ee3\u7801\u3002\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u79cd\u6240\u793a\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528\u8fde\u63a5\u5730\u5740\u548c\u51ed\u636e\u521b\u5efa\u8fde\u63a5\u3002\u8fde\u63a5\u5230 MatrixOne \u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Java \u8bed\u8a00\u5bf9 MatrixOne \u6570\u636e\u5e93\u548c\u8868\u8fdb\u884c\u64cd\u4f5c\u3002 \u6709\u5173\u5982\u4f55\u4f7f\u7528 JDBC \u5728 MatrixOne \u4e2d\u5f00\u53d1 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u5e94\u7528\u7a0b\u5e8f\u7684\u5b8c\u6574\u793a\u4f8b\uff0c\u53c2\u8003 Java CRUD \u793a\u4f8b \u3002 package org.example; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class Main { private static String jdbcURL = \"jdbc:mysql://127.0.0.1:6001/test\"; private static String jdbcUsername = \"root\"; private static String jdbcPassword = \"111\"; public static void main(String[] args) { try { Connection connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword); // Do something with the Connection } catch (SQLException ex) { // handle any errors System.out.println(\"SQLException: \" + ex.getMessage()); System.out.println(\"SQLState: \" + ex.getSQLState()); System.out.println(\"VendorError: \" + ex.getErrorCode()); } } } \u53c2\u8003\u6587\u6863 \u6709\u5173 MatrixOne \u5bf9 JDBC \u7279\u6027\u652f\u6301\u7684\u5b8c\u6574\u5217\u8868\uff0c\u53c2\u89c1 MatrixOne \u7684 JDBC \u529f\u80fd\u652f\u6301\u5217\u8868 \u3002","title":"JDBC \u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-jdbc/#jdbc","text":"\u5728 Java \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Java \u4ee3\u7801\u4f7f\u7528 JDBC \u8fde\u63a5\u5668\uff08Java Database Connectivity\uff09\u8fde\u63a5\u5230 MatrixOne\u3002JDBC \u662f\u7528\u4e8e\u6570\u636e\u5e93\u8fde\u63a5\u7684\u6807\u51c6 API \u4e4b\u4e00\uff0c\u4f7f\u7528\u5b83\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u8fd0\u884c SQL \u8bed\u53e5\u5e76\u4e14\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6570\u636e\u3002","title":"\u4f7f\u7528 JDBC \u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-jdbc/#_1","text":"\u4f7f\u7528 MatrixOne \u8fdb\u884c Java \u6570\u636e\u5e93\u8fde\u63a5\u524d\uff0c\u9700\u8981\u5b8c\u6210\u4ee5\u4e0b\u4e0b\u8f7d\u5b89\u88c5\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u4e0b\u8f7d\u5b89\u88c5 JDK 8+ version \u3002 \u4e0b\u8f7d\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef\u3002 \u4e0b\u8f7d\u5b89\u88c5 JAVA IDE\uff0c\u672c\u7bc7\u6587\u6863\u4ee5 IntelliJ IDEA \u4e3a\u4f8b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u5176\u4ed6 IDE \u5de5\u5177\u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-jdbc/#_2","text":"\u4f7f\u7528 MySQL \u5ba2\u6237\u7aef\u8fde\u63a5 MatrixOne\u3002\u5728 MatrixOne \u65b0\u5efa\u4e00\u4e2a\u540d\u4e3a test \u6570\u636e\u5e93\u548c\u4e00\u4e2a\u65b0\u7684\u8868 t1 \uff1a create database test ; use test ; create table t1 ( code int primary key , title char ( 35 ) ); \u5728 IDEA \u4e2d\u65b0\u5efa Java \u540d\u79f0\u4e3a testJDBC \u7684\u9879\u76ee\u5e76\u9009\u62e9\u5728 Build System \u4e2d\u9009\u62e9 Maven \u4f5c\u4e3a\u6784\u5efa\u7cfb\u7edf\uff0c\u70b9\u51fb Create \u3002 \u70b9\u51fb File > Project Structure \uff0c\u8fdb\u5165\u5230 Project Setting \uff0c\u70b9\u9009 Library \uff0c\u5e76\u70b9\u51fb + \u6309\u94ae\uff0c\u6dfb\u52a0 From Maven \u3002 \u8f93\u5165\u6846\u4e2d\u8f93\u5165 mysql-connector-java \u641c\u7d22\u6574\u4e2a\u5e93\uff0c\u9009\u62e9 mysql:mysql-connector-java:8.0.30 \uff0c\u5e94\u7528\u5230\u672c\u9879\u76ee\u4e2d\u3002 \u4fee\u6539 src/main/java/org/example/Main.java \u4e2d\u7684\u9ed8\u8ba4 Java \u6e90\u4ee3\u7801\u3002\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u79cd\u6240\u793a\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528\u8fde\u63a5\u5730\u5740\u548c\u51ed\u636e\u521b\u5efa\u8fde\u63a5\u3002\u8fde\u63a5\u5230 MatrixOne \u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Java \u8bed\u8a00\u5bf9 MatrixOne \u6570\u636e\u5e93\u548c\u8868\u8fdb\u884c\u64cd\u4f5c\u3002 \u6709\u5173\u5982\u4f55\u4f7f\u7528 JDBC \u5728 MatrixOne \u4e2d\u5f00\u53d1 CRUD\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\u5e94\u7528\u7a0b\u5e8f\u7684\u5b8c\u6574\u793a\u4f8b\uff0c\u53c2\u8003 Java CRUD \u793a\u4f8b \u3002 package org.example; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class Main { private static String jdbcURL = \"jdbc:mysql://127.0.0.1:6001/test\"; private static String jdbcUsername = \"root\"; private static String jdbcPassword = \"111\"; public static void main(String[] args) { try { Connection connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword); // Do something with the Connection } catch (SQLException ex) { // handle any errors System.out.println(\"SQLException: \" + ex.getMessage()); System.out.println(\"SQLState: \" + ex.getSQLState()); System.out.println(\"VendorError: \" + ex.getErrorCode()); } } }","title":"\u6b65\u9aa4"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-jdbc/#_3","text":"\u6709\u5173 MatrixOne \u5bf9 JDBC \u7279\u6027\u652f\u6301\u7684\u5b8c\u6574\u5217\u8868\uff0c\u53c2\u89c1 MatrixOne \u7684 JDBC \u529f\u80fd\u652f\u6301\u5217\u8868 \u3002","title":"\u53c2\u8003\u6587\u6863"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-orm/","text":"\u4f7f\u7528 Java ORMs \u8fde\u63a5 \u9664\u4e86\u4f7f\u7528 JDBC \u8fde\u63a5 MatrixOne \u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04 (ORM) \u6846\u67b6\u8fde\u63a5\u5230 MySQL \u6570\u636e\u5e93\u3002\u5728\u672c\u7bc7\u6587\u6863\u4e2d\uff0c\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 Spring Data JPA \u548c MyBatis \u8fde\u63a5\u5230 MatrixOne\u3002 MyBatis MyBatis \u662f SQL \u6620\u5c04\u6846\u67b6\uff0c\u5b83\u7684\u4f18\u70b9\u662f\u7b80\u5355\u6613\u7528\u3002\u4f60\u53ef\u4ee5\u53c2\u8003 SpringBoot \u548c MyBatis CRUD \u793a\u4f8b \u5b8c\u6574\u6559\u7a0b\u5b66\u4e60\u5982\u4f55\u6784\u5efa\u4e00\u4e2a CRUD \u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u672c\u7bc7\u6587\u6863\u4e2d\uff0c\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 MatrixOne \u914d\u7f6e MyBatis\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u662f Maven \u6784\u5efa\u7cfb\u7edf\u7684\u5178\u578b\u8bbe\u7f6e\u3002 1. \u5728 Pom.xml \u4e2d\u6dfb\u52a0 MyBatis-Spring-Boot-Starter \u5728 Spring Boot \u4e0a\u6784\u5efa MyBatis \u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u9700\u8981\u5c06 MyBatis-Spring-Boot-Starter \u6a21\u5757\u6dfb\u52a0\u5230 pom.xml \u4e2d\uff0c MyBatis-Spring-Boot-Starter \u6a21\u5757\u5219\u662f\u5728\u9009\u62e9 Maven \u9879\u76ee\u65f6\u8fdb\u884c\u521b\u5efa\u7684\u3002 <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.4</version> </dependency> 2. \u6dfb\u52a0\u914d\u7f6e \u5728 application.properties \u4e2d\u9700\u8981\u4fee\u6539\u7684\u53c2\u6570\u5982\u4e0b\uff0c\u5176\u4f59\u53c2\u6570\u53ef\u4ee5\u4fdd\u5b58\u9ed8\u8ba4\u503c\uff1a spring.datasource.driver-class-name \uff1aMySQL \u8fde\u63a5\u5668\u7684\u9a71\u52a8\u7a0b\u5e8f\u540d\u79f0\u3002 spring.datasource.url \uff1aJDBC \u8fde\u63a5 URL \u53c2\u6570\u3002 spring.datasource.username \uff1a\u6570\u636e\u5e93\u7528\u6237\u540d\u3002 spring.datasource.password \uff1a\u6570\u636e\u5e93\u5bc6\u7801\u3002 mybatis.mapper-locations \uff1aMapper XML \u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 MatrixOne \u4e2d\u63a8\u8350\u914d\u7f6e\u5982\u4e0b\uff1a spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 spring.datasource.username=root spring.datasource.password=111 mybatis.mapper-locations=classpath:mapping/*xml Note \u9700\u8981\u4f7f\u7528\u63a8\u8350\u914d\u7f6e\u7684 JDBC \u8fde\u63a5 URL\uff0c\u5426\u5219\u5c06\u5bfc\u81f4\u8fde\u63a5\u5931\u8d25\u3002 Spring Data JPA Spring Data JPA \u662f Spring \u57fa\u4e8e ORM \u6846\u67b6\u3001JPA \u89c4\u8303\u7684\u57fa\u7840\u4e0a\u5c01\u88c5\u7684\u4e00\u5957 JPA \u5e94\u7528\u6846\u67b6\uff0c\u53ef\u4f7f\u5f00\u53d1\u8005\u7528\u6781\u7b80\u7684\u4ee3\u7801\u5373\u53ef\u5b9e\u73b0\u5bf9\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u548c\u64cd\u4f5c\uff0c\u5b83\u6709\u52a9\u4e8e\u51cf\u5c11\u6837\u677f\u4ee3\u7801\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u79cd\u901a\u8fc7\u51e0\u4e2a\u9884\u5b9a\u4e49\u7684\u5b58\u50a8\u5e93\u63a5\u53e3\u4e4b\u4e00\u5b9e\u73b0\u57fa\u672c CRUD \u64cd\u4f5c\u7684\u673a\u5236\uff0c\u5e76\u4e14\u5b83\u4e5f\u63d0\u4f9b\u4e86\u5305\u62ec\u589e\u5220\u6539\u67e5\u7b49\u5728\u5185\u7684\u5e38\u7528\u529f\u80fd\uff0c\u4e14\u6613\u4e8e\u6269\u5c55\u3002 Spring Data JPA \u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5e94\u7528\u6846\u67b6\uff0c\u5b83\u6709\u52a9\u4e8e\u51cf\u5c11\u6837\u677f\u4ee3\u7801\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u79cd\u901a\u8fc7\u51e0\u4e2a\u9884\u5b9a\u4e49\u7684\u5b58\u50a8\u5e93\u63a5\u53e3\u4e4b\u4e00\u5b9e\u73b0\u57fa\u672c CRUD \u64cd\u4f5c\u7684\u673a\u5236\u3002\u4f60\u53ef\u4ee5\u53c2\u8003 SpringBoot \u548c Hibernate CRUD \u793a\u4f8b \u5b8c\u6574\u6559\u7a0b\u5b66\u4e60\u5982\u4f55\u6784\u5efa CRUD \u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u672c\u7bc7\u6587\u6863\u4e2d\uff0c\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 MatrixOne \u8fde\u63a5\u914d\u7f6e Spring JPA\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u662f Maven \u6784\u5efa\u7cfb\u7edf\u7684\u5178\u578b\u8bbe\u7f6e\u3002 1. \u5728 Pom.xml \u4e2d\u6dfb\u52a0 spring-boot-starter-data-jpa \u5728 Spring Boot \u4e0a\u6784\u5efa Spring Data JPA \u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u9700\u8981\u5c06 spring-boot-starter-data-jpa \u6a21\u5757\u6dfb\u52a0\u5230 pom.xml \u4e2d\uff0c spring-boot-starter-data-jpa \u6a21\u5757\u5219\u662f\u5728\u9009\u62e9 Maven \u9879\u76ee\u65f6\u8fdb\u884c\u521b\u5efa\u7684\u3002 <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> 2. \u6dfb\u52a0\u914d\u7f6e \u5728 application.properties \u4e2d\u9700\u8981\u4fee\u6539\u7684\u53c2\u6570\u5982\u4e0b\uff0c\u5176\u4f59\u53c2\u6570\u53ef\u4ee5\u4fdd\u5b58\u9ed8\u8ba4\u503c\uff1a spring.datasource.driver-class-name \uff1aMySQL \u8fde\u63a5\u5668\u7684\u9a71\u52a8\u7a0b\u5e8f\u540d\u79f0\u3002 spring.datasource.url \uff1aJDBC \u8fde\u63a5 URL \u53c2\u6570\u3002 spring.datasource.username \uff1a\u6570\u636e\u5e93\u7528\u6237\u540d\u3002 spring.datasource.password \uff1a\u6570\u636e\u5e93\u5bc6\u7801\u3002 spring.jpa.properties.hibernate.dialect \uff1a SQL dialect \uff08\u5373 SQL \u65b9\u8a00\uff09\u4f7f Hibernate \u4e3a\u6240\u9009\u6570\u636e\u5e93\u751f\u6210\u66f4\u597d\u7684 SQL\u3002MatrixOne \u5f53\u524d\u4ec5\u652f\u6301 org.hibernate.dialect.MySQLDialect \u3002 spring.jpa.hibernate.ddl-auto \uff1a spring.jpa.hibernate.ddl-auto \u5c5e\u6027\u91c7\u7528\u4e00\u4e2a\u679a\u4e3e\uff0c\u8be5\u679a\u4e3e\u4ee5\u66f4\u53ef\u63a7\u7684\u65b9\u5f0f\u63a7\u5236\u6a21\u5f0f\u751f\u6210\u3002\u53ef\u80fd\u7684\u9009\u9879\u548c\u6548\u679c\u5982\u4e0b\u8868\u6240\u793a\u3002MatrixOne \u5f53\u524d\u4ec5\u652f\u6301 none \u548c validate \u3002 \u9009\u9879 \u6548\u679c none \u65e0\u6570\u636e\u5e93\u67b6\u6784\u521d\u59cb\u5316 create \u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\u5220\u9664\u5e76\u521b\u5efa\u6a21\u5f0f\u3002\u4f7f\u7528\u6b64\u9009\u9879\uff0c\u6bcf\u6b21\u542f\u52a8\u65f6\u4f60\u6240\u6709\u7684\u6570\u636e\u90fd\u4f1a\u6d88\u5931\u3002 create-drop \u5728\u542f\u52a8\u65f6\u521b\u5efa\u6a21\u5f0f\u5e76\u5728\u4e0a\u4e0b\u6587\u5173\u95ed\u65f6\u9500\u6bc1\u6a21\u5f0f\u3002\u53ef\u7528\u4e8e\u5355\u5143\u6d4b\u8bd5\u3002 validate \u4ec5\u68c0\u67e5\u6a21\u5f0f\u662f\u5426\u4e0e\u5b9e\u4f53\u5339\u914d\u3002\u5982\u679c\u6a21\u5f0f\u4e0d\u5339\u914d\uff0c\u5219\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5c06\u5931\u8d25\u3002\u4e0d\u66f4\u6539\u6570\u636e\u5e93\u3002 update \u4ec5\u5728\u5fc5\u8981\u65f6\u66f4\u65b0\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5728\u5b9e\u4f53\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u5b57\u6bb5\uff0c\u90a3\u4e48\u5b83\u5c06\u7b80\u5355\u5730\u4e3a\u65b0\u5217\u66f4\u6539\u8868\uff0c\u800c\u4e0d\u4f1a\u7834\u574f\u6570\u636e\u3002 MatrixOne \u4e2d\u63a8\u8350\u914d\u7f6e\u5982\u4e0b\uff1a spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 spring.datasource.username=root spring.datasource.password=111 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect spring.jpa.hibernate.ddl-auto = validate","title":"Java ORMs \u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-orm/#java-orms","text":"\u9664\u4e86\u4f7f\u7528 JDBC \u8fde\u63a5 MatrixOne \u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04 (ORM) \u6846\u67b6\u8fde\u63a5\u5230 MySQL \u6570\u636e\u5e93\u3002\u5728\u672c\u7bc7\u6587\u6863\u4e2d\uff0c\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 Spring Data JPA \u548c MyBatis \u8fde\u63a5\u5230 MatrixOne\u3002","title":"\u4f7f\u7528 Java ORMs \u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-orm/#mybatis","text":"MyBatis \u662f SQL \u6620\u5c04\u6846\u67b6\uff0c\u5b83\u7684\u4f18\u70b9\u662f\u7b80\u5355\u6613\u7528\u3002\u4f60\u53ef\u4ee5\u53c2\u8003 SpringBoot \u548c MyBatis CRUD \u793a\u4f8b \u5b8c\u6574\u6559\u7a0b\u5b66\u4e60\u5982\u4f55\u6784\u5efa\u4e00\u4e2a CRUD \u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u672c\u7bc7\u6587\u6863\u4e2d\uff0c\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 MatrixOne \u914d\u7f6e MyBatis\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u662f Maven \u6784\u5efa\u7cfb\u7edf\u7684\u5178\u578b\u8bbe\u7f6e\u3002","title":"MyBatis"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-orm/#1-pomxml-mybatis-spring-boot-starter","text":"\u5728 Spring Boot \u4e0a\u6784\u5efa MyBatis \u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u9700\u8981\u5c06 MyBatis-Spring-Boot-Starter \u6a21\u5757\u6dfb\u52a0\u5230 pom.xml \u4e2d\uff0c MyBatis-Spring-Boot-Starter \u6a21\u5757\u5219\u662f\u5728\u9009\u62e9 Maven \u9879\u76ee\u65f6\u8fdb\u884c\u521b\u5efa\u7684\u3002 <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.4</version> </dependency>","title":"1. \u5728 Pom.xml \u4e2d\u6dfb\u52a0 MyBatis-Spring-Boot-Starter"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-orm/#2","text":"\u5728 application.properties \u4e2d\u9700\u8981\u4fee\u6539\u7684\u53c2\u6570\u5982\u4e0b\uff0c\u5176\u4f59\u53c2\u6570\u53ef\u4ee5\u4fdd\u5b58\u9ed8\u8ba4\u503c\uff1a spring.datasource.driver-class-name \uff1aMySQL \u8fde\u63a5\u5668\u7684\u9a71\u52a8\u7a0b\u5e8f\u540d\u79f0\u3002 spring.datasource.url \uff1aJDBC \u8fde\u63a5 URL \u53c2\u6570\u3002 spring.datasource.username \uff1a\u6570\u636e\u5e93\u7528\u6237\u540d\u3002 spring.datasource.password \uff1a\u6570\u636e\u5e93\u5bc6\u7801\u3002 mybatis.mapper-locations \uff1aMapper XML \u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 MatrixOne \u4e2d\u63a8\u8350\u914d\u7f6e\u5982\u4e0b\uff1a spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 spring.datasource.username=root spring.datasource.password=111 mybatis.mapper-locations=classpath:mapping/*xml Note \u9700\u8981\u4f7f\u7528\u63a8\u8350\u914d\u7f6e\u7684 JDBC \u8fde\u63a5 URL\uff0c\u5426\u5219\u5c06\u5bfc\u81f4\u8fde\u63a5\u5931\u8d25\u3002","title":"2. \u6dfb\u52a0\u914d\u7f6e"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-orm/#spring-data-jpa","text":"Spring Data JPA \u662f Spring \u57fa\u4e8e ORM \u6846\u67b6\u3001JPA \u89c4\u8303\u7684\u57fa\u7840\u4e0a\u5c01\u88c5\u7684\u4e00\u5957 JPA \u5e94\u7528\u6846\u67b6\uff0c\u53ef\u4f7f\u5f00\u53d1\u8005\u7528\u6781\u7b80\u7684\u4ee3\u7801\u5373\u53ef\u5b9e\u73b0\u5bf9\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u548c\u64cd\u4f5c\uff0c\u5b83\u6709\u52a9\u4e8e\u51cf\u5c11\u6837\u677f\u4ee3\u7801\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u79cd\u901a\u8fc7\u51e0\u4e2a\u9884\u5b9a\u4e49\u7684\u5b58\u50a8\u5e93\u63a5\u53e3\u4e4b\u4e00\u5b9e\u73b0\u57fa\u672c CRUD \u64cd\u4f5c\u7684\u673a\u5236\uff0c\u5e76\u4e14\u5b83\u4e5f\u63d0\u4f9b\u4e86\u5305\u62ec\u589e\u5220\u6539\u67e5\u7b49\u5728\u5185\u7684\u5e38\u7528\u529f\u80fd\uff0c\u4e14\u6613\u4e8e\u6269\u5c55\u3002 Spring Data JPA \u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5e94\u7528\u6846\u67b6\uff0c\u5b83\u6709\u52a9\u4e8e\u51cf\u5c11\u6837\u677f\u4ee3\u7801\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u79cd\u901a\u8fc7\u51e0\u4e2a\u9884\u5b9a\u4e49\u7684\u5b58\u50a8\u5e93\u63a5\u53e3\u4e4b\u4e00\u5b9e\u73b0\u57fa\u672c CRUD \u64cd\u4f5c\u7684\u673a\u5236\u3002\u4f60\u53ef\u4ee5\u53c2\u8003 SpringBoot \u548c Hibernate CRUD \u793a\u4f8b \u5b8c\u6574\u6559\u7a0b\u5b66\u4e60\u5982\u4f55\u6784\u5efa CRUD \u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u672c\u7bc7\u6587\u6863\u4e2d\uff0c\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 MatrixOne \u8fde\u63a5\u914d\u7f6e Spring JPA\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u662f Maven \u6784\u5efa\u7cfb\u7edf\u7684\u5178\u578b\u8bbe\u7f6e\u3002","title":"Spring Data JPA"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-orm/#1-pomxml-spring-boot-starter-data-jpa","text":"\u5728 Spring Boot \u4e0a\u6784\u5efa Spring Data JPA \u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u9700\u8981\u5c06 spring-boot-starter-data-jpa \u6a21\u5757\u6dfb\u52a0\u5230 pom.xml \u4e2d\uff0c spring-boot-starter-data-jpa \u6a21\u5757\u5219\u662f\u5728\u9009\u62e9 Maven \u9879\u76ee\u65f6\u8fdb\u884c\u521b\u5efa\u7684\u3002 <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency>","title":"1. \u5728 Pom.xml \u4e2d\u6dfb\u52a0 spring-boot-starter-data-jpa"},{"location":"MatrixOne-Cloud/App-Develop/connect-mo/java-connect-to-matrixone/connect-mo-with-orm/#2_1","text":"\u5728 application.properties \u4e2d\u9700\u8981\u4fee\u6539\u7684\u53c2\u6570\u5982\u4e0b\uff0c\u5176\u4f59\u53c2\u6570\u53ef\u4ee5\u4fdd\u5b58\u9ed8\u8ba4\u503c\uff1a spring.datasource.driver-class-name \uff1aMySQL \u8fde\u63a5\u5668\u7684\u9a71\u52a8\u7a0b\u5e8f\u540d\u79f0\u3002 spring.datasource.url \uff1aJDBC \u8fde\u63a5 URL \u53c2\u6570\u3002 spring.datasource.username \uff1a\u6570\u636e\u5e93\u7528\u6237\u540d\u3002 spring.datasource.password \uff1a\u6570\u636e\u5e93\u5bc6\u7801\u3002 spring.jpa.properties.hibernate.dialect \uff1a SQL dialect \uff08\u5373 SQL \u65b9\u8a00\uff09\u4f7f Hibernate \u4e3a\u6240\u9009\u6570\u636e\u5e93\u751f\u6210\u66f4\u597d\u7684 SQL\u3002MatrixOne \u5f53\u524d\u4ec5\u652f\u6301 org.hibernate.dialect.MySQLDialect \u3002 spring.jpa.hibernate.ddl-auto \uff1a spring.jpa.hibernate.ddl-auto \u5c5e\u6027\u91c7\u7528\u4e00\u4e2a\u679a\u4e3e\uff0c\u8be5\u679a\u4e3e\u4ee5\u66f4\u53ef\u63a7\u7684\u65b9\u5f0f\u63a7\u5236\u6a21\u5f0f\u751f\u6210\u3002\u53ef\u80fd\u7684\u9009\u9879\u548c\u6548\u679c\u5982\u4e0b\u8868\u6240\u793a\u3002MatrixOne \u5f53\u524d\u4ec5\u652f\u6301 none \u548c validate \u3002 \u9009\u9879 \u6548\u679c none \u65e0\u6570\u636e\u5e93\u67b6\u6784\u521d\u59cb\u5316 create \u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\u5220\u9664\u5e76\u521b\u5efa\u6a21\u5f0f\u3002\u4f7f\u7528\u6b64\u9009\u9879\uff0c\u6bcf\u6b21\u542f\u52a8\u65f6\u4f60\u6240\u6709\u7684\u6570\u636e\u90fd\u4f1a\u6d88\u5931\u3002 create-drop \u5728\u542f\u52a8\u65f6\u521b\u5efa\u6a21\u5f0f\u5e76\u5728\u4e0a\u4e0b\u6587\u5173\u95ed\u65f6\u9500\u6bc1\u6a21\u5f0f\u3002\u53ef\u7528\u4e8e\u5355\u5143\u6d4b\u8bd5\u3002 validate \u4ec5\u68c0\u67e5\u6a21\u5f0f\u662f\u5426\u4e0e\u5b9e\u4f53\u5339\u914d\u3002\u5982\u679c\u6a21\u5f0f\u4e0d\u5339\u914d\uff0c\u5219\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u5c06\u5931\u8d25\u3002\u4e0d\u66f4\u6539\u6570\u636e\u5e93\u3002 update \u4ec5\u5728\u5fc5\u8981\u65f6\u66f4\u65b0\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5728\u5b9e\u4f53\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u5b57\u6bb5\uff0c\u90a3\u4e48\u5b83\u5c06\u7b80\u5355\u5730\u4e3a\u65b0\u5217\u66f4\u6539\u8868\uff0c\u800c\u4e0d\u4f1a\u7834\u574f\u6570\u636e\u3002 MatrixOne \u4e2d\u63a8\u8350\u914d\u7f6e\u5982\u4e0b\uff1a spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 spring.datasource.username=root spring.datasource.password=111 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect spring.jpa.hibernate.ddl-auto = validate","title":"2. \u6dfb\u52a0\u914d\u7f6e"},{"location":"MatrixOne-Cloud/App-Develop/read-data/cte/","text":"\u516c\u5171\u8868\u8868\u8fbe\u5f0f (CTE) \u516c\u7528\u8868\u8868\u8fbe\u5f0f\uff08CTE,Common table expression) \u662f\u4e00\u4e2a\u547d\u540d\u7684\u4e34\u65f6\u7ed3\u679c\u96c6\uff0c\u4ec5\u5728\u5355\u4e2a SQL \u8bed\u53e5 (\u4f8b\u5982 SELECT \uff0c INSERT \uff0c UPDATE \u6216 DELETE ) \u7684\u6267\u884c\u8303\u56f4\u5185\u5b58\u5728\u3002 \u4e0e\u6d3e\u751f\u8868\u7c7b\u4f3c\uff0cCTE \u4e0d\u4f5c\u4e3a\u5bf9\u8c61\u5b58\u50a8\uff0c\u4ec5\u5728\u67e5\u8be2\u6267\u884c\u671f\u95f4\u6301\u7eed\uff1b\u4e0e\u6d3e\u751f\u8868\u4e0d\u540c\uff0cCTE \u53ef\u4ee5\u662f\u81ea\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u540c\u4e00\u67e5\u8be2\u4e2d\u591a\u6b21\u5f15\u7528\u3002\u6b64\u5916\uff0c\u4e0e\u6d3e\u751f\u8868\u76f8\u6bd4\uff0cCTE \u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u53ef\u8bfb\u6027\u548c\u6027\u80fd\u3002 \u5e94\u7528\u573a\u666f \uff1a CTE \u53ef\u4ee5\u7528\u4e8e\u591a\u4e2a\u5730\u65b9\u590d\u7528\u76f8\u540c\u7684\u5b50\u67e5\u8be2\uff0c\u907f\u514d\u91cd\u590d\u7f16\u5199\u76f8\u540c\u7684\u903b\u8f91\u3002 \u53ef\u4ee5\u7528\u4e8e\u7b80\u5316\u9012\u5f52\u67e5\u8be2\uff0c\u4f8b\u5982\u67e5\u627e\u6811\u5f62\u7ed3\u6784\u6570\u636e\u3002 \u53ef\u4ee5\u5c06\u590d\u6742\u7684\u67e5\u8be2\u62c6\u5206\u4e3a\u591a\u4e2a\u8f83\u5c0f\u7684\u90e8\u5206\uff0c\u4f7f\u67e5\u8be2\u903b\u8f91\u66f4\u6e05\u6670\u6613\u61c2\u3002 \u901a\u7528\u8868\u8868\u8fbe\u5f0f\u5206\u4e3a\u975e\u9012\u5f52\u548c\u9012\u5f52\u4e24\u79cd\u7c7b\u578b \uff1a \u975e\u9012\u5f52\u516c\u5171\u8868\u8fbe\u5f0f\uff1a\u662f\u6307 CTE \u4e2d\u4e0d\u5f15\u7528\u81ea\u8eab\u7684\u8868\u8fbe\u5f0f\uff0c\u5b83\u53ea\u7528\u4e8e\u6784\u5efa\u4e00\u6b21\u6027\u7684\u4e34\u65f6\u7ed3\u679c\u96c6\uff0c\u4e0d\u6d89\u53ca\u9012\u5f52\u64cd\u4f5c\u3002\u975e\u9012\u5f52 CTE \u8bed\u6cd5\u5982\u4e0b\uff1a WITH < query_name > AS ( < query_definition > ) SELECT ... FROM < query_name > ; \u9012\u5f52\u516c\u5171\u8868\u8fbe\u5f0f\uff1a\u662f\u6307 CTE \u4e2d\u5f15\u7528\u81ea\u8eab\u7684\u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u5904\u7406\u5177\u6709\u9012\u5f52\u7ed3\u6784\u7684\u6570\u636e\uff0c\u4f8b\u5982\u6811\u5f62\u7ed3\u6784\u3001\u56fe\u5f62\u7b49\u3002\u9012\u5f52 CTE \u5728\u5b9a\u4e49\u4e2d\u5305\u542b\u4e00\u4e2a\u57fa\u672c\u67e5\u8be2\uff08\u8d77\u59cb\u6761\u4ef6\uff09\uff0c\u7136\u540e\u5728\u8be5\u57fa\u672c\u67e5\u8be2\u7684\u7ed3\u679c\u4e0a\u8fdb\u884c\u9012\u5f52\u64cd\u4f5c\uff0c\u76f4\u5230\u6ee1\u8db3\u505c\u6b62\u6761\u4ef6\u4e3a\u6b62\u3002\u9012\u5f52 CTE \u8bed\u6cd5\u5982\u4e0b\uff1a WITH RECURSIVE < query_name > AS ( < query_definition > ) SELECT ... FROM < query_name > ; \u5f00\u59cb\u524d\u51c6\u5907 \u4f60\u9700\u8981\u786e\u8ba4\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 CTE \u8bed\u53e5\u4f7f\u7528\u793a\u4f8b \u5047\u8bbe\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a EMPLOYEES \u7684\u8868\uff0c\u5176\u4e2d\u5305\u542b\u5458\u5de5\u7684\u5c42\u6b21\u7ed3\u6784\u5173\u7cfb\uff0c\u7136\u540e\u4f7f\u7528\u975e\u9012\u5f52 Common Table Expression\uff08CTE\uff09\u548c\u9012\u5f52 CTE \u5206\u522b\u67e5\u8be2\u5458\u5de5\u5c42\u6b21\u7ed3\u6784\u3002 \u9996\u5148\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a EMPLOYEES \u8868\u5e76\u63d2\u5165\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\uff1a CREATE TABLE EMPLOYEES ( EMPLOYEE_ID INT PRIMARY KEY , NAME VARCHAR ( 50 ), MANAGER_ID INT ); INSERT INTO EMPLOYEES ( EMPLOYEE_ID , NAME , MANAGER_ID ) VALUES ( 1 , 'Alice' , NULL ), ( 2 , 'Bob' , 1 ), ( 3 , 'Carol' , 1 ), ( 4 , 'David' , 2 ), ( 5 , 'Eve' , 2 ), ( 6 , 'Frank' , 3 ), ( 7 , 'Grace' , 3 ), ( 8 , 'Hannah' , 4 ), ( 9 , 'Ian' , 4 ); \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528\u9012\u5f52 CTE \u67e5\u8be2\u5458\u5de5\u5c42\u6b21\u7ed3\u6784\uff1a WITH RECURSIVE EmployeeHierarchy AS ( SELECT EMPLOYEE_ID , NAME , MANAGER_ID , 0 AS LEVEL FROM EMPLOYEES WHERE MANAGER_ID IS NULL UNION ALL SELECT e . EMPLOYEE_ID , e . NAME , e . MANAGER_ID , eh . LEVEL + 1 FROM EMPLOYEES e INNER JOIN EmployeeHierarchy eh ON e . MANAGER_ID = eh . EMPLOYEE_ID ) SELECT * FROM EmployeeHierarchy ; + -------------+--------+------------+-------+ | employee_id | name | manager_id | level | + -------------+--------+------------+-------+ | 1 | Alice | NULL | 0 | | 2 | Bob | 1 | 1 | | 3 | Carol | 1 | 1 | | 4 | David | 2 | 2 | | 5 | Eve | 2 | 2 | | 6 | Frank | 3 | 2 | | 7 | Grace | 3 | 2 | | 8 | Hannah | 4 | 3 | | 9 | Ian | 4 | 3 | + -------------+--------+------------+-------+ 9 rows in set ( 0 . 01 sec ) \u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u975e\u9012\u5f52 CTE \u67e5\u8be2\u5458\u5de5\u4fe1\u606f\uff1a WITH EmployeeInfo AS ( SELECT EMPLOYEE_ID , NAME , MANAGER_ID FROM EMPLOYEES ) SELECT * FROM EmployeeInfo ; + -------------+--------+------------+ | employee_id | name | manager_id | + -------------+--------+------------+ | 1 | Alice | NULL | | 2 | Bob | 1 | | 3 | Carol | 1 | | 4 | David | 2 | | 5 | Eve | 2 | | 6 | Frank | 3 | | 7 | Grace | 3 | | 8 | Hannah | 4 | | 9 | Ian | 4 | + -------------+--------+------------+ 9 rows in set ( 0 . 00 sec ) \u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u9012\u5f52 CTE EmployeeHierarchy \uff0c\u5b83\u9996\u5148\u9009\u62e9\u9876\u5c42\u7ecf\u7406\uff08 MANAGER_ID IS NULL \uff09\uff0c\u7136\u540e\u901a\u8fc7\u9012\u5f52\u8fde\u63a5\u627e\u5230\u6bcf\u4e2a\u5458\u5de5\u7684\u76f4\u63a5\u4e0b\u5c5e\uff0c\u540c\u65f6\u8ddf\u8e2a\u5c42\u6b21\u7ea7\u522b\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2 CTE \u6765\u83b7\u53d6\u5458\u5de5\u5c42\u6b21\u7ed3\u6784\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u975e\u9012\u5f52 CTE \u793a\u4f8b\u53ea\u662f\u4ece EMPLOYEES \u8868\u4e2d\u9009\u62e9\u6240\u6709\u5458\u5de5\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec EMPLOYEE_ID \u3001 NAME \u548c MANAGER_ID \u3002 \u6ce8\u610f\uff0c\u9012\u5f52 CTE \u9700\u8981\u4f7f\u7528 RECURSIVE \u5173\u952e\u5b57\u6765\u58f0\u660e\u3002 \u66f4\u591a\u5173\u4e8e CTE \u7684\u4f7f\u7528\u6587\u6863\uff0c\u53c2\u8003 WITH (Common Table Expressions)","title":"\u516c\u5171\u8868\u8868\u8fbe\u5f0f"},{"location":"MatrixOne-Cloud/App-Develop/read-data/cte/#cte","text":"\u516c\u7528\u8868\u8868\u8fbe\u5f0f\uff08CTE,Common table expression) \u662f\u4e00\u4e2a\u547d\u540d\u7684\u4e34\u65f6\u7ed3\u679c\u96c6\uff0c\u4ec5\u5728\u5355\u4e2a SQL \u8bed\u53e5 (\u4f8b\u5982 SELECT \uff0c INSERT \uff0c UPDATE \u6216 DELETE ) \u7684\u6267\u884c\u8303\u56f4\u5185\u5b58\u5728\u3002 \u4e0e\u6d3e\u751f\u8868\u7c7b\u4f3c\uff0cCTE \u4e0d\u4f5c\u4e3a\u5bf9\u8c61\u5b58\u50a8\uff0c\u4ec5\u5728\u67e5\u8be2\u6267\u884c\u671f\u95f4\u6301\u7eed\uff1b\u4e0e\u6d3e\u751f\u8868\u4e0d\u540c\uff0cCTE \u53ef\u4ee5\u662f\u81ea\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u540c\u4e00\u67e5\u8be2\u4e2d\u591a\u6b21\u5f15\u7528\u3002\u6b64\u5916\uff0c\u4e0e\u6d3e\u751f\u8868\u76f8\u6bd4\uff0cCTE \u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u53ef\u8bfb\u6027\u548c\u6027\u80fd\u3002 \u5e94\u7528\u573a\u666f \uff1a CTE \u53ef\u4ee5\u7528\u4e8e\u591a\u4e2a\u5730\u65b9\u590d\u7528\u76f8\u540c\u7684\u5b50\u67e5\u8be2\uff0c\u907f\u514d\u91cd\u590d\u7f16\u5199\u76f8\u540c\u7684\u903b\u8f91\u3002 \u53ef\u4ee5\u7528\u4e8e\u7b80\u5316\u9012\u5f52\u67e5\u8be2\uff0c\u4f8b\u5982\u67e5\u627e\u6811\u5f62\u7ed3\u6784\u6570\u636e\u3002 \u53ef\u4ee5\u5c06\u590d\u6742\u7684\u67e5\u8be2\u62c6\u5206\u4e3a\u591a\u4e2a\u8f83\u5c0f\u7684\u90e8\u5206\uff0c\u4f7f\u67e5\u8be2\u903b\u8f91\u66f4\u6e05\u6670\u6613\u61c2\u3002 \u901a\u7528\u8868\u8868\u8fbe\u5f0f\u5206\u4e3a\u975e\u9012\u5f52\u548c\u9012\u5f52\u4e24\u79cd\u7c7b\u578b \uff1a \u975e\u9012\u5f52\u516c\u5171\u8868\u8fbe\u5f0f\uff1a\u662f\u6307 CTE \u4e2d\u4e0d\u5f15\u7528\u81ea\u8eab\u7684\u8868\u8fbe\u5f0f\uff0c\u5b83\u53ea\u7528\u4e8e\u6784\u5efa\u4e00\u6b21\u6027\u7684\u4e34\u65f6\u7ed3\u679c\u96c6\uff0c\u4e0d\u6d89\u53ca\u9012\u5f52\u64cd\u4f5c\u3002\u975e\u9012\u5f52 CTE \u8bed\u6cd5\u5982\u4e0b\uff1a WITH < query_name > AS ( < query_definition > ) SELECT ... FROM < query_name > ; \u9012\u5f52\u516c\u5171\u8868\u8fbe\u5f0f\uff1a\u662f\u6307 CTE \u4e2d\u5f15\u7528\u81ea\u8eab\u7684\u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u5904\u7406\u5177\u6709\u9012\u5f52\u7ed3\u6784\u7684\u6570\u636e\uff0c\u4f8b\u5982\u6811\u5f62\u7ed3\u6784\u3001\u56fe\u5f62\u7b49\u3002\u9012\u5f52 CTE \u5728\u5b9a\u4e49\u4e2d\u5305\u542b\u4e00\u4e2a\u57fa\u672c\u67e5\u8be2\uff08\u8d77\u59cb\u6761\u4ef6\uff09\uff0c\u7136\u540e\u5728\u8be5\u57fa\u672c\u67e5\u8be2\u7684\u7ed3\u679c\u4e0a\u8fdb\u884c\u9012\u5f52\u64cd\u4f5c\uff0c\u76f4\u5230\u6ee1\u8db3\u505c\u6b62\u6761\u4ef6\u4e3a\u6b62\u3002\u9012\u5f52 CTE \u8bed\u6cd5\u5982\u4e0b\uff1a WITH RECURSIVE < query_name > AS ( < query_definition > ) SELECT ... FROM < query_name > ;","title":"\u516c\u5171\u8868\u8868\u8fbe\u5f0f (CTE)"},{"location":"MatrixOne-Cloud/App-Develop/read-data/cte/#_1","text":"\u4f60\u9700\u8981\u786e\u8ba4\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/read-data/cte/#cte_1","text":"\u5047\u8bbe\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a EMPLOYEES \u7684\u8868\uff0c\u5176\u4e2d\u5305\u542b\u5458\u5de5\u7684\u5c42\u6b21\u7ed3\u6784\u5173\u7cfb\uff0c\u7136\u540e\u4f7f\u7528\u975e\u9012\u5f52 Common Table Expression\uff08CTE\uff09\u548c\u9012\u5f52 CTE \u5206\u522b\u67e5\u8be2\u5458\u5de5\u5c42\u6b21\u7ed3\u6784\u3002 \u9996\u5148\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a EMPLOYEES \u8868\u5e76\u63d2\u5165\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\uff1a CREATE TABLE EMPLOYEES ( EMPLOYEE_ID INT PRIMARY KEY , NAME VARCHAR ( 50 ), MANAGER_ID INT ); INSERT INTO EMPLOYEES ( EMPLOYEE_ID , NAME , MANAGER_ID ) VALUES ( 1 , 'Alice' , NULL ), ( 2 , 'Bob' , 1 ), ( 3 , 'Carol' , 1 ), ( 4 , 'David' , 2 ), ( 5 , 'Eve' , 2 ), ( 6 , 'Frank' , 3 ), ( 7 , 'Grace' , 3 ), ( 8 , 'Hannah' , 4 ), ( 9 , 'Ian' , 4 ); \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528\u9012\u5f52 CTE \u67e5\u8be2\u5458\u5de5\u5c42\u6b21\u7ed3\u6784\uff1a WITH RECURSIVE EmployeeHierarchy AS ( SELECT EMPLOYEE_ID , NAME , MANAGER_ID , 0 AS LEVEL FROM EMPLOYEES WHERE MANAGER_ID IS NULL UNION ALL SELECT e . EMPLOYEE_ID , e . NAME , e . MANAGER_ID , eh . LEVEL + 1 FROM EMPLOYEES e INNER JOIN EmployeeHierarchy eh ON e . MANAGER_ID = eh . EMPLOYEE_ID ) SELECT * FROM EmployeeHierarchy ; + -------------+--------+------------+-------+ | employee_id | name | manager_id | level | + -------------+--------+------------+-------+ | 1 | Alice | NULL | 0 | | 2 | Bob | 1 | 1 | | 3 | Carol | 1 | 1 | | 4 | David | 2 | 2 | | 5 | Eve | 2 | 2 | | 6 | Frank | 3 | 2 | | 7 | Grace | 3 | 2 | | 8 | Hannah | 4 | 3 | | 9 | Ian | 4 | 3 | + -------------+--------+------------+-------+ 9 rows in set ( 0 . 01 sec ) \u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u975e\u9012\u5f52 CTE \u67e5\u8be2\u5458\u5de5\u4fe1\u606f\uff1a WITH EmployeeInfo AS ( SELECT EMPLOYEE_ID , NAME , MANAGER_ID FROM EMPLOYEES ) SELECT * FROM EmployeeInfo ; + -------------+--------+------------+ | employee_id | name | manager_id | + -------------+--------+------------+ | 1 | Alice | NULL | | 2 | Bob | 1 | | 3 | Carol | 1 | | 4 | David | 2 | | 5 | Eve | 2 | | 6 | Frank | 3 | | 7 | Grace | 3 | | 8 | Hannah | 4 | | 9 | Ian | 4 | + -------------+--------+------------+ 9 rows in set ( 0 . 00 sec ) \u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u9012\u5f52 CTE EmployeeHierarchy \uff0c\u5b83\u9996\u5148\u9009\u62e9\u9876\u5c42\u7ecf\u7406\uff08 MANAGER_ID IS NULL \uff09\uff0c\u7136\u540e\u901a\u8fc7\u9012\u5f52\u8fde\u63a5\u627e\u5230\u6bcf\u4e2a\u5458\u5de5\u7684\u76f4\u63a5\u4e0b\u5c5e\uff0c\u540c\u65f6\u8ddf\u8e2a\u5c42\u6b21\u7ea7\u522b\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2 CTE \u6765\u83b7\u53d6\u5458\u5de5\u5c42\u6b21\u7ed3\u6784\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u975e\u9012\u5f52 CTE \u793a\u4f8b\u53ea\u662f\u4ece EMPLOYEES \u8868\u4e2d\u9009\u62e9\u6240\u6709\u5458\u5de5\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec EMPLOYEE_ID \u3001 NAME \u548c MANAGER_ID \u3002 \u6ce8\u610f\uff0c\u9012\u5f52 CTE \u9700\u8981\u4f7f\u7528 RECURSIVE \u5173\u952e\u5b57\u6765\u58f0\u660e\u3002 \u66f4\u591a\u5173\u4e8e CTE \u7684\u4f7f\u7528\u6587\u6863\uff0c\u53c2\u8003 WITH (Common Table Expressions)","title":"CTE \u8bed\u53e5\u4f7f\u7528\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/read-data/multitable-join-query/","text":"\u591a\u8868\u8fde\u63a5\u67e5\u8be2 \u4e00\u4e9b\u4f7f\u7528\u6570\u636e\u5e93\u7684\u573a\u666f\u4e2d\uff0c\u9700\u8981\u4e00\u4e2a\u67e5\u8be2\u5f53\u4e2d\u4f7f\u7528\u5230\u591a\u5f20\u8868\u7684\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 JOIN \u8bed\u53e5\u5c06\u4e24\u5f20\u6216\u591a\u5f20\u8868\u7684\u6570\u636e\u7ec4\u5408\u5728\u4e00\u8d77\u3002 \u5f00\u59cb\u524d\u51c6\u5907 \u4f60\u9700\u8981\u786e\u8ba4\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u6570\u636e\u51c6\u5907 \u4e0b\u8f7d\u6570\u636e\u96c6\uff1a https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/tpch/tpch-1g.zip \u521b\u5efa\u6570\u636e\u5e93\u548c\u6570\u636e\u8868\uff1a create database d1 ; use d1 ; CREATE TABLE NATION ( N_NATIONKEY INTEGER NOT NULL , N_NAME CHAR ( 25 ) NOT NULL , N_REGIONKEY INTEGER NOT NULL , N_COMMENT VARCHAR ( 152 ), PRIMARY KEY ( N_NATIONKEY )); CREATE TABLE REGION ( R_REGIONKEY INTEGER NOT NULL , R_NAME CHAR ( 25 ) NOT NULL , R_COMMENT VARCHAR ( 152 ), PRIMARY KEY ( R_REGIONKEY )); CREATE TABLE PART ( P_PARTKEY INTEGER NOT NULL , P_NAME VARCHAR ( 55 ) NOT NULL , P_MFGR CHAR ( 25 ) NOT NULL , P_BRAND CHAR ( 10 ) NOT NULL , P_TYPE VARCHAR ( 25 ) NOT NULL , P_SIZE INTEGER NOT NULL , P_CONTAINER CHAR ( 10 ) NOT NULL , P_RETAILPRICE DECIMAL ( 15 , 2 ) NOT NULL , P_COMMENT VARCHAR ( 23 ) NOT NULL , PRIMARY KEY ( P_PARTKEY )); CREATE TABLE SUPPLIER ( S_SUPPKEY INTEGER NOT NULL , S_NAME CHAR ( 25 ) NOT NULL , S_ADDRESS VARCHAR ( 40 ) NOT NULL , S_NATIONKEY INTEGER NOT NULL , S_PHONE CHAR ( 15 ) NOT NULL , S_ACCTBAL DECIMAL ( 15 , 2 ) NOT NULL , S_COMMENT VARCHAR ( 101 ) NOT NULL , PRIMARY KEY ( S_SUPPKEY )); CREATE TABLE PARTSUPP ( PS_PARTKEY INTEGER NOT NULL , PS_SUPPKEY INTEGER NOT NULL , PS_AVAILQTY INTEGER NOT NULL , PS_SUPPLYCOST DECIMAL ( 15 , 2 ) NOT NULL , PS_COMMENT VARCHAR ( 199 ) NOT NULL , PRIMARY KEY ( PS_PARTKEY , PS_SUPPKEY )); CREATE TABLE CUSTOMER ( C_CUSTKEY INTEGER NOT NULL , C_NAME VARCHAR ( 25 ) NOT NULL , C_ADDRESS VARCHAR ( 40 ) NOT NULL , C_NATIONKEY INTEGER NOT NULL , C_PHONE CHAR ( 15 ) NOT NULL , C_ACCTBAL DECIMAL ( 15 , 2 ) NOT NULL , C_MKTSEGMENT CHAR ( 10 ) NOT NULL , C_COMMENT VARCHAR ( 117 ) NOT NULL , PRIMARY KEY ( C_CUSTKEY )); CREATE TABLE ORDERS ( O_ORDERKEY BIGINT NOT NULL , O_CUSTKEY INTEGER NOT NULL , O_ORDERSTATUS CHAR ( 1 ) NOT NULL , O_TOTALPRICE DECIMAL ( 15 , 2 ) NOT NULL , O_ORDERDATE DATE NOT NULL , O_ORDERPRIORITY CHAR ( 15 ) NOT NULL , O_CLERK CHAR ( 15 ) NOT NULL , O_SHIPPRIORITY INTEGER NOT NULL , O_COMMENT VARCHAR ( 79 ) NOT NULL , PRIMARY KEY ( O_ORDERKEY )); CREATE TABLE LINEITEM ( L_ORDERKEY BIGINT NOT NULL , L_PARTKEY INTEGER NOT NULL , L_SUPPKEY INTEGER NOT NULL , L_LINENUMBER INTEGER NOT NULL , L_QUANTITY DECIMAL ( 15 , 2 ) NOT NULL , L_EXTENDEDPRICE DECIMAL ( 15 , 2 ) NOT NULL , L_DISCOUNT DECIMAL ( 15 , 2 ) NOT NULL , L_TAX DECIMAL ( 15 , 2 ) NOT NULL , L_RETURNFLAG CHAR ( 1 ) NOT NULL , L_LINESTATUS CHAR ( 1 ) NOT NULL , L_SHIPDATE DATE NOT NULL , L_COMMITDATE DATE NOT NULL , L_RECEIPTDATE DATE NOT NULL , L_SHIPINSTRUCT CHAR ( 25 ) NOT NULL , L_SHIPMODE CHAR ( 10 ) NOT NULL , L_COMMENT VARCHAR ( 44 ) NOT NULL , PRIMARY KEY ( L_ORDERKEY , L_LINENUMBER )); \u628a\u6570\u636e\u5bfc\u5165\u5230\u6570\u636e\u8868\u4e2d\uff1a load data infile '/YOUR_TPCH_DATA_PATH/nation.tbl' into table NATION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/region.tbl' into table REGION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/part.tbl' into table PART FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/supplier.tbl' into table SUPPLIER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/partsupp.tbl' into table PARTSUPP FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/orders.tbl' into table ORDERS FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/customer.tbl' into table CUSTOMER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/lineitem.tbl' into table LINEITEM FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; \u73b0\u5728\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u67e5\u8be2\u3002 Join \u7c7b\u578b \u5185\u8fde\u63a5 \u5185\u8fde\u63a5\u7684\u8fde\u63a5\u7ed3\u679c\u53ea\u8fd4\u56de\u5339\u914d\u8fde\u63a5\u6761\u4ef6\u7684\u884c\u3002 \u8bed\u6cd5 \u56fe\u793a SELECT FROM TableA A INNER JOIN TableB B ON A.Key=B.Key \u5185\u8fde\u63a5\u6709\u4e24\u79cd\u4e66\u5199\u65b9\u5f0f\uff0c\u5728\u7ed3\u679c\u4e0a\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\uff1a mysql > SELECT l_orderkey , SUM ( l_extendedprice * ( 1 - l_discount )) AS revenue , o_orderdate , o_shippriority FROM CUSTOMER , ORDERS , LINEITEM WHERE c_mktsegment = 'BUILDING' AND c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate < DATE '1995-03-15' AND l_shipdate > DATE '1995-03-15' GROUP BY l_orderkey , o_orderdate , o_shippriority ORDER BY revenue DESC , o_orderdate LIMIT 10 ; + ------------+---------------------+-------------+----------------+ | l_orderkey | revenue | o_orderdate | o_shippriority | + ------------+---------------------+-------------+----------------+ | 2456423 | 406181 . 011100000000 | 1995 - 03 - 05 | 0 | | 3459808 | 405838 . 698900000000 | 1995 - 03 - 04 | 0 | | 492164 | 390324 . 061000000000 | 1995 - 02 - 19 | 0 | | 1188320 | 384537 . 935900000000 | 1995 - 03 - 09 | 0 | | 2435712 | 378673 . 055800000000 | 1995 - 02 - 26 | 0 | | 4878020 | 378376 . 795200000000 | 1995 - 03 - 12 | 0 | | 5521732 | 375153 . 921500000000 | 1995 - 03 - 13 | 0 | | 2628192 | 373133 . 309400000000 | 1995 - 02 - 22 | 0 | | 993600 | 371407 . 459500000000 | 1995 - 03 - 05 | 0 | | 2300070 | 367371 . 145200000000 | 1995 - 03 - 13 | 0 | + ------------+---------------------+-------------+----------------+ 10 rows in set ( 0 . 20 sec ) \u5199\u6210 Join \u7684\u5f62\u5f0f\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a mysql > SELECT l_orderkey , SUM ( l_extendedprice * ( 1 - l_discount )) AS revenue , o_orderdate , o_shippriority FROM CUSTOMER join ORDERS on c_custkey = o_custkey join LINEITEM on l_orderkey = o_orderkey WHERE c_mktsegment = 'BUILDING' AND o_orderdate < DATE '1995-03-15' AND l_shipdate > DATE '1995-03-15' GROUP BY l_orderkey , o_orderdate , o_shippriority ORDER BY revenue DESC , o_orderdate LIMIT 10 ; + ------------+---------------------+-------------+----------------+ | l_orderkey | revenue | o_orderdate | o_shippriority | + ------------+---------------------+-------------+----------------+ | 2456423 | 406181 . 011100000000 | 1995 - 03 - 05 | 0 | | 3459808 | 405838 . 698900000000 | 1995 - 03 - 04 | 0 | | 492164 | 390324 . 061000000000 | 1995 - 02 - 19 | 0 | | 1188320 | 384537 . 935900000000 | 1995 - 03 - 09 | 0 | | 2435712 | 378673 . 055800000000 | 1995 - 02 - 26 | 0 | | 4878020 | 378376 . 795200000000 | 1995 - 03 - 12 | 0 | | 5521732 | 375153 . 921500000000 | 1995 - 03 - 13 | 0 | | 2628192 | 373133 . 309400000000 | 1995 - 02 - 22 | 0 | | 993600 | 371407 . 459500000000 | 1995 - 03 - 05 | 0 | | 2300070 | 367371 . 145200000000 | 1995 - 03 - 13 | 0 | + ------------+---------------------+-------------+----------------+ 10 rows in set ( 0 . 20 sec ) \u5916\u8fde\u63a5 \u5916\u8fde\u63a5\u53c8\u5206\u4e3a \u5de6\u8fde\u63a5 \u3001 \u53f3\u8fde\u63a5 \uff0c\u4e24\u8005\u4e4b\u95f4\u662f\u53ef\u4ee5\u5b9e\u73b0\u7b49\u4ef7\u8bed\u4e49\u7684\uff1a LEFT JOIN \u5de6\u5916\u8fde\u63a5\u4f1a\u8fd4\u56de\u5de6\u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\u884c\uff0c\u4ee5\u53ca\u53f3\u8868\u5f53\u4e2d\u80fd\u591f\u5339\u914d\u8fde\u63a5\u6761\u4ef6\u7684\u503c\uff0c\u5982\u679c\u5728\u53f3\u8868\u5f53\u4e2d\u6ca1\u6709\u627e\u5230\u80fd\u591f\u5339\u914d\u7684\u884c\uff0c\u5219\u4f7f\u7528 NULL \u586b\u5145\u3002 \u8bed\u6cd5 \u56fe\u793a SELECT FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key SELECT FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key WHERE B.Key IS NULL RIGHT JOIN \u53f3\u5916\u8fde\u63a5\u8fd4\u56de\u53f3\u8868\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\uff0c\u4ee5\u53ca\u5de6\u8868\u5f53\u4e2d\u80fd\u591f\u5339\u914d\u8fde\u63a5\u6761\u4ef6\u7684\u503c\uff0c\u6ca1\u6709\u5339\u914d\u7684\u503c\u5219\u4f7f\u7528 NULL \u586b\u5145\u3002 \u8bed\u6cd5 \u56fe\u793a SELECT FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key SELECT FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key WHERE A.Key IS NULL \u8bed\u53e5\u793a\u4f8b\u5982\u4e0b\uff1a SELECT c_custkey , COUNT ( o_orderkey ) AS c_count FROM CUSTOMER LEFT OUTER JOIN ORDERS ON ( c_custkey = o_custkey AND o_comment NOT LIKE '%special%requests%' ) GROUP BY c_custkey limit 10 ; + -----------+---------+ | c_custkey | c_count | + -----------+---------+ | 147457 | 16 | | 147458 | 7 | | 147459 | 0 | | 147460 | 16 | | 147461 | 7 | | 147462 | 0 | | 147463 | 14 | | 147464 | 11 | | 147465 | 0 | | 147466 | 17 | + -----------+---------+ 10 rows in set ( 0 . 93 sec ) \u6216\u8005\uff1a SELECT c_custkey , COUNT ( o_orderkey ) AS c_count FROM ORDERS RIGHT OUTER JOIN CUSTOMER ON ( c_custkey = o_custkey AND o_comment NOT LIKE '%special%requests%' ) GROUP BY c_custkey limit 10 ; + -----------+---------+ | c_custkey | c_count | + -----------+---------+ | 147457 | 16 | | 147458 | 7 | | 147459 | 0 | | 147460 | 16 | | 147461 | 7 | | 147462 | 0 | | 147463 | 14 | | 147464 | 11 | | 147465 | 0 | | 147466 | 17 | + -----------+---------+ 10 rows in set ( 0 . 93 sec ) \u5168\u8fde\u63a5 \u5168\u8fde\u63a5\u662f\u5de6\u53f3\u5916\u8fde\u63a5\u7684\u5e76\u96c6\u3002\u8fde\u63a5\u8868\u5305\u542b\u88ab\u8fde\u63a5\u7684\u8868\u7684\u6240\u6709\u8bb0\u5f55\uff0c\u5982\u679c\u7f3a\u5c11\u5339\u914d\u7684\u8bb0\u5f55\uff0c\u5373\u4ee5 NULL \u586b\u5145\u3002 SELECT c_custkey , COUNT ( o_orderkey ) AS c_count FROM CUSTOMER FULL JOIN ORDERS ON ( c_custkey = o_custkey AND o_comment NOT LIKE '%special%requests%' ) GROUP BY c_custkey limit 10 ; + -----------+---------+ | c_custkey | c_count | + -----------+---------+ | 1 | 6 | | 2 | 7 | | 4 | 20 | | 5 | 4 | | 7 | 16 | | 8 | 13 | | 10 | 20 | | 11 | 13 | | 13 | 18 | | 14 | 9 | + -----------+---------+ 10 rows in set ( 0 . 77 sec ) \u5168\u8fde\u63a5\u540c\u6837\u53ef\u4ee5\u901a\u8fc7\u6539\u5199\u7684\u65b9\u5f0f\u83b7\u5f97\u76f8\u540c\u7684\u8bed\u4e49\uff1a SELECT c_custkey , COUNT ( o_orderkey ) AS c_count FROM CUSTOMER LEFT OUTER JOIN ORDERS ON ( c_custkey = o_custkey AND o_comment NOT LIKE '%special%requests%' ) GROUP BY c_custkey UNION SELECT c_custkey , COUNT ( o_orderkey ) AS c_count FROM CUSTOMER LEFT OUTER JOIN ORDERS ON ( c_custkey = o_custkey AND o_comment NOT LIKE '%special%requests%' ) WHERE c_custkey IS NULL GROUP BY c_custkey limit 10 ; + -----------+---------+ | c_custkey | c_count | + -----------+---------+ | 147457 | 16 | | 147458 | 7 | | 147459 | 0 | | 147460 | 16 | | 147461 | 7 | | 147462 | 0 | | 147463 | 14 | | 147464 | 11 | | 147465 | 0 | | 147466 | 17 | + -----------+---------+ 10 rows in set ( 1 . 09 sec ) \u9690\u5f0f\u8fde\u63a5 \u5728 SQL \u8bed\u53e5\u5f53\u4e2d\uff0c\u9664\u4e86\u4f7f\u7528 JOIN \uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 FROM t1, t2 \u5b50\u53e5\u6765\u8fde\u63a5\u4e24\u5f20\u6216\u591a\u5f20\u8868\uff0c\u901a\u8fc7 WHERE t1.id = t2.id \u5b50\u53e5\u6765\u6307\u5b9a\u8fde\u63a5\u7684\u6761\u4ef6\u3002","title":"\u591a\u8868\u8fde\u63a5\u67e5\u8be2"},{"location":"MatrixOne-Cloud/App-Develop/read-data/multitable-join-query/#_1","text":"\u4e00\u4e9b\u4f7f\u7528\u6570\u636e\u5e93\u7684\u573a\u666f\u4e2d\uff0c\u9700\u8981\u4e00\u4e2a\u67e5\u8be2\u5f53\u4e2d\u4f7f\u7528\u5230\u591a\u5f20\u8868\u7684\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 JOIN \u8bed\u53e5\u5c06\u4e24\u5f20\u6216\u591a\u5f20\u8868\u7684\u6570\u636e\u7ec4\u5408\u5728\u4e00\u8d77\u3002","title":"\u591a\u8868\u8fde\u63a5\u67e5\u8be2"},{"location":"MatrixOne-Cloud/App-Develop/read-data/multitable-join-query/#_2","text":"\u4f60\u9700\u8981\u786e\u8ba4\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/read-data/multitable-join-query/#_3","text":"\u4e0b\u8f7d\u6570\u636e\u96c6\uff1a https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/tpch/tpch-1g.zip \u521b\u5efa\u6570\u636e\u5e93\u548c\u6570\u636e\u8868\uff1a create database d1 ; use d1 ; CREATE TABLE NATION ( N_NATIONKEY INTEGER NOT NULL , N_NAME CHAR ( 25 ) NOT NULL , N_REGIONKEY INTEGER NOT NULL , N_COMMENT VARCHAR ( 152 ), PRIMARY KEY ( N_NATIONKEY )); CREATE TABLE REGION ( R_REGIONKEY INTEGER NOT NULL , R_NAME CHAR ( 25 ) NOT NULL , R_COMMENT VARCHAR ( 152 ), PRIMARY KEY ( R_REGIONKEY )); CREATE TABLE PART ( P_PARTKEY INTEGER NOT NULL , P_NAME VARCHAR ( 55 ) NOT NULL , P_MFGR CHAR ( 25 ) NOT NULL , P_BRAND CHAR ( 10 ) NOT NULL , P_TYPE VARCHAR ( 25 ) NOT NULL , P_SIZE INTEGER NOT NULL , P_CONTAINER CHAR ( 10 ) NOT NULL , P_RETAILPRICE DECIMAL ( 15 , 2 ) NOT NULL , P_COMMENT VARCHAR ( 23 ) NOT NULL , PRIMARY KEY ( P_PARTKEY )); CREATE TABLE SUPPLIER ( S_SUPPKEY INTEGER NOT NULL , S_NAME CHAR ( 25 ) NOT NULL , S_ADDRESS VARCHAR ( 40 ) NOT NULL , S_NATIONKEY INTEGER NOT NULL , S_PHONE CHAR ( 15 ) NOT NULL , S_ACCTBAL DECIMAL ( 15 , 2 ) NOT NULL , S_COMMENT VARCHAR ( 101 ) NOT NULL , PRIMARY KEY ( S_SUPPKEY )); CREATE TABLE PARTSUPP ( PS_PARTKEY INTEGER NOT NULL , PS_SUPPKEY INTEGER NOT NULL , PS_AVAILQTY INTEGER NOT NULL , PS_SUPPLYCOST DECIMAL ( 15 , 2 ) NOT NULL , PS_COMMENT VARCHAR ( 199 ) NOT NULL , PRIMARY KEY ( PS_PARTKEY , PS_SUPPKEY )); CREATE TABLE CUSTOMER ( C_CUSTKEY INTEGER NOT NULL , C_NAME VARCHAR ( 25 ) NOT NULL , C_ADDRESS VARCHAR ( 40 ) NOT NULL , C_NATIONKEY INTEGER NOT NULL , C_PHONE CHAR ( 15 ) NOT NULL , C_ACCTBAL DECIMAL ( 15 , 2 ) NOT NULL , C_MKTSEGMENT CHAR ( 10 ) NOT NULL , C_COMMENT VARCHAR ( 117 ) NOT NULL , PRIMARY KEY ( C_CUSTKEY )); CREATE TABLE ORDERS ( O_ORDERKEY BIGINT NOT NULL , O_CUSTKEY INTEGER NOT NULL , O_ORDERSTATUS CHAR ( 1 ) NOT NULL , O_TOTALPRICE DECIMAL ( 15 , 2 ) NOT NULL , O_ORDERDATE DATE NOT NULL , O_ORDERPRIORITY CHAR ( 15 ) NOT NULL , O_CLERK CHAR ( 15 ) NOT NULL , O_SHIPPRIORITY INTEGER NOT NULL , O_COMMENT VARCHAR ( 79 ) NOT NULL , PRIMARY KEY ( O_ORDERKEY )); CREATE TABLE LINEITEM ( L_ORDERKEY BIGINT NOT NULL , L_PARTKEY INTEGER NOT NULL , L_SUPPKEY INTEGER NOT NULL , L_LINENUMBER INTEGER NOT NULL , L_QUANTITY DECIMAL ( 15 , 2 ) NOT NULL , L_EXTENDEDPRICE DECIMAL ( 15 , 2 ) NOT NULL , L_DISCOUNT DECIMAL ( 15 , 2 ) NOT NULL , L_TAX DECIMAL ( 15 , 2 ) NOT NULL , L_RETURNFLAG CHAR ( 1 ) NOT NULL , L_LINESTATUS CHAR ( 1 ) NOT NULL , L_SHIPDATE DATE NOT NULL , L_COMMITDATE DATE NOT NULL , L_RECEIPTDATE DATE NOT NULL , L_SHIPINSTRUCT CHAR ( 25 ) NOT NULL , L_SHIPMODE CHAR ( 10 ) NOT NULL , L_COMMENT VARCHAR ( 44 ) NOT NULL , PRIMARY KEY ( L_ORDERKEY , L_LINENUMBER )); \u628a\u6570\u636e\u5bfc\u5165\u5230\u6570\u636e\u8868\u4e2d\uff1a load data infile '/YOUR_TPCH_DATA_PATH/nation.tbl' into table NATION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/region.tbl' into table REGION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/part.tbl' into table PART FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/supplier.tbl' into table SUPPLIER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/partsupp.tbl' into table PARTSUPP FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/orders.tbl' into table ORDERS FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/customer.tbl' into table CUSTOMER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/lineitem.tbl' into table LINEITEM FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; \u73b0\u5728\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u67e5\u8be2\u3002","title":"\u6570\u636e\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/read-data/multitable-join-query/#join","text":"","title":"Join \u7c7b\u578b"},{"location":"MatrixOne-Cloud/App-Develop/read-data/multitable-join-query/#_4","text":"\u5185\u8fde\u63a5\u7684\u8fde\u63a5\u7ed3\u679c\u53ea\u8fd4\u56de\u5339\u914d\u8fde\u63a5\u6761\u4ef6\u7684\u884c\u3002 \u8bed\u6cd5 \u56fe\u793a SELECT FROM TableA A INNER JOIN TableB B ON A.Key=B.Key \u5185\u8fde\u63a5\u6709\u4e24\u79cd\u4e66\u5199\u65b9\u5f0f\uff0c\u5728\u7ed3\u679c\u4e0a\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\uff1a mysql > SELECT l_orderkey , SUM ( l_extendedprice * ( 1 - l_discount )) AS revenue , o_orderdate , o_shippriority FROM CUSTOMER , ORDERS , LINEITEM WHERE c_mktsegment = 'BUILDING' AND c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate < DATE '1995-03-15' AND l_shipdate > DATE '1995-03-15' GROUP BY l_orderkey , o_orderdate , o_shippriority ORDER BY revenue DESC , o_orderdate LIMIT 10 ; + ------------+---------------------+-------------+----------------+ | l_orderkey | revenue | o_orderdate | o_shippriority | + ------------+---------------------+-------------+----------------+ | 2456423 | 406181 . 011100000000 | 1995 - 03 - 05 | 0 | | 3459808 | 405838 . 698900000000 | 1995 - 03 - 04 | 0 | | 492164 | 390324 . 061000000000 | 1995 - 02 - 19 | 0 | | 1188320 | 384537 . 935900000000 | 1995 - 03 - 09 | 0 | | 2435712 | 378673 . 055800000000 | 1995 - 02 - 26 | 0 | | 4878020 | 378376 . 795200000000 | 1995 - 03 - 12 | 0 | | 5521732 | 375153 . 921500000000 | 1995 - 03 - 13 | 0 | | 2628192 | 373133 . 309400000000 | 1995 - 02 - 22 | 0 | | 993600 | 371407 . 459500000000 | 1995 - 03 - 05 | 0 | | 2300070 | 367371 . 145200000000 | 1995 - 03 - 13 | 0 | + ------------+---------------------+-------------+----------------+ 10 rows in set ( 0 . 20 sec ) \u5199\u6210 Join \u7684\u5f62\u5f0f\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a mysql > SELECT l_orderkey , SUM ( l_extendedprice * ( 1 - l_discount )) AS revenue , o_orderdate , o_shippriority FROM CUSTOMER join ORDERS on c_custkey = o_custkey join LINEITEM on l_orderkey = o_orderkey WHERE c_mktsegment = 'BUILDING' AND o_orderdate < DATE '1995-03-15' AND l_shipdate > DATE '1995-03-15' GROUP BY l_orderkey , o_orderdate , o_shippriority ORDER BY revenue DESC , o_orderdate LIMIT 10 ; + ------------+---------------------+-------------+----------------+ | l_orderkey | revenue | o_orderdate | o_shippriority | + ------------+---------------------+-------------+----------------+ | 2456423 | 406181 . 011100000000 | 1995 - 03 - 05 | 0 | | 3459808 | 405838 . 698900000000 | 1995 - 03 - 04 | 0 | | 492164 | 390324 . 061000000000 | 1995 - 02 - 19 | 0 | | 1188320 | 384537 . 935900000000 | 1995 - 03 - 09 | 0 | | 2435712 | 378673 . 055800000000 | 1995 - 02 - 26 | 0 | | 4878020 | 378376 . 795200000000 | 1995 - 03 - 12 | 0 | | 5521732 | 375153 . 921500000000 | 1995 - 03 - 13 | 0 | | 2628192 | 373133 . 309400000000 | 1995 - 02 - 22 | 0 | | 993600 | 371407 . 459500000000 | 1995 - 03 - 05 | 0 | | 2300070 | 367371 . 145200000000 | 1995 - 03 - 13 | 0 | + ------------+---------------------+-------------+----------------+ 10 rows in set ( 0 . 20 sec )","title":"\u5185\u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/read-data/multitable-join-query/#_5","text":"\u5916\u8fde\u63a5\u53c8\u5206\u4e3a \u5de6\u8fde\u63a5 \u3001 \u53f3\u8fde\u63a5 \uff0c\u4e24\u8005\u4e4b\u95f4\u662f\u53ef\u4ee5\u5b9e\u73b0\u7b49\u4ef7\u8bed\u4e49\u7684\uff1a LEFT JOIN \u5de6\u5916\u8fde\u63a5\u4f1a\u8fd4\u56de\u5de6\u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\u884c\uff0c\u4ee5\u53ca\u53f3\u8868\u5f53\u4e2d\u80fd\u591f\u5339\u914d\u8fde\u63a5\u6761\u4ef6\u7684\u503c\uff0c\u5982\u679c\u5728\u53f3\u8868\u5f53\u4e2d\u6ca1\u6709\u627e\u5230\u80fd\u591f\u5339\u914d\u7684\u884c\uff0c\u5219\u4f7f\u7528 NULL \u586b\u5145\u3002 \u8bed\u6cd5 \u56fe\u793a SELECT FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key SELECT FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key WHERE B.Key IS NULL RIGHT JOIN \u53f3\u5916\u8fde\u63a5\u8fd4\u56de\u53f3\u8868\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\uff0c\u4ee5\u53ca\u5de6\u8868\u5f53\u4e2d\u80fd\u591f\u5339\u914d\u8fde\u63a5\u6761\u4ef6\u7684\u503c\uff0c\u6ca1\u6709\u5339\u914d\u7684\u503c\u5219\u4f7f\u7528 NULL \u586b\u5145\u3002 \u8bed\u6cd5 \u56fe\u793a SELECT FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key SELECT FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key WHERE A.Key IS NULL \u8bed\u53e5\u793a\u4f8b\u5982\u4e0b\uff1a SELECT c_custkey , COUNT ( o_orderkey ) AS c_count FROM CUSTOMER LEFT OUTER JOIN ORDERS ON ( c_custkey = o_custkey AND o_comment NOT LIKE '%special%requests%' ) GROUP BY c_custkey limit 10 ; + -----------+---------+ | c_custkey | c_count | + -----------+---------+ | 147457 | 16 | | 147458 | 7 | | 147459 | 0 | | 147460 | 16 | | 147461 | 7 | | 147462 | 0 | | 147463 | 14 | | 147464 | 11 | | 147465 | 0 | | 147466 | 17 | + -----------+---------+ 10 rows in set ( 0 . 93 sec ) \u6216\u8005\uff1a SELECT c_custkey , COUNT ( o_orderkey ) AS c_count FROM ORDERS RIGHT OUTER JOIN CUSTOMER ON ( c_custkey = o_custkey AND o_comment NOT LIKE '%special%requests%' ) GROUP BY c_custkey limit 10 ; + -----------+---------+ | c_custkey | c_count | + -----------+---------+ | 147457 | 16 | | 147458 | 7 | | 147459 | 0 | | 147460 | 16 | | 147461 | 7 | | 147462 | 0 | | 147463 | 14 | | 147464 | 11 | | 147465 | 0 | | 147466 | 17 | + -----------+---------+ 10 rows in set ( 0 . 93 sec )","title":"\u5916\u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/read-data/multitable-join-query/#_6","text":"\u5168\u8fde\u63a5\u662f\u5de6\u53f3\u5916\u8fde\u63a5\u7684\u5e76\u96c6\u3002\u8fde\u63a5\u8868\u5305\u542b\u88ab\u8fde\u63a5\u7684\u8868\u7684\u6240\u6709\u8bb0\u5f55\uff0c\u5982\u679c\u7f3a\u5c11\u5339\u914d\u7684\u8bb0\u5f55\uff0c\u5373\u4ee5 NULL \u586b\u5145\u3002 SELECT c_custkey , COUNT ( o_orderkey ) AS c_count FROM CUSTOMER FULL JOIN ORDERS ON ( c_custkey = o_custkey AND o_comment NOT LIKE '%special%requests%' ) GROUP BY c_custkey limit 10 ; + -----------+---------+ | c_custkey | c_count | + -----------+---------+ | 1 | 6 | | 2 | 7 | | 4 | 20 | | 5 | 4 | | 7 | 16 | | 8 | 13 | | 10 | 20 | | 11 | 13 | | 13 | 18 | | 14 | 9 | + -----------+---------+ 10 rows in set ( 0 . 77 sec ) \u5168\u8fde\u63a5\u540c\u6837\u53ef\u4ee5\u901a\u8fc7\u6539\u5199\u7684\u65b9\u5f0f\u83b7\u5f97\u76f8\u540c\u7684\u8bed\u4e49\uff1a SELECT c_custkey , COUNT ( o_orderkey ) AS c_count FROM CUSTOMER LEFT OUTER JOIN ORDERS ON ( c_custkey = o_custkey AND o_comment NOT LIKE '%special%requests%' ) GROUP BY c_custkey UNION SELECT c_custkey , COUNT ( o_orderkey ) AS c_count FROM CUSTOMER LEFT OUTER JOIN ORDERS ON ( c_custkey = o_custkey AND o_comment NOT LIKE '%special%requests%' ) WHERE c_custkey IS NULL GROUP BY c_custkey limit 10 ; + -----------+---------+ | c_custkey | c_count | + -----------+---------+ | 147457 | 16 | | 147458 | 7 | | 147459 | 0 | | 147460 | 16 | | 147461 | 7 | | 147462 | 0 | | 147463 | 14 | | 147464 | 11 | | 147465 | 0 | | 147466 | 17 | + -----------+---------+ 10 rows in set ( 1 . 09 sec )","title":"\u5168\u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/read-data/multitable-join-query/#_7","text":"\u5728 SQL \u8bed\u53e5\u5f53\u4e2d\uff0c\u9664\u4e86\u4f7f\u7528 JOIN \uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 FROM t1, t2 \u5b50\u53e5\u6765\u8fde\u63a5\u4e24\u5f20\u6216\u591a\u5f20\u8868\uff0c\u901a\u8fc7 WHERE t1.id = t2.id \u5b50\u53e5\u6765\u6307\u5b9a\u8fde\u63a5\u7684\u6761\u4ef6\u3002","title":"\u9690\u5f0f\u8fde\u63a5"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/","text":"\u5355\u8868\u67e5\u8be2 \u672c\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 SQL \u6765\u5bf9\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u67e5\u8be2\u3002 \u5f00\u59cb\u524d\u51c6\u5907 \u4f60\u9700\u8981\u786e\u8ba4\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u6570\u636e\u51c6\u5907 \u65b0\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a token_demo \u7684\u6570\u636e\u5e93 CREATE DATABASE token_demo ; USE token_demo ; \u65b0\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a token_count \u7684\u8868 CREATE TABLE token_count ( id int , token varchar ( 100 ) DEFAULT '' NOT NULL , count int DEFAULT 0 NOT NULL , qty int , phone char ( 1 ) DEFAULT '' NOT NULL , times datetime DEFAULT '2000-01-01 00:00:00' NOT NULL ); INSERT INTO token_count VALUES ( 21 , 'e45703b64de71482360de8fec94c3ade' , 3 , 7800 , 'n' , '1999-12-23 17:22:21' ); INSERT INTO token_count VALUES ( 22 , 'e45703b64de71482360de8fec94c3ade' , 4 , 5000 , 'y' , '1999-12-23 17:22:21' ); INSERT INTO token_count VALUES ( 18 , '346d1cb63c89285b2351f0ca4de40eda' , 3 , 13200 , 'b' , '1999-12-23 11:58:04' ); INSERT INTO token_count VALUES ( 17 , 'ca6ddeb689e1b48a04146b1b5b6f936a' , 4 , 15000 , 'b' , '1999-12-23 11:36:53' ); INSERT INTO token_count VALUES ( 16 , 'ca6ddeb689e1b48a04146b1b5b6f936a' , 3 , 13200 , 'b' , '1999-12-23 11:36:53' ); INSERT INTO token_count VALUES ( 26 , 'a71250b7ed780f6ef3185bfffe027983' , 5 , 1500 , 'b' , '1999-12-27 09:44:24' ); INSERT INTO token_count VALUES ( 24 , '4d75906f3c37ecff478a1eb56637aa09' , 3 , 5400 , 'y' , '1999-12-23 17:29:12' ); INSERT INTO token_count VALUES ( 25 , '4d75906f3c37ecff478a1eb56637aa09' , 4 , 6500 , 'y' , '1999-12-23 17:29:12' ); INSERT INTO token_count VALUES ( 27 , 'a71250b7ed780f6ef3185bfffe027983' , 3 , 6200 , 'b' , '1999-12-27 09:44:24' ); INSERT INTO token_count VALUES ( 28 , 'a71250b7ed780f6ef3185bfffe027983' , 3 , 5400 , 'y' , '1999-12-27 09:44:36' ); INSERT INTO token_count VALUES ( 29 , 'a71250b7ed780f6ef3185bfffe027983' , 4 , 17700 , 'b' , '1999-12-27 09:45:05' ); \u7b80\u5355\u7684\u67e5\u8be2 \u5728 MySQL Client \u7b49\u5ba2\u6237\u7aef\u8f93\u5165\u5e76\u6267\u884c\u5982\u4e0b SQL \u8bed\u53e5\uff1a mysql > SELECT id , token FROM token_count ; \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a +------+----------------------------------+ | id | token | +------+----------------------------------+ | 21 | e45703b64de71482360de8fec94c3ade | | 22 | e45703b64de71482360de8fec94c3ade | | 18 | 346d1cb63c89285b2351f0ca4de40eda | | 17 | ca6ddeb689e1b48a04146b1b5b6f936a | | 16 | ca6ddeb689e1b48a04146b1b5b6f936a | | 26 | a71250b7ed780f6ef3185bfffe027983 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | | 25 | 4d75906f3c37ecff478a1eb56637aa09 | | 27 | a71250b7ed780f6ef3185bfffe027983 | | 28 | a71250b7ed780f6ef3185bfffe027983 | | 29 | a71250b7ed780f6ef3185bfffe027983 | +------+----------------------------------+ \u5bf9\u7ed3\u679c\u8fdb\u884c\u7b5b\u9009 \u5982\u679c\u4f60\u9700\u8981\u4ece\u8bf8\u591a\u67e5\u8be2\u5f97\u5230\u7684\u7ed3\u679c\u4e2d\u7b5b\u9009\u51fa\u4f60\u9700\u8981\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u901a\u8fc7 WHERE \u8bed\u53e5\u5bf9\u67e5\u8be2\u7684\u7ed3\u679c\u8fdb\u884c\u8fc7\u6ee4\uff0c\u4ece\u800c\u627e\u5230\u60f3\u8981\u67e5\u8be2\u7684\u90e8\u5206\u3002 \u5728 SQL \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 WHERE \u5b50\u53e5\u6dfb\u52a0\u7b5b\u9009\u7684\u6761\u4ef6\uff1a mysql > SELECT * FROM token_count WHERE id = 25 ; \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a +------+----------------------------------+-------+------+-------+---------------------+ | id | token | count | qty | phone | times | +------+----------------------------------+-------+------+-------+---------------------+ | 25 | 4d75906f3c37ecff478a1eb56637aa09 | 4 | 6500 | y | 1999-12-23 17:29:12 | +------+----------------------------------+-------+------+-------+---------------------+ \u5bf9\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f \u4f7f\u7528 ORDER BY \u8bed\u53e5\u53ef\u4ee5\u8ba9\u67e5\u8be2\u7ed3\u679c\u6309\u7167\u671f\u671b\u7684\u65b9\u5f0f\u8fdb\u884c\u6392\u5e8f\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684 SQL \u8bed\u53e5\u5bf9 token_count \u8868\u7684\u6570\u636e\u6309\u7167 times \u5217\u8fdb\u884c\u964d\u5e8f (DESC) \u6392\u5e8f\u3002 mysql > SELECT id , token , times FROM token_count ORDER BY times DESC ; \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a +------+----------------------------------+---------------------+ | id | token | times | +------+----------------------------------+---------------------+ | 29 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:45:05 | | 28 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:36 | | 26 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 27 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | | 25 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | | 21 | e45703b64de71482360de8fec94c3ade | 1999-12-23 17:22:21 | | 22 | e45703b64de71482360de8fec94c3ade | 1999-12-23 17:22:21 | | 18 | 346d1cb63c89285b2351f0ca4de40eda | 1999-12-23 11:58:04 | | 17 | ca6ddeb689e1b48a04146b1b5b6f936a | 1999-12-23 11:36:53 | | 16 | ca6ddeb689e1b48a04146b1b5b6f936a | 1999-12-23 11:36:53 | +------+----------------------------------+---------------------+ \u9650\u5236\u67e5\u8be2\u7ed3\u679c\u6570\u91cf \u5982\u679c\u5e0c\u671b\u53ea\u8fd4\u56de\u90e8\u5206\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528 LIMIT \u8bed\u53e5\u9650\u5236\u67e5\u8be2\u7ed3\u679c\u8fd4\u56de\u7684\u8bb0\u5f55\u6570\u3002 mysql > SELECT id , token , times FROM token_count ORDER BY times DESC LIMIT 5 ; \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a +------+----------------------------------+---------------------+ | id | token | times | +------+----------------------------------+---------------------+ | 29 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:45:05 | | 28 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:36 | | 26 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 27 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | +------+----------------------------------+---------------------+ \u805a\u5408\u67e5\u8be2 \u5982\u679c\u4f60\u60f3\u8981\u5173\u6ce8\u6570\u636e\u6574\u4f53\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 GROUP BY \u8bed\u53e5\u914d\u5408\u805a\u5408\u51fd\u6570\uff0c\u6784\u5efa\u4e00\u4e2a\u805a\u5408\u67e5\u8be2\u6765\u5e2e\u52a9\u4f60\u5bf9\u6570\u636e\u7684\u6574\u4f53\u60c5\u51b5\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u4e86\u89e3\u3002 \u6bd4\u5982\u8bf4\uff0c\u4f60\u53ef\u4ee5\u5c06\u57fa\u672c\u4fe1\u606f\u6309\u7167 id\u3001count\u3001times \u5217\u8fdb\u884c\u5206\u7ec4\uff0c\u7136\u540e\u5206\u522b\u7edf\u8ba1\uff1a mysql > SELECT id , count , times FROM token_count GROUP BY id , count , times ORDER BY times DESC LIMIT 5 ; \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a +------+-------+---------------------+ | id | count | times | +------+-------+---------------------+ | 29 | 4 | 1999-12-27 09:45:05 | | 28 | 3 | 1999-12-27 09:44:36 | | 26 | 5 | 1999-12-27 09:44:24 | | 27 | 3 | 1999-12-27 09:44:24 | | 24 | 3 | 1999-12-23 17:29:12 | +------+-------+---------------------+","title":"\u5355\u8868\u8bfb\u53d6"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/#_1","text":"\u672c\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 SQL \u6765\u5bf9\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u67e5\u8be2\u3002","title":"\u5355\u8868\u67e5\u8be2"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/#_2","text":"\u4f60\u9700\u8981\u786e\u8ba4\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/#_3","text":"","title":"\u6570\u636e\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/#token_demo","text":"CREATE DATABASE token_demo ; USE token_demo ;","title":"\u65b0\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a token_demo \u7684\u6570\u636e\u5e93"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/#token_count","text":"CREATE TABLE token_count ( id int , token varchar ( 100 ) DEFAULT '' NOT NULL , count int DEFAULT 0 NOT NULL , qty int , phone char ( 1 ) DEFAULT '' NOT NULL , times datetime DEFAULT '2000-01-01 00:00:00' NOT NULL ); INSERT INTO token_count VALUES ( 21 , 'e45703b64de71482360de8fec94c3ade' , 3 , 7800 , 'n' , '1999-12-23 17:22:21' ); INSERT INTO token_count VALUES ( 22 , 'e45703b64de71482360de8fec94c3ade' , 4 , 5000 , 'y' , '1999-12-23 17:22:21' ); INSERT INTO token_count VALUES ( 18 , '346d1cb63c89285b2351f0ca4de40eda' , 3 , 13200 , 'b' , '1999-12-23 11:58:04' ); INSERT INTO token_count VALUES ( 17 , 'ca6ddeb689e1b48a04146b1b5b6f936a' , 4 , 15000 , 'b' , '1999-12-23 11:36:53' ); INSERT INTO token_count VALUES ( 16 , 'ca6ddeb689e1b48a04146b1b5b6f936a' , 3 , 13200 , 'b' , '1999-12-23 11:36:53' ); INSERT INTO token_count VALUES ( 26 , 'a71250b7ed780f6ef3185bfffe027983' , 5 , 1500 , 'b' , '1999-12-27 09:44:24' ); INSERT INTO token_count VALUES ( 24 , '4d75906f3c37ecff478a1eb56637aa09' , 3 , 5400 , 'y' , '1999-12-23 17:29:12' ); INSERT INTO token_count VALUES ( 25 , '4d75906f3c37ecff478a1eb56637aa09' , 4 , 6500 , 'y' , '1999-12-23 17:29:12' ); INSERT INTO token_count VALUES ( 27 , 'a71250b7ed780f6ef3185bfffe027983' , 3 , 6200 , 'b' , '1999-12-27 09:44:24' ); INSERT INTO token_count VALUES ( 28 , 'a71250b7ed780f6ef3185bfffe027983' , 3 , 5400 , 'y' , '1999-12-27 09:44:36' ); INSERT INTO token_count VALUES ( 29 , 'a71250b7ed780f6ef3185bfffe027983' , 4 , 17700 , 'b' , '1999-12-27 09:45:05' );","title":"\u65b0\u5efa\u4e00\u4e2a\u547d\u540d\u4e3a token_count \u7684\u8868"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/#_4","text":"\u5728 MySQL Client \u7b49\u5ba2\u6237\u7aef\u8f93\u5165\u5e76\u6267\u884c\u5982\u4e0b SQL \u8bed\u53e5\uff1a mysql > SELECT id , token FROM token_count ; \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a +------+----------------------------------+ | id | token | +------+----------------------------------+ | 21 | e45703b64de71482360de8fec94c3ade | | 22 | e45703b64de71482360de8fec94c3ade | | 18 | 346d1cb63c89285b2351f0ca4de40eda | | 17 | ca6ddeb689e1b48a04146b1b5b6f936a | | 16 | ca6ddeb689e1b48a04146b1b5b6f936a | | 26 | a71250b7ed780f6ef3185bfffe027983 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | | 25 | 4d75906f3c37ecff478a1eb56637aa09 | | 27 | a71250b7ed780f6ef3185bfffe027983 | | 28 | a71250b7ed780f6ef3185bfffe027983 | | 29 | a71250b7ed780f6ef3185bfffe027983 | +------+----------------------------------+","title":"\u7b80\u5355\u7684\u67e5\u8be2"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/#_5","text":"\u5982\u679c\u4f60\u9700\u8981\u4ece\u8bf8\u591a\u67e5\u8be2\u5f97\u5230\u7684\u7ed3\u679c\u4e2d\u7b5b\u9009\u51fa\u4f60\u9700\u8981\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u901a\u8fc7 WHERE \u8bed\u53e5\u5bf9\u67e5\u8be2\u7684\u7ed3\u679c\u8fdb\u884c\u8fc7\u6ee4\uff0c\u4ece\u800c\u627e\u5230\u60f3\u8981\u67e5\u8be2\u7684\u90e8\u5206\u3002 \u5728 SQL \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 WHERE \u5b50\u53e5\u6dfb\u52a0\u7b5b\u9009\u7684\u6761\u4ef6\uff1a mysql > SELECT * FROM token_count WHERE id = 25 ; \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a +------+----------------------------------+-------+------+-------+---------------------+ | id | token | count | qty | phone | times | +------+----------------------------------+-------+------+-------+---------------------+ | 25 | 4d75906f3c37ecff478a1eb56637aa09 | 4 | 6500 | y | 1999-12-23 17:29:12 | +------+----------------------------------+-------+------+-------+---------------------+","title":"\u5bf9\u7ed3\u679c\u8fdb\u884c\u7b5b\u9009"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/#_6","text":"\u4f7f\u7528 ORDER BY \u8bed\u53e5\u53ef\u4ee5\u8ba9\u67e5\u8be2\u7ed3\u679c\u6309\u7167\u671f\u671b\u7684\u65b9\u5f0f\u8fdb\u884c\u6392\u5e8f\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684 SQL \u8bed\u53e5\u5bf9 token_count \u8868\u7684\u6570\u636e\u6309\u7167 times \u5217\u8fdb\u884c\u964d\u5e8f (DESC) \u6392\u5e8f\u3002 mysql > SELECT id , token , times FROM token_count ORDER BY times DESC ; \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a +------+----------------------------------+---------------------+ | id | token | times | +------+----------------------------------+---------------------+ | 29 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:45:05 | | 28 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:36 | | 26 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 27 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | | 25 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | | 21 | e45703b64de71482360de8fec94c3ade | 1999-12-23 17:22:21 | | 22 | e45703b64de71482360de8fec94c3ade | 1999-12-23 17:22:21 | | 18 | 346d1cb63c89285b2351f0ca4de40eda | 1999-12-23 11:58:04 | | 17 | ca6ddeb689e1b48a04146b1b5b6f936a | 1999-12-23 11:36:53 | | 16 | ca6ddeb689e1b48a04146b1b5b6f936a | 1999-12-23 11:36:53 | +------+----------------------------------+---------------------+","title":"\u5bf9\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/#_7","text":"\u5982\u679c\u5e0c\u671b\u53ea\u8fd4\u56de\u90e8\u5206\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528 LIMIT \u8bed\u53e5\u9650\u5236\u67e5\u8be2\u7ed3\u679c\u8fd4\u56de\u7684\u8bb0\u5f55\u6570\u3002 mysql > SELECT id , token , times FROM token_count ORDER BY times DESC LIMIT 5 ; \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a +------+----------------------------------+---------------------+ | id | token | times | +------+----------------------------------+---------------------+ | 29 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:45:05 | | 28 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:36 | | 26 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 27 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | +------+----------------------------------+---------------------+","title":"\u9650\u5236\u67e5\u8be2\u7ed3\u679c\u6570\u91cf"},{"location":"MatrixOne-Cloud/App-Develop/read-data/query-data-single-table/#_8","text":"\u5982\u679c\u4f60\u60f3\u8981\u5173\u6ce8\u6570\u636e\u6574\u4f53\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 GROUP BY \u8bed\u53e5\u914d\u5408\u805a\u5408\u51fd\u6570\uff0c\u6784\u5efa\u4e00\u4e2a\u805a\u5408\u67e5\u8be2\u6765\u5e2e\u52a9\u4f60\u5bf9\u6570\u636e\u7684\u6574\u4f53\u60c5\u51b5\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u4e86\u89e3\u3002 \u6bd4\u5982\u8bf4\uff0c\u4f60\u53ef\u4ee5\u5c06\u57fa\u672c\u4fe1\u606f\u6309\u7167 id\u3001count\u3001times \u5217\u8fdb\u884c\u5206\u7ec4\uff0c\u7136\u540e\u5206\u522b\u7edf\u8ba1\uff1a mysql > SELECT id , count , times FROM token_count GROUP BY id , count , times ORDER BY times DESC LIMIT 5 ; \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a +------+-------+---------------------+ | id | count | times | +------+-------+---------------------+ | 29 | 4 | 1999-12-27 09:45:05 | | 28 | 3 | 1999-12-27 09:44:36 | | 26 | 5 | 1999-12-27 09:44:24 | | 27 | 3 | 1999-12-27 09:44:24 | | 24 | 3 | 1999-12-23 17:29:12 | +------+-------+---------------------+","title":"\u805a\u5408\u67e5\u8be2"},{"location":"MatrixOne-Cloud/App-Develop/read-data/subquery/","text":"\u5b50\u67e5\u8be2 \u672c\u7bc7\u6587\u6863\u5411\u4f60\u4ecb\u7ecd MO Cloud \u7684\u5b50\u67e5\u8be2\u529f\u80fd\u3002 \u6982\u8ff0 \u5b50\u67e5\u8be2\u662f\u5d4c\u5957\u5728\u53e6\u4e00\u4e2a\u67e5\u8be2\u4e2d\u7684 SQL \u8868\u8fbe\u5f0f\uff0c\u501f\u52a9\u5b50\u67e5\u8be2\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u67e5\u8be2\u5f53\u4e2d\u4f7f\u7528\u53e6\u5916\u4e00\u4e2a\u67e5\u8be2\u7684\u67e5\u8be2\u7ed3\u679c\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4ece SQL \u8bed\u53e5\u7ed3\u6784\u4e0a\uff0c\u5b50\u67e5\u8be2\u8bed\u53e5\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u79cd\u5f62\u5f0f\uff1a \u6807\u91cf\u5b50\u67e5\u8be2\uff08Scalar Subquery\uff09\uff0c\u5982 SELECT (SELECT s1 FROM t2) FROM t1 \u3002 \u6d3e\u751f\u8868\uff08Derived Tables\uff09\uff0c\u5982 SELECT t1.s1 FROM (SELECT s1 FROM t2) t1 \u3002 \u5b58\u5728\u6027\u6d4b\u8bd5\uff08Existential Test\uff09\uff0c\u5982 WHERE NOT EXISTS(SELECT ... FROM t2) \uff0c WHERE t1.a IN (SELECT ... FROM t2) \u3002 \u96c6\u5408\u6bd4\u8f83\uff08Quantified Comparison\uff09\uff0c\u5982 WHERE t1.a = ANY(SELECT ... FROM t2) \u3002 \u4f5c\u4e3a\u6bd4\u8f83\u8fd0\u7b97\u7b26\u64cd\u4f5c\u6570\u7684\u5b50\u67e5\u8be2\uff0c\u5982 WHERE t1.a > (SELECT ... FROM t2) \u3002 \u5173\u4e8e\u5b50\u67e5\u8be2 SQL \u8bed\u53e5\uff0c\u53c2\u89c1 SUBQUERY \u3002 \u53e6\u5916\uff0c\u4ece SQL \u8bed\u53e5\u6267\u884c\u60c5\u51b5\u4e0a\uff0c\u5b50\u67e5\u8be2\u8bed\u53e5\u4e00\u822c\u6709\u4ee5\u4e0b\u4e24\u79cd\u5f62\u5f0f\uff1a \u5173\u8054\u5b50\u67e5\u8be2\uff08Correlated Subquery\uff09\uff1a\u6570\u636e\u5e93\u5d4c\u5957\u67e5\u8be2\u4e2d\u5185\u5c42\u67e5\u8be2\u548c\u5916\u5c42\u67e5\u8be2\u4e0d\u76f8\u4e92\u72ec\u7acb\uff0c\u5185\u5c42\u67e5\u8be2\u4e5f\u4f9d\u8d56\u4e8e\u5916\u5c42\u67e5\u8be2\u3002\u6267\u884c\u987a\u5e8f\u4e3a\uff1a \u5148\u4ece\u5916\u5c42\u67e5\u8be2\u4e2d\u67e5\u8be2\u4e2d\u4e00\u6761\u8bb0\u5f55\u3002 \u518d\u5c06\u67e5\u8be2\u5230\u7684\u8bb0\u5f55\u653e\u5230\u5185\u5c42\u67e5\u8be2\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u518d\u653e\u5230\u5916\u5c42\u4e2d\u67e5\u8be2\u3002 \u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4 \u4f8b\u5982\uff1a select * from tableA where tableA.cloumn < (select column from tableB where tableA.id = tableB.id)) \u65e0\u5173\u8054\u5b50\u67e5\u8be2 (Self-contained Subquery)\uff1a\u6570\u636e\u5e93\u5d4c\u5957\u67e5\u8be2\u4e2d\u5185\u5c42\u67e5\u8be2\u662f\u5b8c\u5168\u72ec\u7acb\u4e8e\u5916\u5c42\u67e5\u8be2\u7684\u3002\u6267\u884c\u987a\u5e8f\u4e3a\uff1a \u5148\u6267\u884c\u5185\u5c42\u67e5\u8be2\u3002 \u5f97\u5230\u5185\u5c42\u67e5\u8be2\u7684\u7ed3\u679c\u540e\u5e26\u5165\u5916\u5c42\uff0c\u518d\u6267\u884c\u5916\u5c42\u67e5\u8be2\u3002 \u4f8b\u5982\uff1a select * from tableA where tableA.column = (select tableB.column from tableB ) \u5b50\u67e5\u8be2\u7684\u4f5c\u7528 \uff1a \u5b50\u67e5\u8be2\u5141\u8bb8\u7ed3\u6784\u5316\u7684\u67e5\u8be2\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u4e00\u4e2a\u67e5\u8be2\u8bed\u53e5\u7684\u6bcf\u4e2a\u90e8\u5206\u9694\u5f00\u3002 \u5b50\u67e5\u8be2\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u65b9\u6cd5\u6765\u6267\u884c\u6709\u4e9b\u9700\u8981\u590d\u6742\u7684 JOIN \u548c UNION \u6765\u5b9e\u73b0\u7684\u64cd\u4f5c\u3002 \u6211\u4eec\u5c06\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5e2e\u52a9\u4f60\u7406\u89e3 \u5173\u8054\u5b50\u67e5\u8be2 \u548c \u65e0\u5173\u8054\u5b50\u67e5\u8be2 \u3002 \u793a\u4f8b \u5f00\u59cb\u524d\u51c6\u5907 \u4f60\u9700\u8981\u786e\u8ba4\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u6570\u636e\u51c6\u5907 \u4e0b\u8f7d\u6570\u636e\u96c6\uff1a https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/tpch/tpch-1g.zip \u521b\u5efa\u6570\u636e\u5e93\u548c\u6570\u636e\u8868\uff1a create database d1 ; use d1 ; CREATE TABLE NATION ( N_NATIONKEY INTEGER NOT NULL , N_NAME CHAR ( 25 ) NOT NULL , N_REGIONKEY INTEGER NOT NULL , N_COMMENT VARCHAR ( 152 ), PRIMARY KEY ( N_NATIONKEY )); CREATE TABLE REGION ( R_REGIONKEY INTEGER NOT NULL , R_NAME CHAR ( 25 ) NOT NULL , R_COMMENT VARCHAR ( 152 ), PRIMARY KEY ( R_REGIONKEY )); CREATE TABLE PART ( P_PARTKEY INTEGER NOT NULL , P_NAME VARCHAR ( 55 ) NOT NULL , P_MFGR CHAR ( 25 ) NOT NULL , P_BRAND CHAR ( 10 ) NOT NULL , P_TYPE VARCHAR ( 25 ) NOT NULL , P_SIZE INTEGER NOT NULL , P_CONTAINER CHAR ( 10 ) NOT NULL , P_RETAILPRICE DECIMAL ( 15 , 2 ) NOT NULL , P_COMMENT VARCHAR ( 23 ) NOT NULL , PRIMARY KEY ( P_PARTKEY )); CREATE TABLE SUPPLIER ( S_SUPPKEY INTEGER NOT NULL , S_NAME CHAR ( 25 ) NOT NULL , S_ADDRESS VARCHAR ( 40 ) NOT NULL , S_NATIONKEY INTEGER NOT NULL , S_PHONE CHAR ( 15 ) NOT NULL , S_ACCTBAL DECIMAL ( 15 , 2 ) NOT NULL , S_COMMENT VARCHAR ( 101 ) NOT NULL , PRIMARY KEY ( S_SUPPKEY )); CREATE TABLE PARTSUPP ( PS_PARTKEY INTEGER NOT NULL , PS_SUPPKEY INTEGER NOT NULL , PS_AVAILQTY INTEGER NOT NULL , PS_SUPPLYCOST DECIMAL ( 15 , 2 ) NOT NULL , PS_COMMENT VARCHAR ( 199 ) NOT NULL , PRIMARY KEY ( PS_PARTKEY , PS_SUPPKEY )); CREATE TABLE CUSTOMER ( C_CUSTKEY INTEGER NOT NULL , C_NAME VARCHAR ( 25 ) NOT NULL , C_ADDRESS VARCHAR ( 40 ) NOT NULL , C_NATIONKEY INTEGER NOT NULL , C_PHONE CHAR ( 15 ) NOT NULL , C_ACCTBAL DECIMAL ( 15 , 2 ) NOT NULL , C_MKTSEGMENT CHAR ( 10 ) NOT NULL , C_COMMENT VARCHAR ( 117 ) NOT NULL , PRIMARY KEY ( C_CUSTKEY )); CREATE TABLE ORDERS ( O_ORDERKEY BIGINT NOT NULL , O_CUSTKEY INTEGER NOT NULL , O_ORDERSTATUS CHAR ( 1 ) NOT NULL , O_TOTALPRICE DECIMAL ( 15 , 2 ) NOT NULL , O_ORDERDATE DATE NOT NULL , O_ORDERPRIORITY CHAR ( 15 ) NOT NULL , O_CLERK CHAR ( 15 ) NOT NULL , O_SHIPPRIORITY INTEGER NOT NULL , O_COMMENT VARCHAR ( 79 ) NOT NULL , PRIMARY KEY ( O_ORDERKEY )); CREATE TABLE LINEITEM ( L_ORDERKEY BIGINT NOT NULL , L_PARTKEY INTEGER NOT NULL , L_SUPPKEY INTEGER NOT NULL , L_LINENUMBER INTEGER NOT NULL , L_QUANTITY DECIMAL ( 15 , 2 ) NOT NULL , L_EXTENDEDPRICE DECIMAL ( 15 , 2 ) NOT NULL , L_DISCOUNT DECIMAL ( 15 , 2 ) NOT NULL , L_TAX DECIMAL ( 15 , 2 ) NOT NULL , L_RETURNFLAG CHAR ( 1 ) NOT NULL , L_LINESTATUS CHAR ( 1 ) NOT NULL , L_SHIPDATE DATE NOT NULL , L_COMMITDATE DATE NOT NULL , L_RECEIPTDATE DATE NOT NULL , L_SHIPINSTRUCT CHAR ( 25 ) NOT NULL , L_SHIPMODE CHAR ( 10 ) NOT NULL , L_COMMENT VARCHAR ( 44 ) NOT NULL , PRIMARY KEY ( L_ORDERKEY , L_LINENUMBER )); \u628a\u6570\u636e\u5bfc\u5165\u5230\u6570\u636e\u8868\u4e2d\uff1a load data infile '/YOUR_TPCH_DATA_PATH/nation.tbl' into table NATION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/region.tbl' into table REGION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/part.tbl' into table PART FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/supplier.tbl' into table SUPPLIER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/partsupp.tbl' into table PARTSUPP FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/orders.tbl' into table ORDERS FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/customer.tbl' into table CUSTOMER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/lineitem.tbl' into table LINEITEM FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; \u73b0\u5728\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u67e5\u8be2\u3002 \u65e0\u5173\u8054\u5b50\u67e5\u8be2 \u5bf9\u4e8e\u5c06\u5b50\u67e5\u8be2\u4f5c\u4e3a\u6bd4\u8f83\u8fd0\u7b97\u7b26 ( > / >= / < / <= / = / != ) \u64cd\u4f5c\u6570\u7684\u8fd9\u7c7b\u65e0\u5173\u8054\u5b50\u67e5\u8be2\u800c\u8a00\uff0c\u5185\u5c42\u5b50\u67e5\u8be2\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u67e5\u8be2\uff0cMO Cloud \u5728\u751f\u6210\u6267\u884c\u8ba1\u5212\u9636\u6bb5\u4f1a\u5c06\u5185\u5c42\u5b50\u67e5\u8be2\u6539\u5199\u4e3a\u5e38\u91cf\u3002 mysql > select p . p_name from ( select * from part where p_brand = 'Brand#21' and p_retailprice between 1100 and 1200 ) p , partsupp ps where p . p_partkey = ps . ps_partkey and p . p_name like '%pink%' limit 10 ; \u5728 MO Cloud \u6267\u884c\u4e0a\u8ff0\u67e5\u8be2\u7684\u65f6\u5019\u4f1a\u5148\u6267\u884c\u4e00\u6b21\u5185\u5c42\u5b50\u67e5\u8be2\uff1a mysql > select * from part where p_brand = 'Brand#21' and p_retailprice between 1100 and 1200 \u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a + -----------------------------------+ | p_name | + -----------------------------------+ | olive chartreuse smoke pink tan | | olive chartreuse smoke pink tan | | olive chartreuse smoke pink tan | | olive chartreuse smoke pink tan | | pink sienna dark bisque turquoise | | pink sienna dark bisque turquoise | | pink sienna dark bisque turquoise | | pink sienna dark bisque turquoise | | honeydew orchid cyan magenta pink | | honeydew orchid cyan magenta pink | + -----------------------------------+ 10 rows in set ( 0 . 06 sec ) \u5bf9\u4e8e\u5b58\u5728\u6027\u6d4b\u8bd5\u548c\u96c6\u5408\u6bd4\u8f83\u4e24\u79cd\u60c5\u51b5\u4e0b\u7684\u65e0\u5173\u8054\u5217\u5b50\u67e5\u8be2\uff0cMO Cloud \u4f1a\u5c06\u5176\u8fdb\u884c\u6539\u5199\u548c\u7b49\u4ef7\u66ff\u6362\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6267\u884c\u6027\u80fd\u3002 \u5173\u8054\u5b50\u67e5\u8be2 \u5bf9\u4e8e\u5173\u8054\u5b50\u67e5\u8be2\u800c\u8a00\uff0c\u7531\u4e8e\u5185\u5c42\u7684\u5b50\u67e5\u8be2\u5f15\u7528\u5916\u5c42\u67e5\u8be2\u7684\u5217\uff0c\u5b50\u67e5\u8be2\u9700\u8981\u5bf9\u5916\u5c42\u67e5\u8be2\u5f97\u5230\u7684\u6bcf\u4e00\u884c\u90fd\u6267\u884c\u4e00\u904d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5047\u8bbe\u5916\u5c42\u67e5\u8be2\u5f97\u5230\u4e00\u5343\u4e07\u7684\u7ed3\u679c\uff0c\u90a3\u4e48\u5b50\u67e5\u8be2\u4e5f\u4f1a\u88ab\u6267\u884c\u4e00\u5343\u4e07\u6b21\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u67e5\u8be2\u9700\u8981\u6d88\u8017\u66f4\u591a\u7684\u65f6\u95f4\u548c\u8d44\u6e90\u3002 \u56e0\u6b64\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0cMO Cloud \u4f1a\u5c1d\u8bd5\u5bf9\u5173\u8054\u5b50\u67e5\u8be2\u53bb\u5173\u8054\uff0c\u4ee5\u4ece\u6267\u884c\u8ba1\u5212\u5c42\u9762\u4e0a\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\u3002 mysql > select p_name from part where P_PARTKEY in ( select PS_PARTKEY from PARTSUPP where PS_SUPPLYCOST >= 500 ) and p_name like '%pink%' limit 10 ; MO Cloud \u5728\u5904\u7406\u8be5 SQL \u8bed\u53e5\u662f\u4f1a\u5c06\u5176\u6539\u5199\u4e3a\u7b49\u4ef7\u7684 JOIN \u67e5\u8be2\uff1a select p_name from part join partsupp on P_PARTKEY=PS_PARTKEY where PS_SUPPLYCOST>=500 and p_name like '%pink%' limit 10; \u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a + ------------------------------------+ | p_name | + ------------------------------------+ | papaya red almond hot pink | | turquoise hot smoke green pink | | purple cornsilk red pink floral | | pink cyan purple white burnished | | sandy dark pink indian cream | | powder cornsilk chiffon slate pink | | rosy light black pink orange | | pink white goldenrod ivory steel | | cornsilk dim pink tan sienna | | lavender navajo steel sandy pink | + ------------------------------------+ 10 rows in set ( 0 . 23 sec ) \u4f5c\u4e3a\u6700\u4f73\u5b9e\u8df5\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u5f53\u4e2d\uff0c\u4e3a\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\uff0c\u5c3d\u91cf\u9009\u62e9\u7b49\u4ef7\u8ba1\u7b97\u65b9\u6cd5\u8fdb\u884c\u67e5\u8be2\uff0c\u907f\u514d\u4f7f\u7528\u5173\u8054\u5b50\u67e5\u8be2\u7684\u65b9\u5f0f\u8fdb\u884c\u67e5\u8be2\u3002","title":"\u5b50\u67e5\u8be2"},{"location":"MatrixOne-Cloud/App-Develop/read-data/subquery/#_1","text":"\u672c\u7bc7\u6587\u6863\u5411\u4f60\u4ecb\u7ecd MO Cloud \u7684\u5b50\u67e5\u8be2\u529f\u80fd\u3002","title":"\u5b50\u67e5\u8be2"},{"location":"MatrixOne-Cloud/App-Develop/read-data/subquery/#_2","text":"\u5b50\u67e5\u8be2\u662f\u5d4c\u5957\u5728\u53e6\u4e00\u4e2a\u67e5\u8be2\u4e2d\u7684 SQL \u8868\u8fbe\u5f0f\uff0c\u501f\u52a9\u5b50\u67e5\u8be2\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u67e5\u8be2\u5f53\u4e2d\u4f7f\u7528\u53e6\u5916\u4e00\u4e2a\u67e5\u8be2\u7684\u67e5\u8be2\u7ed3\u679c\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4ece SQL \u8bed\u53e5\u7ed3\u6784\u4e0a\uff0c\u5b50\u67e5\u8be2\u8bed\u53e5\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u79cd\u5f62\u5f0f\uff1a \u6807\u91cf\u5b50\u67e5\u8be2\uff08Scalar Subquery\uff09\uff0c\u5982 SELECT (SELECT s1 FROM t2) FROM t1 \u3002 \u6d3e\u751f\u8868\uff08Derived Tables\uff09\uff0c\u5982 SELECT t1.s1 FROM (SELECT s1 FROM t2) t1 \u3002 \u5b58\u5728\u6027\u6d4b\u8bd5\uff08Existential Test\uff09\uff0c\u5982 WHERE NOT EXISTS(SELECT ... FROM t2) \uff0c WHERE t1.a IN (SELECT ... FROM t2) \u3002 \u96c6\u5408\u6bd4\u8f83\uff08Quantified Comparison\uff09\uff0c\u5982 WHERE t1.a = ANY(SELECT ... FROM t2) \u3002 \u4f5c\u4e3a\u6bd4\u8f83\u8fd0\u7b97\u7b26\u64cd\u4f5c\u6570\u7684\u5b50\u67e5\u8be2\uff0c\u5982 WHERE t1.a > (SELECT ... FROM t2) \u3002 \u5173\u4e8e\u5b50\u67e5\u8be2 SQL \u8bed\u53e5\uff0c\u53c2\u89c1 SUBQUERY \u3002 \u53e6\u5916\uff0c\u4ece SQL \u8bed\u53e5\u6267\u884c\u60c5\u51b5\u4e0a\uff0c\u5b50\u67e5\u8be2\u8bed\u53e5\u4e00\u822c\u6709\u4ee5\u4e0b\u4e24\u79cd\u5f62\u5f0f\uff1a \u5173\u8054\u5b50\u67e5\u8be2\uff08Correlated Subquery\uff09\uff1a\u6570\u636e\u5e93\u5d4c\u5957\u67e5\u8be2\u4e2d\u5185\u5c42\u67e5\u8be2\u548c\u5916\u5c42\u67e5\u8be2\u4e0d\u76f8\u4e92\u72ec\u7acb\uff0c\u5185\u5c42\u67e5\u8be2\u4e5f\u4f9d\u8d56\u4e8e\u5916\u5c42\u67e5\u8be2\u3002\u6267\u884c\u987a\u5e8f\u4e3a\uff1a \u5148\u4ece\u5916\u5c42\u67e5\u8be2\u4e2d\u67e5\u8be2\u4e2d\u4e00\u6761\u8bb0\u5f55\u3002 \u518d\u5c06\u67e5\u8be2\u5230\u7684\u8bb0\u5f55\u653e\u5230\u5185\u5c42\u67e5\u8be2\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u518d\u653e\u5230\u5916\u5c42\u4e2d\u67e5\u8be2\u3002 \u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4 \u4f8b\u5982\uff1a select * from tableA where tableA.cloumn < (select column from tableB where tableA.id = tableB.id)) \u65e0\u5173\u8054\u5b50\u67e5\u8be2 (Self-contained Subquery)\uff1a\u6570\u636e\u5e93\u5d4c\u5957\u67e5\u8be2\u4e2d\u5185\u5c42\u67e5\u8be2\u662f\u5b8c\u5168\u72ec\u7acb\u4e8e\u5916\u5c42\u67e5\u8be2\u7684\u3002\u6267\u884c\u987a\u5e8f\u4e3a\uff1a \u5148\u6267\u884c\u5185\u5c42\u67e5\u8be2\u3002 \u5f97\u5230\u5185\u5c42\u67e5\u8be2\u7684\u7ed3\u679c\u540e\u5e26\u5165\u5916\u5c42\uff0c\u518d\u6267\u884c\u5916\u5c42\u67e5\u8be2\u3002 \u4f8b\u5982\uff1a select * from tableA where tableA.column = (select tableB.column from tableB ) \u5b50\u67e5\u8be2\u7684\u4f5c\u7528 \uff1a \u5b50\u67e5\u8be2\u5141\u8bb8\u7ed3\u6784\u5316\u7684\u67e5\u8be2\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u4e00\u4e2a\u67e5\u8be2\u8bed\u53e5\u7684\u6bcf\u4e2a\u90e8\u5206\u9694\u5f00\u3002 \u5b50\u67e5\u8be2\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u65b9\u6cd5\u6765\u6267\u884c\u6709\u4e9b\u9700\u8981\u590d\u6742\u7684 JOIN \u548c UNION \u6765\u5b9e\u73b0\u7684\u64cd\u4f5c\u3002 \u6211\u4eec\u5c06\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5e2e\u52a9\u4f60\u7406\u89e3 \u5173\u8054\u5b50\u67e5\u8be2 \u548c \u65e0\u5173\u8054\u5b50\u67e5\u8be2 \u3002","title":"\u6982\u8ff0"},{"location":"MatrixOne-Cloud/App-Develop/read-data/subquery/#_3","text":"","title":"\u793a\u4f8b"},{"location":"MatrixOne-Cloud/App-Develop/read-data/subquery/#_4","text":"\u4f60\u9700\u8981\u786e\u8ba4\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/read-data/subquery/#_5","text":"\u4e0b\u8f7d\u6570\u636e\u96c6\uff1a https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/tpch/tpch-1g.zip \u521b\u5efa\u6570\u636e\u5e93\u548c\u6570\u636e\u8868\uff1a create database d1 ; use d1 ; CREATE TABLE NATION ( N_NATIONKEY INTEGER NOT NULL , N_NAME CHAR ( 25 ) NOT NULL , N_REGIONKEY INTEGER NOT NULL , N_COMMENT VARCHAR ( 152 ), PRIMARY KEY ( N_NATIONKEY )); CREATE TABLE REGION ( R_REGIONKEY INTEGER NOT NULL , R_NAME CHAR ( 25 ) NOT NULL , R_COMMENT VARCHAR ( 152 ), PRIMARY KEY ( R_REGIONKEY )); CREATE TABLE PART ( P_PARTKEY INTEGER NOT NULL , P_NAME VARCHAR ( 55 ) NOT NULL , P_MFGR CHAR ( 25 ) NOT NULL , P_BRAND CHAR ( 10 ) NOT NULL , P_TYPE VARCHAR ( 25 ) NOT NULL , P_SIZE INTEGER NOT NULL , P_CONTAINER CHAR ( 10 ) NOT NULL , P_RETAILPRICE DECIMAL ( 15 , 2 ) NOT NULL , P_COMMENT VARCHAR ( 23 ) NOT NULL , PRIMARY KEY ( P_PARTKEY )); CREATE TABLE SUPPLIER ( S_SUPPKEY INTEGER NOT NULL , S_NAME CHAR ( 25 ) NOT NULL , S_ADDRESS VARCHAR ( 40 ) NOT NULL , S_NATIONKEY INTEGER NOT NULL , S_PHONE CHAR ( 15 ) NOT NULL , S_ACCTBAL DECIMAL ( 15 , 2 ) NOT NULL , S_COMMENT VARCHAR ( 101 ) NOT NULL , PRIMARY KEY ( S_SUPPKEY )); CREATE TABLE PARTSUPP ( PS_PARTKEY INTEGER NOT NULL , PS_SUPPKEY INTEGER NOT NULL , PS_AVAILQTY INTEGER NOT NULL , PS_SUPPLYCOST DECIMAL ( 15 , 2 ) NOT NULL , PS_COMMENT VARCHAR ( 199 ) NOT NULL , PRIMARY KEY ( PS_PARTKEY , PS_SUPPKEY )); CREATE TABLE CUSTOMER ( C_CUSTKEY INTEGER NOT NULL , C_NAME VARCHAR ( 25 ) NOT NULL , C_ADDRESS VARCHAR ( 40 ) NOT NULL , C_NATIONKEY INTEGER NOT NULL , C_PHONE CHAR ( 15 ) NOT NULL , C_ACCTBAL DECIMAL ( 15 , 2 ) NOT NULL , C_MKTSEGMENT CHAR ( 10 ) NOT NULL , C_COMMENT VARCHAR ( 117 ) NOT NULL , PRIMARY KEY ( C_CUSTKEY )); CREATE TABLE ORDERS ( O_ORDERKEY BIGINT NOT NULL , O_CUSTKEY INTEGER NOT NULL , O_ORDERSTATUS CHAR ( 1 ) NOT NULL , O_TOTALPRICE DECIMAL ( 15 , 2 ) NOT NULL , O_ORDERDATE DATE NOT NULL , O_ORDERPRIORITY CHAR ( 15 ) NOT NULL , O_CLERK CHAR ( 15 ) NOT NULL , O_SHIPPRIORITY INTEGER NOT NULL , O_COMMENT VARCHAR ( 79 ) NOT NULL , PRIMARY KEY ( O_ORDERKEY )); CREATE TABLE LINEITEM ( L_ORDERKEY BIGINT NOT NULL , L_PARTKEY INTEGER NOT NULL , L_SUPPKEY INTEGER NOT NULL , L_LINENUMBER INTEGER NOT NULL , L_QUANTITY DECIMAL ( 15 , 2 ) NOT NULL , L_EXTENDEDPRICE DECIMAL ( 15 , 2 ) NOT NULL , L_DISCOUNT DECIMAL ( 15 , 2 ) NOT NULL , L_TAX DECIMAL ( 15 , 2 ) NOT NULL , L_RETURNFLAG CHAR ( 1 ) NOT NULL , L_LINESTATUS CHAR ( 1 ) NOT NULL , L_SHIPDATE DATE NOT NULL , L_COMMITDATE DATE NOT NULL , L_RECEIPTDATE DATE NOT NULL , L_SHIPINSTRUCT CHAR ( 25 ) NOT NULL , L_SHIPMODE CHAR ( 10 ) NOT NULL , L_COMMENT VARCHAR ( 44 ) NOT NULL , PRIMARY KEY ( L_ORDERKEY , L_LINENUMBER )); \u628a\u6570\u636e\u5bfc\u5165\u5230\u6570\u636e\u8868\u4e2d\uff1a load data infile '/YOUR_TPCH_DATA_PATH/nation.tbl' into table NATION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/region.tbl' into table REGION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/part.tbl' into table PART FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/supplier.tbl' into table SUPPLIER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/partsupp.tbl' into table PARTSUPP FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/orders.tbl' into table ORDERS FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/customer.tbl' into table CUSTOMER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; load data infile '/YOUR_TPCH_DATA_PATH/lineitem.tbl' into table LINEITEM FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; \u73b0\u5728\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u67e5\u8be2\u3002","title":"\u6570\u636e\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/read-data/subquery/#_6","text":"\u5bf9\u4e8e\u5c06\u5b50\u67e5\u8be2\u4f5c\u4e3a\u6bd4\u8f83\u8fd0\u7b97\u7b26 ( > / >= / < / <= / = / != ) \u64cd\u4f5c\u6570\u7684\u8fd9\u7c7b\u65e0\u5173\u8054\u5b50\u67e5\u8be2\u800c\u8a00\uff0c\u5185\u5c42\u5b50\u67e5\u8be2\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u67e5\u8be2\uff0cMO Cloud \u5728\u751f\u6210\u6267\u884c\u8ba1\u5212\u9636\u6bb5\u4f1a\u5c06\u5185\u5c42\u5b50\u67e5\u8be2\u6539\u5199\u4e3a\u5e38\u91cf\u3002 mysql > select p . p_name from ( select * from part where p_brand = 'Brand#21' and p_retailprice between 1100 and 1200 ) p , partsupp ps where p . p_partkey = ps . ps_partkey and p . p_name like '%pink%' limit 10 ; \u5728 MO Cloud \u6267\u884c\u4e0a\u8ff0\u67e5\u8be2\u7684\u65f6\u5019\u4f1a\u5148\u6267\u884c\u4e00\u6b21\u5185\u5c42\u5b50\u67e5\u8be2\uff1a mysql > select * from part where p_brand = 'Brand#21' and p_retailprice between 1100 and 1200 \u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a + -----------------------------------+ | p_name | + -----------------------------------+ | olive chartreuse smoke pink tan | | olive chartreuse smoke pink tan | | olive chartreuse smoke pink tan | | olive chartreuse smoke pink tan | | pink sienna dark bisque turquoise | | pink sienna dark bisque turquoise | | pink sienna dark bisque turquoise | | pink sienna dark bisque turquoise | | honeydew orchid cyan magenta pink | | honeydew orchid cyan magenta pink | + -----------------------------------+ 10 rows in set ( 0 . 06 sec ) \u5bf9\u4e8e\u5b58\u5728\u6027\u6d4b\u8bd5\u548c\u96c6\u5408\u6bd4\u8f83\u4e24\u79cd\u60c5\u51b5\u4e0b\u7684\u65e0\u5173\u8054\u5217\u5b50\u67e5\u8be2\uff0cMO Cloud \u4f1a\u5c06\u5176\u8fdb\u884c\u6539\u5199\u548c\u7b49\u4ef7\u66ff\u6362\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6267\u884c\u6027\u80fd\u3002","title":"\u65e0\u5173\u8054\u5b50\u67e5\u8be2"},{"location":"MatrixOne-Cloud/App-Develop/read-data/subquery/#_7","text":"\u5bf9\u4e8e\u5173\u8054\u5b50\u67e5\u8be2\u800c\u8a00\uff0c\u7531\u4e8e\u5185\u5c42\u7684\u5b50\u67e5\u8be2\u5f15\u7528\u5916\u5c42\u67e5\u8be2\u7684\u5217\uff0c\u5b50\u67e5\u8be2\u9700\u8981\u5bf9\u5916\u5c42\u67e5\u8be2\u5f97\u5230\u7684\u6bcf\u4e00\u884c\u90fd\u6267\u884c\u4e00\u904d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5047\u8bbe\u5916\u5c42\u67e5\u8be2\u5f97\u5230\u4e00\u5343\u4e07\u7684\u7ed3\u679c\uff0c\u90a3\u4e48\u5b50\u67e5\u8be2\u4e5f\u4f1a\u88ab\u6267\u884c\u4e00\u5343\u4e07\u6b21\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u67e5\u8be2\u9700\u8981\u6d88\u8017\u66f4\u591a\u7684\u65f6\u95f4\u548c\u8d44\u6e90\u3002 \u56e0\u6b64\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0cMO Cloud \u4f1a\u5c1d\u8bd5\u5bf9\u5173\u8054\u5b50\u67e5\u8be2\u53bb\u5173\u8054\uff0c\u4ee5\u4ece\u6267\u884c\u8ba1\u5212\u5c42\u9762\u4e0a\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\u3002 mysql > select p_name from part where P_PARTKEY in ( select PS_PARTKEY from PARTSUPP where PS_SUPPLYCOST >= 500 ) and p_name like '%pink%' limit 10 ; MO Cloud \u5728\u5904\u7406\u8be5 SQL \u8bed\u53e5\u662f\u4f1a\u5c06\u5176\u6539\u5199\u4e3a\u7b49\u4ef7\u7684 JOIN \u67e5\u8be2\uff1a select p_name from part join partsupp on P_PARTKEY=PS_PARTKEY where PS_SUPPLYCOST>=500 and p_name like '%pink%' limit 10; \u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a + ------------------------------------+ | p_name | + ------------------------------------+ | papaya red almond hot pink | | turquoise hot smoke green pink | | purple cornsilk red pink floral | | pink cyan purple white burnished | | sandy dark pink indian cream | | powder cornsilk chiffon slate pink | | rosy light black pink orange | | pink white goldenrod ivory steel | | cornsilk dim pink tan sienna | | lavender navajo steel sandy pink | + ------------------------------------+ 10 rows in set ( 0 . 23 sec ) \u4f5c\u4e3a\u6700\u4f73\u5b9e\u8df5\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u5f53\u4e2d\uff0c\u4e3a\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\uff0c\u5c3d\u91cf\u9009\u62e9\u7b49\u4ef7\u8ba1\u7b97\u65b9\u6cd5\u8fdb\u884c\u67e5\u8be2\uff0c\u907f\u514d\u4f7f\u7528\u5173\u8054\u5b50\u67e5\u8be2\u7684\u65b9\u5f0f\u8fdb\u884c\u67e5\u8be2\u3002","title":"\u5173\u8054\u5b50\u67e5\u8be2"},{"location":"MatrixOne-Cloud/App-Develop/read-data/views/","text":"\u89c6\u56fe \u672c\u7bc7\u6587\u6863\u5411\u4f60\u4ecb\u7ecd MO Cloud \u7684\u89c6\u56fe\u529f\u80fd\u3002 \u6982\u8ff0 \u89c6\u56fe\u4f5c\u4e3a\u4e00\u4e2a\u865a\u62df\u8868\uff0c\u8fdb\u884c\u5b58\u50a8\u67e5\u8be2\uff0c\u5728\u8c03\u7528\u65f6\u4ea7\u751f\u7ed3\u679c\u96c6\u3002 \u89c6\u56fe\u7684\u4f5c\u7528 \uff1a \u7b80\u5316\u7528\u6237\u64cd\u4f5c\uff1a\u89c6\u56fe\u673a\u5236\u4f7f\u7528\u6237\u53ef\u4ee5\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u6240\u5173\u5fc3\u5730\u6570\u636e\u4e0a\u3002\u5982\u679c\u8fd9\u4e9b\u6570\u636e\u4e0d\u662f\u76f4\u63a5\u6765\u81ea\u57fa\u672c\u8868\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u89c6\u56fe\uff0c\u4f7f\u6570\u636e\u5e93\u770b\u8d77\u6765\u7ed3\u6784\u7b80\u5355\u3001\u6e05\u6670\uff0c\u5e76\u4e14\u53ef\u4ee5\u7b80\u5316\u7528\u6237\u7684\u7684\u6570\u636e\u67e5\u8be2\u64cd\u4f5c\u3002 \u4ee5\u591a\u79cd\u89d2\u5ea6\u770b\u5f85\u540c\u4e00\u6570\u636e\uff1a\u89c6\u56fe\u673a\u5236\u80fd\u4f7f\u4e0d\u540c\u7684\u7528\u6237\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u770b\u5f85\u540c\u4e00\u6570\u636e\uff0c\u5f53\u8bb8\u591a\u4e0d\u540c\u79cd\u7c7b\u7684\u7528\u6237\u5171\u4eab\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u65f6\uff0c\u8fd9\u79cd\u7075\u6d3b\u6027\u662f\u975e\u5e38\u5fc5\u8981\u7684\u3002 \u5bf9\u91cd\u6784\u6570\u636e\u5e93\u63d0\u4f9b\u4e86\u4e00\u5b9a\u7a0b\u5ea6\u7684\u903b\u8f91\u72ec\u7acb\u6027\uff1a\u6570\u636e\u7684\u7269\u7406\u72ec\u7acb\u6027\u662f\u6307\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f9d\u8d56\u4e8e\u6570\u636e\u5e93\u7684\u7269\u7406\u7ed3\u6784\u3002\u6570\u636e\u7684\u903b\u8f91\u72ec\u7acb\u6027\u662f\u6307\u5f53\u6570\u636e\u5e93\u91cd\u6784\u9020\u65f6\uff0c\u5982\u589e\u52a0\u65b0\u7684\u5173\u7cfb\u6216\u5bf9\u539f\u6709\u7684\u5173\u7cfb\u589e\u52a0\u65b0\u7684\u5b57\u6bb5\uff0c\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u53d7\u5f71\u54cd\u3002\u5c42\u6b21\u6570\u636e\u5e93\u548c\u7f51\u72b6\u6570\u636e\u5e93\u4e00\u822c\u80fd\u8f83\u597d\u5730\u652f\u6301\u6570\u636e\u7684\u7269\u7406\u72ec\u7acb\u6027\uff0c\u800c\u5bf9\u4e8e\u903b\u8f91\u72ec\u7acb\u6027\u5219\u4e0d\u80fd\u5b8c\u5168\u7684\u652f\u6301\u3002 \u5f00\u59cb\u524d\u51c6\u5907 \u4f60\u9700\u8981\u786e\u8ba4\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002 \u6570\u636e\u51c6\u5907 \u65b0\u5efa\u4e24\u5f20\u8868\uff0c\u65b9\u4fbf\u540e\u7eed\u4e3a\u4f7f\u7528\u89c6\u56fe\u505a\u51c6\u5907\uff1a CREATE TABLE t00 ( a INTEGER ); INSERT INTO t00 VALUES ( 1 ),( 2 ); CREATE TABLE t01 ( a INTEGER ); INSERT INTO t01 VALUES ( 1 ); \u53ef\u4ee5\u67e5\u770b\u4e00\u4e0b\u8868 t00 \u7684\u7ed3\u6784\uff1a mysql > select * from t00 ; + ------+ | a | + ------+ | 1 | | 2 | + ------+ \u53ef\u4ee5\u67e5\u770b\u4e00\u4e0b\u8868 t01 \u7684\u7ed3\u6784\uff1a > select * from t01 ; + ------+ | a | MO Cloud + ------+ | 1 | + ------+ \u521b\u5efa\u89c6\u56fe \u4f60\u53ef\u4ee5\u901a\u8fc7 CREATE VIEW \u8bed\u53e5\u6765\u5c06\u67d0\u4e2a\u8f83\u4e3a\u590d\u6742\u7684\u67e5\u8be2\u5b9a\u4e49\u4e3a\u89c6\u56fe\uff0c\u5176\u8bed\u6cd5\u5982\u4e0b\uff1a CREATE VIEW view_name AS query ; \u521b\u5efa\u7684\u89c6\u56fe\u540d\u79f0\u4e0d\u80fd\u4e0e\u5df2\u6709\u7684\u89c6\u56fe\u6216\u8868\u91cd\u540d\u3002 \u793a\u4f8b\u5982\u4e0b\uff1a CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ); Query OK , 0 rows affected ( 0 . 02 sec ) \u67e5\u8be2\u89c6\u56fe \u89c6\u56fe\u521b\u5efa\u5b8c\u6210\u540e\uff0c\u4fbf\u53ef\u4ee5\u4f7f\u7528 SELECT \u8bed\u53e5\u50cf\u67e5\u8be2\u4e00\u822c\u6570\u636e\u8868\u4e00\u6837\u67e5\u8be2\u89c6\u56fe\u3002 mysql > SELECT * FROM v0 ; + ------+------+ | a | b | + ------+------+ | 1 | 1 | | 2 | NULL | + ------+------+ \u83b7\u53d6\u89c6\u56fe\u76f8\u5173\u4fe1\u606f \u4f7f\u7528 SHOW CREATE TABLE|VIEW view_name \u8bed\u53e5\uff1a mysql > SHOW CREATE VIEW v0 ; + ------+----------------------------------------------------------------------------+ | View | Create View | + ------+----------------------------------------------------------------------------+ | v0 | CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ) | + ------+----------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) \u5220\u9664\u89c6\u56fe \u901a\u8fc7 DROP VIEW view_name; \u8bed\u53e5\u53ef\u4ee5\u5220\u9664\u5df2\u7ecf\u521b\u5efa\u7684\u89c6\u56fe\u3002 mysql > DROP VIEW v0 ;","title":"\u89c6\u56fe"},{"location":"MatrixOne-Cloud/App-Develop/read-data/views/#_1","text":"\u672c\u7bc7\u6587\u6863\u5411\u4f60\u4ecb\u7ecd MO Cloud \u7684\u89c6\u56fe\u529f\u80fd\u3002","title":"\u89c6\u56fe"},{"location":"MatrixOne-Cloud/App-Develop/read-data/views/#_2","text":"\u89c6\u56fe\u4f5c\u4e3a\u4e00\u4e2a\u865a\u62df\u8868\uff0c\u8fdb\u884c\u5b58\u50a8\u67e5\u8be2\uff0c\u5728\u8c03\u7528\u65f6\u4ea7\u751f\u7ed3\u679c\u96c6\u3002 \u89c6\u56fe\u7684\u4f5c\u7528 \uff1a \u7b80\u5316\u7528\u6237\u64cd\u4f5c\uff1a\u89c6\u56fe\u673a\u5236\u4f7f\u7528\u6237\u53ef\u4ee5\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u6240\u5173\u5fc3\u5730\u6570\u636e\u4e0a\u3002\u5982\u679c\u8fd9\u4e9b\u6570\u636e\u4e0d\u662f\u76f4\u63a5\u6765\u81ea\u57fa\u672c\u8868\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u89c6\u56fe\uff0c\u4f7f\u6570\u636e\u5e93\u770b\u8d77\u6765\u7ed3\u6784\u7b80\u5355\u3001\u6e05\u6670\uff0c\u5e76\u4e14\u53ef\u4ee5\u7b80\u5316\u7528\u6237\u7684\u7684\u6570\u636e\u67e5\u8be2\u64cd\u4f5c\u3002 \u4ee5\u591a\u79cd\u89d2\u5ea6\u770b\u5f85\u540c\u4e00\u6570\u636e\uff1a\u89c6\u56fe\u673a\u5236\u80fd\u4f7f\u4e0d\u540c\u7684\u7528\u6237\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u770b\u5f85\u540c\u4e00\u6570\u636e\uff0c\u5f53\u8bb8\u591a\u4e0d\u540c\u79cd\u7c7b\u7684\u7528\u6237\u5171\u4eab\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u65f6\uff0c\u8fd9\u79cd\u7075\u6d3b\u6027\u662f\u975e\u5e38\u5fc5\u8981\u7684\u3002 \u5bf9\u91cd\u6784\u6570\u636e\u5e93\u63d0\u4f9b\u4e86\u4e00\u5b9a\u7a0b\u5ea6\u7684\u903b\u8f91\u72ec\u7acb\u6027\uff1a\u6570\u636e\u7684\u7269\u7406\u72ec\u7acb\u6027\u662f\u6307\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f9d\u8d56\u4e8e\u6570\u636e\u5e93\u7684\u7269\u7406\u7ed3\u6784\u3002\u6570\u636e\u7684\u903b\u8f91\u72ec\u7acb\u6027\u662f\u6307\u5f53\u6570\u636e\u5e93\u91cd\u6784\u9020\u65f6\uff0c\u5982\u589e\u52a0\u65b0\u7684\u5173\u7cfb\u6216\u5bf9\u539f\u6709\u7684\u5173\u7cfb\u589e\u52a0\u65b0\u7684\u5b57\u6bb5\uff0c\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u53d7\u5f71\u54cd\u3002\u5c42\u6b21\u6570\u636e\u5e93\u548c\u7f51\u72b6\u6570\u636e\u5e93\u4e00\u822c\u80fd\u8f83\u597d\u5730\u652f\u6301\u6570\u636e\u7684\u7269\u7406\u72ec\u7acb\u6027\uff0c\u800c\u5bf9\u4e8e\u903b\u8f91\u72ec\u7acb\u6027\u5219\u4e0d\u80fd\u5b8c\u5168\u7684\u652f\u6301\u3002","title":"\u6982\u8ff0"},{"location":"MatrixOne-Cloud/App-Develop/read-data/views/#_3","text":"\u4f60\u9700\u8981\u786e\u8ba4\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u4efb\u52a1\uff1a \u5df2\u5b8c\u6210 \u521b\u5efa\u5b9e\u4f8b \u3002","title":"\u5f00\u59cb\u524d\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/read-data/views/#_4","text":"\u65b0\u5efa\u4e24\u5f20\u8868\uff0c\u65b9\u4fbf\u540e\u7eed\u4e3a\u4f7f\u7528\u89c6\u56fe\u505a\u51c6\u5907\uff1a CREATE TABLE t00 ( a INTEGER ); INSERT INTO t00 VALUES ( 1 ),( 2 ); CREATE TABLE t01 ( a INTEGER ); INSERT INTO t01 VALUES ( 1 ); \u53ef\u4ee5\u67e5\u770b\u4e00\u4e0b\u8868 t00 \u7684\u7ed3\u6784\uff1a mysql > select * from t00 ; + ------+ | a | + ------+ | 1 | | 2 | + ------+ \u53ef\u4ee5\u67e5\u770b\u4e00\u4e0b\u8868 t01 \u7684\u7ed3\u6784\uff1a > select * from t01 ; + ------+ | a | MO Cloud + ------+ | 1 | + ------+","title":"\u6570\u636e\u51c6\u5907"},{"location":"MatrixOne-Cloud/App-Develop/read-data/views/#_5","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7 CREATE VIEW \u8bed\u53e5\u6765\u5c06\u67d0\u4e2a\u8f83\u4e3a\u590d\u6742\u7684\u67e5\u8be2\u5b9a\u4e49\u4e3a\u89c6\u56fe\uff0c\u5176\u8bed\u6cd5\u5982\u4e0b\uff1a CREATE VIEW view_name AS query ; \u521b\u5efa\u7684\u89c6\u56fe\u540d\u79f0\u4e0d\u80fd\u4e0e\u5df2\u6709\u7684\u89c6\u56fe\u6216\u8868\u91cd\u540d\u3002 \u793a\u4f8b\u5982\u4e0b\uff1a CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ); Query OK , 0 rows affected ( 0 . 02 sec )","title":"\u521b\u5efa\u89c6\u56fe"},{"location":"MatrixOne-Cloud/App-Develop/read-data/views/#_6","text":"\u89c6\u56fe\u521b\u5efa\u5b8c\u6210\u540e\uff0c\u4fbf\u53ef\u4ee5\u4f7f\u7528 SELECT \u8bed\u53e5\u50cf\u67e5\u8be2\u4e00\u822c\u6570\u636e\u8868\u4e00\u6837\u67e5\u8be2\u89c6\u56fe\u3002 mysql > SELECT * FROM v0 ; + ------+------+ | a | b | + ------+------+ | 1 | 1 | | 2 | NULL | + ------+------+","title":"\u67e5\u8be2\u89c6\u56fe"},{"location":"MatrixOne-Cloud/App-Develop/read-data/views/#_7","text":"\u4f7f\u7528 SHOW CREATE TABLE|VIEW view_name \u8bed\u53e5\uff1a mysql > SHOW CREATE VIEW v0 ; + ------+----------------------------------------------------------------------------+ | View | Create View | + ------+----------------------------------------------------------------------------+ | v0 | CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ) | + ------+----------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec )","title":"\u83b7\u53d6\u89c6\u56fe\u76f8\u5173\u4fe1\u606f"},{"location":"MatrixOne-Cloud/App-Develop/read-data/views/#_8","text":"\u901a\u8fc7 DROP VIEW view_name; \u8bed\u53e5\u53ef\u4ee5\u5220\u9664\u5df2\u7ecf\u521b\u5efa\u7684\u89c6\u56fe\u3002 mysql > DROP VIEW v0 ;","title":"\u5220\u9664\u89c6\u56fe"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/","text":"\u5feb\u901f\u521b\u5efa MatrixOne Cloud\uff08MO Cloud\uff09\u5b9e\u4f8b \u5728\u672c\u7bc7\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u5c06\u6307\u5bfc\u60a8\u5feb\u901f\u521b\u5efa\u548c\u4f7f\u7528 MatrixOne Cloud (MO Cloud) \u5b9e\u4f8b\u3002 \u7b2c\u4e00\u6b65\uff1a\u521b\u5efa MO Cloud \u8d26\u6237 1. \u7533\u8bf7\u8bd5\u7528 MO Cloud \u5982\u679c\u60a8\u60f3\u5c1d\u8bd5 MO Cloud 1.0 \u7248\u672c\u524d\u7684\u5185\u6d4b\u7248\u672c\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u7533\u8bf7\u3002 \u8bbf\u95ee MO Cloud \u8bd5\u7528\u7533\u8bf7\u9875\u9762 \u3002 \u586b\u5199\u60a8\u7684\u7533\u8bf7\u4fe1\u606f\uff0c\u5e76\u63d0\u4ea4\u7533\u8bf7\u3002\u6211\u4eec\u4f1a\u5c3d\u5feb\u5ba1\u6838\u60a8\u7684\u7533\u8bf7\u3002 \u6ce8\u610f\uff1a \u7533\u8bf7\u8bd5\u7528\u65f6\u586b\u5199\u7684\u90ae\u7bb1\u5c06\u6210\u4e3a\u60a8\u7684 MO Cloud \u8d26\u6237\u90ae\u7bb1\u3002 \u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u6ce8\u518c MO Cloud \u8d26\u6237\uff1a \u7535\u5b50\u90ae\u7bb1\u8d26\u6237 Github \u8d26\u6237 Google \u8d26\u6237 \u8bf7\u6ce8\u610f\uff0c\u5f53\u4f7f\u7528\u7b2c\u4e09\u65b9\u8d26\u6237\u6ce8\u518c\u65f6\uff0cMO Cloud \u5c06\u83b7\u53d6\u5e76\u4f7f\u7528\u60a8\u8d26\u6237\u4e2d\u7684\u4e3b\u8981\u90ae\u7bb1\u4f5c\u4e3a\u5e73\u53f0\u6ce8\u518c\u90ae\u7bb1\u3002\u56e0\u6b64\uff0cMO Cloud \u4e0d\u652f\u6301\u4f7f\u7528\u76f8\u540c\u90ae\u7bb1\u8fdb\u884c\u591a\u4e2a\u7b2c\u4e09\u65b9\u8d26\u6237\u6216\u7535\u5b50\u90ae\u7bb1\u7684\u91cd\u590d\u6ce8\u518c\u3002 2. \u6ce8\u518c MO Cloud \u8d26\u6237 \u4e00\u65e6\u60a8\u7684\u8bd5\u7528\u7533\u8bf7\u83b7\u5f97\u6279\u51c6\uff0c\u6211\u4eec\u4f1a\u53d1\u9001\u4e00\u5c01\u6ce8\u518c\u90ae\u4ef6\u5230\u60a8\u63d0\u4f9b\u7684\u90ae\u7bb1\u5730\u5740\u3002\u8bf7\u6309\u7167\u90ae\u4ef6\u4e2d\u7684\u94fe\u63a5\u5b8c\u6210\u6ce8\u518c\u3002 3. \u767b\u5f55 MO Cloud \u8d26\u6237 \u6ce8\u518c\u6210\u529f\u540e\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb\u6fc0\u6d3b\u90ae\u4ef6\u4e2d\u7684\u94fe\u63a5\uff0c\u4ee5\u767b\u5f55 MO Cloud \u5b9e\u4f8b\u7ba1\u7406\u5e73\u53f0\u3002 \u8bf7\u6ce8\u610f\uff0c\u5f53\u4f7f\u7528\u7b2c\u4e09\u65b9\u8d26\u6237\u6ce8\u518c\u65f6\uff0cMO Cloud \u5c06\u83b7\u53d6\u5e76\u4f7f\u7528\u60a8\u8d26\u6237\u4e2d\u7684\u4e3b\u8981\u90ae\u7bb1\u4f5c\u4e3a\u5e73\u53f0\u6ce8\u518c\u90ae\u7bb1\u3002\u56e0\u6b64\uff0cMO Cloud \u4e0d\u652f\u6301\u4f7f\u7528\u76f8\u540c\u90ae\u7bb1\u8fdb\u884c\u591a\u4e2a\u7b2c\u4e09\u65b9\u8d26\u6237\u6216\u7535\u5b50\u90ae\u7bb1\u7684\u91cd\u590d\u6ce8\u518c\u3002 \u7b2c\u4e8c\u6b65\uff1a\u521b\u5efa\u4e00\u4e2a MO Serverless \u5b9e\u4f8b 1. \u6253\u5f00\u5b9e\u4f8b\u521b\u5efa\u9875\u9762 \u5728 Instances \u9875\u9762\uff0c\u70b9\u51fb +Create Instance \u6309\u94ae\u3002 2. \u914d\u7f6e\u5b9e\u4f8b\u4fe1\u606f Cloud Provider\uff1a \u6839\u636e\u60a8\u6240\u5728\u5730\u9009\u62e9\u5408\u9002\u7684\u516c\u6709\u4e91\u4f9b\u5e94\u5546\u548c\u5730\u533a\u3002 Instance Capacity\uff1a \u4fdd\u6301\u9ed8\u8ba4\u503c Free Trial \u3002 Access Control\uff1a \u8bbe\u7f6e\u5b9e\u4f8b\u7ba1\u7406\u5458 admin \u7684\u521d\u59cb\u5bc6\u7801\u3002 Instance Name\uff1a \u4e3a\u60a8\u7684\u5b9e\u4f8b\u53d6\u4e00\u4e2a\u540d\u79f0\uff0c\u6216\u8005\u4f7f\u7528\u5e73\u53f0\u81ea\u52a8\u751f\u6210\u7684\u540d\u79f0\u3002 3. \u5b8c\u6210\u521b\u5efa \u70b9\u51fb Create Serverless Instance \u5b8c\u6210\u521b\u5efa\u3002\u51e0\u79d2\u540e\uff0c\u5b9e\u4f8b\u72b6\u6001\u53d8\u4e3a\u7eff\u8272\u7684 Active \u65f6\uff0c\u8868\u793a\u5b9e\u4f8b\u521b\u5efa\u6210\u529f\u3002 \u7b2c\u4e09\u6b65\uff1a\u8fde\u63a5\u5b9e\u4f8b 1. \u6253\u5f00\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0 \u70b9\u51fb\u5b9e\u4f8b\u5361\u7247\u4e0b\u65b9\u7684 Connect \u6309\u94ae\uff0c\u7136\u540e\u9009\u62e9 Connect to Platform \uff0c\u4ee5\u6253\u5f00\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u7684\u767b\u5f55\u9875\u9762\u3002 2. \u8f93\u5165\u7ba1\u7406\u5458\u7528\u6237\u540d\u548c\u5bc6\u7801 \u5728\u767b\u5f55\u9875\u9762\u4e2d\u8f93\u5165\u4ee5\u4e0b\u4fe1\u606f\uff1a \u7528\u6237\u540d\uff1a admin \u5bc6\u7801\uff1a \u521b\u5efa\u5b9e\u4f8b\u65f6\u8bbe\u7f6e\u7684\u7ba1\u7406\u5458\u5bc6\u7801 \u8fd0\u884c\u6837\u4f8b\u6570\u636e 1. \u52a0\u8f7d\u6837\u4f8b\u6570\u636e TPC-H \u5728\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u53f3\u4e0b\u89d2\uff0c\u627e\u5230\u5e76\u70b9\u51fb \u5feb\u6377\u4e92\u52a8 \u6309\u94ae\u3002 \u4f9d\u6b21\u9009\u62e9 Load Data > Try with Sample Data > TPC-H Benchmark \u3002 \u70b9\u51fb Load TPC-H \u5b8c\u6210\u6837\u4f8b\u6570\u636e\u8ba2\u9605\u3002 2. \u67e5\u8be2 TPC-H \u6570\u636e\u96c6 \u5728\u83dc\u5355\u680f\u4e2d\u70b9\u51fb\u5e76\u8fdb\u5165 Query > SQL Editor \u9875\u9762\u3002 \u5728\u7f16\u8f91\u5668\u4e0a\u65b9\u7684\u6570\u636e\u5e93\u4e0b\u62c9\u6846\u4e2d\u9009\u62e9 mo_sample_data_tpch_sf1 \u3002 \u5728 \u5feb\u6377\u4e92\u52a8 \u7a97\u53e3\u7684 Load Data \u4e2d\u70b9\u51fb Try it \uff0c\u5c06\u5176\u4e2d\u7684\u67e5\u8be2\u8bed\u53e5\u590d\u5236\u5230\u7f16\u8f91\u5668\u4e2d\uff0c\u7136\u540e\u70b9\u51fb Run \u6267\u884c\u67e5\u8be2\u3002 \u73b0\u5728\uff0c\u60a8\u5df2\u7ecf\u6210\u529f\u521b\u5efa\u4e86\u4e00\u4e2a MO Serverless \u5b9e\u4f8b\u5e76\u8fd0\u884c\u4e86\u6837\u4f8b\u6570\u636e\u96c6\u7684\u67e5\u8be2\u3002\u5e0c\u671b\u8fd9\u4e2a\u6559\u7a0b\u5bf9\u60a8\u6709\u6240\u5e2e\u52a9\uff01 \u5982\u679c\u60a8\u9700\u8981\u66f4\u591a\u5e2e\u52a9\uff0c\u8bf7\u7ee7\u7eed\u67e5\u770b\u6211\u4eec\u7684\u6587\u6863\u6216\u8054\u7cfb\u652f\u6301\u56e2\u961f\u3002","title":"\u5feb\u901f\u521b\u5efa MatrixOne Cloud\uff08MO Cloud\uff09\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#matrixone-cloudmo-cloud","text":"\u5728\u672c\u7bc7\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u5c06\u6307\u5bfc\u60a8\u5feb\u901f\u521b\u5efa\u548c\u4f7f\u7528 MatrixOne Cloud (MO Cloud) \u5b9e\u4f8b\u3002","title":"\u5feb\u901f\u521b\u5efa MatrixOne Cloud\uff08MO Cloud\uff09\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#mo-cloud","text":"","title":"\u7b2c\u4e00\u6b65\uff1a\u521b\u5efa MO Cloud \u8d26\u6237"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#1-mo-cloud","text":"\u5982\u679c\u60a8\u60f3\u5c1d\u8bd5 MO Cloud 1.0 \u7248\u672c\u524d\u7684\u5185\u6d4b\u7248\u672c\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u7533\u8bf7\u3002 \u8bbf\u95ee MO Cloud \u8bd5\u7528\u7533\u8bf7\u9875\u9762 \u3002 \u586b\u5199\u60a8\u7684\u7533\u8bf7\u4fe1\u606f\uff0c\u5e76\u63d0\u4ea4\u7533\u8bf7\u3002\u6211\u4eec\u4f1a\u5c3d\u5feb\u5ba1\u6838\u60a8\u7684\u7533\u8bf7\u3002 \u6ce8\u610f\uff1a \u7533\u8bf7\u8bd5\u7528\u65f6\u586b\u5199\u7684\u90ae\u7bb1\u5c06\u6210\u4e3a\u60a8\u7684 MO Cloud \u8d26\u6237\u90ae\u7bb1\u3002 \u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u6ce8\u518c MO Cloud \u8d26\u6237\uff1a \u7535\u5b50\u90ae\u7bb1\u8d26\u6237 Github \u8d26\u6237 Google \u8d26\u6237 \u8bf7\u6ce8\u610f\uff0c\u5f53\u4f7f\u7528\u7b2c\u4e09\u65b9\u8d26\u6237\u6ce8\u518c\u65f6\uff0cMO Cloud \u5c06\u83b7\u53d6\u5e76\u4f7f\u7528\u60a8\u8d26\u6237\u4e2d\u7684\u4e3b\u8981\u90ae\u7bb1\u4f5c\u4e3a\u5e73\u53f0\u6ce8\u518c\u90ae\u7bb1\u3002\u56e0\u6b64\uff0cMO Cloud \u4e0d\u652f\u6301\u4f7f\u7528\u76f8\u540c\u90ae\u7bb1\u8fdb\u884c\u591a\u4e2a\u7b2c\u4e09\u65b9\u8d26\u6237\u6216\u7535\u5b50\u90ae\u7bb1\u7684\u91cd\u590d\u6ce8\u518c\u3002","title":"1. \u7533\u8bf7\u8bd5\u7528 MO Cloud"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#2-mo-cloud","text":"\u4e00\u65e6\u60a8\u7684\u8bd5\u7528\u7533\u8bf7\u83b7\u5f97\u6279\u51c6\uff0c\u6211\u4eec\u4f1a\u53d1\u9001\u4e00\u5c01\u6ce8\u518c\u90ae\u4ef6\u5230\u60a8\u63d0\u4f9b\u7684\u90ae\u7bb1\u5730\u5740\u3002\u8bf7\u6309\u7167\u90ae\u4ef6\u4e2d\u7684\u94fe\u63a5\u5b8c\u6210\u6ce8\u518c\u3002","title":"2. \u6ce8\u518c MO Cloud \u8d26\u6237"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#3-mo-cloud","text":"\u6ce8\u518c\u6210\u529f\u540e\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb\u6fc0\u6d3b\u90ae\u4ef6\u4e2d\u7684\u94fe\u63a5\uff0c\u4ee5\u767b\u5f55 MO Cloud \u5b9e\u4f8b\u7ba1\u7406\u5e73\u53f0\u3002 \u8bf7\u6ce8\u610f\uff0c\u5f53\u4f7f\u7528\u7b2c\u4e09\u65b9\u8d26\u6237\u6ce8\u518c\u65f6\uff0cMO Cloud \u5c06\u83b7\u53d6\u5e76\u4f7f\u7528\u60a8\u8d26\u6237\u4e2d\u7684\u4e3b\u8981\u90ae\u7bb1\u4f5c\u4e3a\u5e73\u53f0\u6ce8\u518c\u90ae\u7bb1\u3002\u56e0\u6b64\uff0cMO Cloud \u4e0d\u652f\u6301\u4f7f\u7528\u76f8\u540c\u90ae\u7bb1\u8fdb\u884c\u591a\u4e2a\u7b2c\u4e09\u65b9\u8d26\u6237\u6216\u7535\u5b50\u90ae\u7bb1\u7684\u91cd\u590d\u6ce8\u518c\u3002","title":"3. \u767b\u5f55 MO Cloud \u8d26\u6237"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#mo-serverless","text":"","title":"\u7b2c\u4e8c\u6b65\uff1a\u521b\u5efa\u4e00\u4e2a MO Serverless \u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#1","text":"\u5728 Instances \u9875\u9762\uff0c\u70b9\u51fb +Create Instance \u6309\u94ae\u3002","title":"1. \u6253\u5f00\u5b9e\u4f8b\u521b\u5efa\u9875\u9762"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#2","text":"Cloud Provider\uff1a \u6839\u636e\u60a8\u6240\u5728\u5730\u9009\u62e9\u5408\u9002\u7684\u516c\u6709\u4e91\u4f9b\u5e94\u5546\u548c\u5730\u533a\u3002 Instance Capacity\uff1a \u4fdd\u6301\u9ed8\u8ba4\u503c Free Trial \u3002 Access Control\uff1a \u8bbe\u7f6e\u5b9e\u4f8b\u7ba1\u7406\u5458 admin \u7684\u521d\u59cb\u5bc6\u7801\u3002 Instance Name\uff1a \u4e3a\u60a8\u7684\u5b9e\u4f8b\u53d6\u4e00\u4e2a\u540d\u79f0\uff0c\u6216\u8005\u4f7f\u7528\u5e73\u53f0\u81ea\u52a8\u751f\u6210\u7684\u540d\u79f0\u3002","title":"2. \u914d\u7f6e\u5b9e\u4f8b\u4fe1\u606f"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#3","text":"\u70b9\u51fb Create Serverless Instance \u5b8c\u6210\u521b\u5efa\u3002\u51e0\u79d2\u540e\uff0c\u5b9e\u4f8b\u72b6\u6001\u53d8\u4e3a\u7eff\u8272\u7684 Active \u65f6\uff0c\u8868\u793a\u5b9e\u4f8b\u521b\u5efa\u6210\u529f\u3002","title":"3. \u5b8c\u6210\u521b\u5efa"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#_1","text":"","title":"\u7b2c\u4e09\u6b65\uff1a\u8fde\u63a5\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#1_1","text":"\u70b9\u51fb\u5b9e\u4f8b\u5361\u7247\u4e0b\u65b9\u7684 Connect \u6309\u94ae\uff0c\u7136\u540e\u9009\u62e9 Connect to Platform \uff0c\u4ee5\u6253\u5f00\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u7684\u767b\u5f55\u9875\u9762\u3002","title":"1. \u6253\u5f00\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#2_1","text":"\u5728\u767b\u5f55\u9875\u9762\u4e2d\u8f93\u5165\u4ee5\u4e0b\u4fe1\u606f\uff1a \u7528\u6237\u540d\uff1a admin \u5bc6\u7801\uff1a \u521b\u5efa\u5b9e\u4f8b\u65f6\u8bbe\u7f6e\u7684\u7ba1\u7406\u5458\u5bc6\u7801","title":"2. \u8f93\u5165\u7ba1\u7406\u5458\u7528\u6237\u540d\u548c\u5bc6\u7801"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#_2","text":"","title":"\u8fd0\u884c\u6837\u4f8b\u6570\u636e"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#1-tpc-h","text":"\u5728\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u53f3\u4e0b\u89d2\uff0c\u627e\u5230\u5e76\u70b9\u51fb \u5feb\u6377\u4e92\u52a8 \u6309\u94ae\u3002 \u4f9d\u6b21\u9009\u62e9 Load Data > Try with Sample Data > TPC-H Benchmark \u3002 \u70b9\u51fb Load TPC-H \u5b8c\u6210\u6837\u4f8b\u6570\u636e\u8ba2\u9605\u3002","title":"1. \u52a0\u8f7d\u6837\u4f8b\u6570\u636e TPC-H"},{"location":"MatrixOne-Cloud/Get-Started/quickstart/#2-tpc-h","text":"\u5728\u83dc\u5355\u680f\u4e2d\u70b9\u51fb\u5e76\u8fdb\u5165 Query > SQL Editor \u9875\u9762\u3002 \u5728\u7f16\u8f91\u5668\u4e0a\u65b9\u7684\u6570\u636e\u5e93\u4e0b\u62c9\u6846\u4e2d\u9009\u62e9 mo_sample_data_tpch_sf1 \u3002 \u5728 \u5feb\u6377\u4e92\u52a8 \u7a97\u53e3\u7684 Load Data \u4e2d\u70b9\u51fb Try it \uff0c\u5c06\u5176\u4e2d\u7684\u67e5\u8be2\u8bed\u53e5\u590d\u5236\u5230\u7f16\u8f91\u5668\u4e2d\uff0c\u7136\u540e\u70b9\u51fb Run \u6267\u884c\u67e5\u8be2\u3002 \u73b0\u5728\uff0c\u60a8\u5df2\u7ecf\u6210\u529f\u521b\u5efa\u4e86\u4e00\u4e2a MO Serverless \u5b9e\u4f8b\u5e76\u8fd0\u884c\u4e86\u6837\u4f8b\u6570\u636e\u96c6\u7684\u67e5\u8be2\u3002\u5e0c\u671b\u8fd9\u4e2a\u6559\u7a0b\u5bf9\u60a8\u6709\u6240\u5e2e\u52a9\uff01 \u5982\u679c\u60a8\u9700\u8981\u66f4\u591a\u5e2e\u52a9\uff0c\u8bf7\u7ee7\u7eed\u67e5\u770b\u6211\u4eec\u7684\u6587\u6863\u6216\u8054\u7cfb\u652f\u6301\u56e2\u961f\u3002","title":"2. \u67e5\u8be2 TPC-H \u6570\u636e\u96c6"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/","text":"\u8fde\u63a5 MatrixOne \u5b9e\u4f8b \u5728 MatrixOne Cloud \u5b9e\u4f8b\u521b\u5efa\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u6765\u8fde\u63a5\u5230\u8be5\u5b9e\u4f8b\u3002 \u8fde\u63a5\u5de5\u5177\u65b9\u5f0f \u6839\u636e\u4e0d\u540c\u7684\u8fde\u63a5\u5de5\u5177\uff0c\u8fde\u63a5\u65b9\u5f0f\u53ef\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\uff1a MySQL \u7ba1\u7406\u5de5\u5177 \u60a8\u53ef\u4ee5\u4f7f\u7528\u652f\u6301 MySQL \u534f\u8bae\u7684\u5ba2\u6237\u7aef\u7ba1\u7406\u5de5\u5177\u6765\u8fde\u63a5 MatrixOne \u5b9e\u4f8b\uff0c\u4f8b\u5982 MySQL Client\u3001Navicat\u3001DBeaver \u7b49\u3002\u8be6\u7ec6\u6b65\u9aa4\u8bf7\u53c2\u8003 \u5ba2\u6237\u7aef\u5de5\u5177\u8fde\u63a5 \u3002 Java \u60a8\u53ef\u4ee5\u4f7f\u7528 JDBC \u8fde\u63a5\u5668\u6216 Java ORMs \u6765\u8fde\u63a5\u5230 MatrixOne \u5b9e\u4f8b\u3002\u8be6\u7ec6\u6b65\u9aa4\u8bf7\u53c2\u8003 \u4f7f\u7528 Java ORMs \u8fde\u63a5 \u3002 Python \u60a8\u53ef\u4ee5\u4f7f\u7528 Python \u9a71\u52a8\u7a0b\u5e8f\u6765\u8fde\u63a5 MatrixOne \u5b9e\u4f8b\u3002\u8be6\u7ec6\u6b65\u9aa4\u8bf7\u53c2\u8003 \u4f7f\u7528 Python \u8fde\u63a5 \u3002 Go \u60a8\u53ef\u4ee5\u4f7f\u7528 go-mysql-driver \u9a71\u52a8\u7a0b\u5e8f\u4ee5 Go \u8bed\u8a00\u8fde\u63a5 MatrixOne \u5b9e\u4f8b\u3002\u8be6\u7ec6\u6b65\u9aa4\u8bf7\u53c2\u8003 \u4f7f\u7528 Golang \u8fde\u63a5 \u3002 \u7f51\u7edc\u8fde\u63a5\u65b9\u5f0f \u6839\u636e\u4e0d\u540c\u7684\u7f51\u7edc\u8fde\u63a5\u9014\u5f84\uff0c\u8fde\u63a5\u65b9\u5f0f\u53ef\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\uff1a \u901a\u8fc7\u516c\u7f51\u8fde\u63a5 \u8fd9\u662f\u4e00\u79cd\u6700\u5feb\u3001\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u8fde\u63a5 MatrixOne \u5b9e\u4f8b\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u6570\u636e\u5728\u516c\u7f51\u4f20\u8f93\u65f6\u53ef\u80fd\u9762\u4e34\u5b89\u5168\u5a01\u80c1\uff0c\u6027\u80fd\u4e5f\u4e0d\u4e00\u5b9a\u7a33\u5b9a\u3002\u60a8\u53ef\u4ee5\u7ed3\u5408 IP \u767d\u540d\u5355 \u8fdb\u4e00\u6b65\u63d0\u5347\u5b89\u5168\u6027\u3002 \u901a\u8fc7\u79c1\u7f51\u8fde\u63a5 \u8fd9\u662f\u4e00\u79cd\u8f83\u4e3a\u5b89\u5168\u548c\u7a33\u5b9a\u7684\u8fde\u63a5\u65b9\u5f0f\u3002MatrixOne Cloud \u5b9e\u4f8b\u63d0\u4f9b VPC \u7ec8\u7aef\u8282\u70b9\u670d\u52a1\uff0c\u5141\u8bb8\u7528\u6237\u5728\u81ea\u5df1\u7684 VPC \u4e0a\u8bbe\u7f6e\u79c1\u7f51\u8bbf\u95ee\u8fde\u63a5\u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003 \u79c1\u7f51\u8bbf\u95ee\u6587\u6863 \u3002 3. \u901a\u8fc7\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u8fde\u63a5 MO Cloud \u4e3a\u6bcf\u4e2a\u5b9e\u4f8b\u63d0\u4f9b\u4e86\u754c\u9762\u5316\u7684\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u6d4f\u89c8\u5668\u5feb\u901f\u3001\u9ad8\u6548\u5730\u8bbf\u95ee\u548c\u76d1\u63a7\u6570\u636e\u5e93\u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003 \u4f7f\u7528 Web \u9875\u9762\u8fde\u63a5 \u3002 \u5e0c\u671b\u8fd9\u4e9b\u8fde\u63a5\u65b9\u5f0f\u7684\u6307\u5357\u80fd\u5e2e\u52a9\u60a8\u6210\u529f\u8fde\u63a5\u5230 MatrixOne \u5b9e\u4f8b\u3002\u5982\u679c\u60a8\u6709\u4efb\u4f55\u7591\u95ee\u6216\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u5e2e\u52a9\uff0c\u8bf7\u67e5\u9605\u6211\u4eec\u7684\u6587\u6863\u6216\u8054\u7cfb\u652f\u6301\u56e2\u961f\u3002","title":"\u8fde\u63a5\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/#matrixone","text":"\u5728 MatrixOne Cloud \u5b9e\u4f8b\u521b\u5efa\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u6765\u8fde\u63a5\u5230\u8be5\u5b9e\u4f8b\u3002","title":"\u8fde\u63a5 MatrixOne \u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/#_1","text":"\u6839\u636e\u4e0d\u540c\u7684\u8fde\u63a5\u5de5\u5177\uff0c\u8fde\u63a5\u65b9\u5f0f\u53ef\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\uff1a","title":"\u8fde\u63a5\u5de5\u5177\u65b9\u5f0f"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/#mysql","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528\u652f\u6301 MySQL \u534f\u8bae\u7684\u5ba2\u6237\u7aef\u7ba1\u7406\u5de5\u5177\u6765\u8fde\u63a5 MatrixOne \u5b9e\u4f8b\uff0c\u4f8b\u5982 MySQL Client\u3001Navicat\u3001DBeaver \u7b49\u3002\u8be6\u7ec6\u6b65\u9aa4\u8bf7\u53c2\u8003 \u5ba2\u6237\u7aef\u5de5\u5177\u8fde\u63a5 \u3002","title":"MySQL \u7ba1\u7406\u5de5\u5177"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/#java","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 JDBC \u8fde\u63a5\u5668\u6216 Java ORMs \u6765\u8fde\u63a5\u5230 MatrixOne \u5b9e\u4f8b\u3002\u8be6\u7ec6\u6b65\u9aa4\u8bf7\u53c2\u8003 \u4f7f\u7528 Java ORMs \u8fde\u63a5 \u3002","title":"Java"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/#python","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 Python \u9a71\u52a8\u7a0b\u5e8f\u6765\u8fde\u63a5 MatrixOne \u5b9e\u4f8b\u3002\u8be6\u7ec6\u6b65\u9aa4\u8bf7\u53c2\u8003 \u4f7f\u7528 Python \u8fde\u63a5 \u3002","title":"Python"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/#go","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 go-mysql-driver \u9a71\u52a8\u7a0b\u5e8f\u4ee5 Go \u8bed\u8a00\u8fde\u63a5 MatrixOne \u5b9e\u4f8b\u3002\u8be6\u7ec6\u6b65\u9aa4\u8bf7\u53c2\u8003 \u4f7f\u7528 Golang \u8fde\u63a5 \u3002","title":"Go"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/#_2","text":"\u6839\u636e\u4e0d\u540c\u7684\u7f51\u7edc\u8fde\u63a5\u9014\u5f84\uff0c\u8fde\u63a5\u65b9\u5f0f\u53ef\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\uff1a","title":"\u7f51\u7edc\u8fde\u63a5\u65b9\u5f0f"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/#_3","text":"\u8fd9\u662f\u4e00\u79cd\u6700\u5feb\u3001\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u8fde\u63a5 MatrixOne \u5b9e\u4f8b\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u6570\u636e\u5728\u516c\u7f51\u4f20\u8f93\u65f6\u53ef\u80fd\u9762\u4e34\u5b89\u5168\u5a01\u80c1\uff0c\u6027\u80fd\u4e5f\u4e0d\u4e00\u5b9a\u7a33\u5b9a\u3002\u60a8\u53ef\u4ee5\u7ed3\u5408 IP \u767d\u540d\u5355 \u8fdb\u4e00\u6b65\u63d0\u5347\u5b89\u5168\u6027\u3002","title":"\u901a\u8fc7\u516c\u7f51\u8fde\u63a5"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/#_4","text":"\u8fd9\u662f\u4e00\u79cd\u8f83\u4e3a\u5b89\u5168\u548c\u7a33\u5b9a\u7684\u8fde\u63a5\u65b9\u5f0f\u3002MatrixOne Cloud \u5b9e\u4f8b\u63d0\u4f9b VPC \u7ec8\u7aef\u8282\u70b9\u670d\u52a1\uff0c\u5141\u8bb8\u7528\u6237\u5728\u81ea\u5df1\u7684 VPC \u4e0a\u8bbe\u7f6e\u79c1\u7f51\u8bbf\u95ee\u8fde\u63a5\u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003 \u79c1\u7f51\u8bbf\u95ee\u6587\u6863 \u3002","title":"\u901a\u8fc7\u79c1\u7f51\u8fde\u63a5"},{"location":"MatrixOne-Cloud/Instance-Mgmt/connect-instance/#3","text":"MO Cloud \u4e3a\u6bcf\u4e2a\u5b9e\u4f8b\u63d0\u4f9b\u4e86\u754c\u9762\u5316\u7684\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u6d4f\u89c8\u5668\u5feb\u901f\u3001\u9ad8\u6548\u5730\u8bbf\u95ee\u548c\u76d1\u63a7\u6570\u636e\u5e93\u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003 \u4f7f\u7528 Web \u9875\u9762\u8fde\u63a5 \u3002 \u5e0c\u671b\u8fd9\u4e9b\u8fde\u63a5\u65b9\u5f0f\u7684\u6307\u5357\u80fd\u5e2e\u52a9\u60a8\u6210\u529f\u8fde\u63a5\u5230 MatrixOne \u5b9e\u4f8b\u3002\u5982\u679c\u60a8\u6709\u4efb\u4f55\u7591\u95ee\u6216\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u5e2e\u52a9\uff0c\u8bf7\u67e5\u9605\u6211\u4eec\u7684\u6587\u6863\u6216\u8054\u7cfb\u652f\u6301\u56e2\u961f\u3002","title":"3. \u901a\u8fc7\u6570\u636e\u5e93\u7ba1\u7406\u5e73\u53f0\u8fde\u63a5"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/","text":"\u521b\u5efa\u5b9e\u4f8b \u672c\u7bc7\u6587\u6863\u5c06\u4e3a\u60a8\u63d0\u4f9b\u6ce8\u518c\u5e76\u521b\u5efa\u5b9e\u4f8b\u7684\u8be6\u7ec6\u6b65\u9aa4\u3002 \u6b65\u9aa4\u4e00\uff1a\u767b\u5f55\u8d26\u53f7\uff0c\u5f00\u59cb\u521b\u5efa \u767b\u5f55\u60a8\u7684 MO Cloud \u8d26\u53f7\uff0c\u8fdb\u5165\u5b9e\u4f8b\u7ba1\u7406\u5e73\u53f0\u3002 \u5982\u679c\u60a8\u8fd8\u6ca1\u6709 MO Cloud \u8d26\u53f7\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb \u6ce8\u518c\u767b\u5f55 \u5f00\u59cb\u6ce8\u518c\uff0c\u6216\u8005\u53c2\u7167 \u5feb\u901f\u4f53\u9a8c MatrixOne Cloud \u7684\u6ce8\u518c\u6307\u5357\u3002 \u5728\u83dc\u5355\u680f\u4e2d\u70b9\u51fb Instances \u8fdb\u5165\u5b9e\u4f8b\u5217\u8868\u9875\u9762\uff0c\u7136\u540e\u70b9\u51fb +Create Instance \u3002 \u6b65\u9aa4\u4e8c\uff1a\u9009\u62e9\u516c\u6709\u4e91\u670d\u52a1\u5546\u53ca\u5730\u533a MatrixOne Cloud \u652f\u6301\u5728\u4ee5\u4e0b\u516c\u6709\u4e91\u5730\u533a\u521b\u5efa\u5b9e\u4f8b\u3002\u4e3a\u4e86\u83b7\u5f97\u66f4\u4f73\u7684\u6027\u80fd\u548c\u4f53\u9a8c\uff0c\u8bf7\u9009\u62e9\u8ddd\u79bb\u60a8\u73b0\u6709\u4e91\u670d\u52a1\u5730\u533a\u6700\u8fd1\u7684\u533a\u57df\u3002 AWS \u5730\u533a \u5730\u7406\u533a\u57df \u5730\u533a\u540d \u5730\u70b9 \u4e9a\u592a\u5730\u533a / Asia Pacific ap-southeast-1 \u65b0\u52a0\u5761 \u963f\u91cc\u4e91\u5730\u533a \u5730\u7406\u533a\u57df \u5730\u533a\u540d \u5730\u70b9 \u4e9a\u592a-\u4e2d\u56fd \u534e\u4e1c1 \u676d\u5dde \u6b65\u9aa4\u4e09\uff1a\u914d\u7f6e\u5b9e\u4f8b\u5bb9\u91cf \u514d\u8d39\u5b9e\u4f8b \u9009\u62e9 Free Trial \uff0c\u4e91\u5e73\u53f0\u4f1a\u4e3a\u8be5\u5b9e\u4f8b\u6bcf\u6708\u63d0\u4f9b\u514d\u8d39\u7684\u8ba1\u7b97\u548c\u5b58\u50a8\u8d44\u6e90\u3002\u4f46\u5f53\u8ba1\u7b97\u6216\u5b58\u50a8\u8d44\u6e90\u7528\u5b8c\u65f6\uff0c\u5b9e\u4f8b\u7684\u90e8\u5206\u529f\u80fd\u5c06\u53d7\u5230\u9650\u5236\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u9650\u5236\u4f7f\u7528\u7684\u529f\u80fd \u8ba1\u7b97\u8d44\u6e90\u7528\u5b8c \u5b58\u50a8\u8d44\u6e90\u7528\u5b8c \u6570\u636e\u5e93\u8bfb\u64cd\u4f5c \u5426 \u662f \u6570\u636e\u5e93\u5199\u64cd\u4f5c \u5426 \u5426 \u67e5\u770b\u5b9e\u4f8b\u8be6\u60c5 \u662f \u662f \u67e5\u770b\u5b9e\u4f8b\u76d1\u63a7 \u662f \u662f \u8bf7\u6ce8\u610f\uff0c\u514d\u8d39\u5b9e\u4f8b\u7684\u6570\u636e\u5e93\u6027\u80fd\u7a33\u5b9a\u6027\u65e0\u6cd5\u4fdd\u8bc1\uff0c\u56e0\u6b64\u5efa\u8bae\u60a8\u4ec5\u7528\u4e8e\u4f53\u9a8c\u6216\u5b66\u4e60\u3002\u5bf9\u4e8e\u751f\u4ea7\u5e94\u7528\u573a\u666f\uff0c\u8bf7\u9009\u62e9 \u751f\u4ea7\u5b9e\u4f8b \u3002 \u5982\u679c\u60a8\u7684\u8ba1\u7b97\u8d44\u6e90\u4f7f\u7528\u5b8c\u540e\uff0cMO Cloud \u4f1a\u5728\u60a8\u521b\u5efa\u5b9e\u4f8b\u65e5\u671f\u7684\u4e00\u4e2a\u6708\u540e\u91cd\u65b0\u8d60\u9001\uff1b\u5b58\u50a8\u8d44\u6e90\u8fbe\u5230\u589e\u4e0a\u4e0a\u9650\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5220\u9664\u6570\u636e\u7684\u65b9\u5f0f\u91cd\u65b0\u83b7\u5f97\u6570\u636e\u5e93\u7684\u5199\u64cd\u4f5c\u3002 \u751f\u4ea7\u5b9e\u4f8b \u9009\u62e9 Production \uff0cMO Cloud \u4f1a\u4e3a\u8be5\u5b9e\u4f8b\u914d\u7f6e\u72ec\u7acb\u7684\u3001\u53ef\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u81ea\u52a8\u4f38\u7f29\u7684\u8ba1\u7b97\u8d44\u6e90\uff0c\u4ece\u800c\u5b9e\u73b0\u8fd1\u4e4e\u6781\u81f4\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u914d\u7f6e\u4ee5\u4e0b\u9009\u9879\uff1a Spend limit \uff1a \u8fd9\u4e00\u5f00\u5173\u53ef\u4ee5\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u7ba1\u7406\u5b9e\u4f8b\u7684\u82b1\u8d39\u3002\u5f53\u5b9e\u4f8b\u7684\u8ba1\u7b97\u548c\u5b58\u50a8\u82b1\u8d39\u8fbe\u5230\u60a8\u8bbe\u7f6e\u7684\u91d1\u989d\u9650\u5236\u65f6\uff0c\u4e91\u5e73\u53f0\u4f1a\u91c7\u53d6\u63aa\u65bd\u9650\u5236\u5b9e\u4f8b\u7684\u9ad8\u6027\u80fd\u670d\u52a1\uff0c\u4ee5\u63a7\u5236\u82b1\u8d39\u3002 \u5f53\u5f00\u542f Spend limit \u529f\u80fd\u65f6\uff0c\u60a8\u9700\u8981\u81f3\u5c11\u914d\u7f6e\u6708\u6d88\u8d39\u9650\u5236 - Monthly limit\uff0c\u60a8\u4e5f\u53ef\u4ee5\u540c\u65f6\u6253\u5f00\u65e5\u6d88\u8d39\u9650\u5236 - Daily limit\uff0c\u4efb\u610f\u9650\u5236\u5230\u8fbe\u540e\uff0c\u90fd\u4f1a\u89e6\u53d1 spend Limit \u884c\u4e3a\u3002 Service Keep On \uff1a \u4e00\u65e6 Spend limit \u88ab\u89e6\u53d1\uff0c\u5b9e\u4f8b\u7684\u8bbf\u95ee\u5c06\u9ed8\u8ba4\u505c\u6b62\u3002\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u4fdd\u6301\u670d\u52a1\u7684\u53ef\u7528\u6027\u3002Service Keep On \u529f\u80fd\u53ef\u4ee5\u4ee5\u4f4e\u6027\u80fd\u670d\u52a1\u65b9\u5f0f\u7ee7\u7eed\u4fdd\u6301\u670d\u52a1\uff0c\u5e76\u63a7\u5236\u82b1\u8d39\u3002 \u60a8\u53ef\u4ee5\u968f\u65f6\u4fee\u6539 Spend limit \u529f\u80fd\u7684\u8bbe\u7f6e\uff0c\u5305\u62ec\u5f00\u5173\u548c\u9650\u5236\u503c\uff0c\u4ee5\u66f4\u6539\u5b9e\u4f8b\u7684\u82b1\u8d39\u7b56\u7565\u3002\u8fd9\u4e9b\u4fee\u6539\u5c06\u7acb\u5373\u751f\u6548\u3002 \u8ba1\u7b97\u8d44\u6e90 - Compute Unit (CU) Compute Unit (CU) \u662f MatrixOne Cloud Serverless \u5b9e\u4f8b\u7684\u8ba1\u7b97\u8d44\u6e90\u5f00\u9500\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u6bcf\u4e2a SQL \u67e5\u8be2\u90fd\u4f1a\u6d88\u8017\u4e00\u5b9a\u6570\u91cf\u7684 CU\uff0c\u5176\u4e2d\u5305\u62ec CPU\u3001\u5185\u5b58\u548c I/O\u3002\u4e0d\u540c SQL \u67e5\u8be2\u7684 CU \u6d88\u8017\u4e0d\u540c\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u793a\u4f8b\uff1a \u67e5\u8be2 10K \u884c\uff0c\u6bcf\u884c 4 \u5b57\u8282\uff1a1 CU \u67e5\u8be2 25K \u884c\uff0c\u6bcf\u884c 4 \u5b57\u8282\uff1a3 CU \u63d2\u5165 2K \u884c\uff0c\u6bcf\u884c 4 \u5b57\u8282\uff1a0.01 CU \u63d2\u5165 10K \u884c\uff0c\u6bcf\u884c 4 \u5b57\u8282\uff1a0.02 CU \u66f4\u65b0 1 \u884c\uff0c\u6bcf\u884c 40 \u5b57\u8282\uff1a1 CU \u6211\u4eec\u6d4b\u8bd5\u4e86 TPC-H 1GB \u6570\u636e\u96c6\u7684\u67e5\u8be2 CU \u6d88\u8017\uff0c\u603b\u8ba1\u4e3a 1683 CUs\u3002 \u6709\u5173 CU \u7684\u5b9a\u4ef7\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 CU \u4ef7\u683c\u3002 \u6b65\u9aa4\u56db\uff1a\u8bbe\u7f6e\u8bbf\u95ee\u63a7\u5236 \u7ba1\u7406\u5458\u5bc6\u7801 \u5728\u521b\u5efa MO Cloud \u5b9e\u4f8b\u65f6\uff0c\u60a8\u9700\u8981\u8bbe\u7f6e\u5b9e\u4f8b\u7684\u6700\u9ad8\u6743\u9650\u7ba1\u7406\u5458\uff08admin\uff09\u7684\u5bc6\u7801\u3002\u4e3a\u4e86\u4fdd\u969c\u6570\u636e\u5e93\u7684\u5b89\u5168\u6027\uff0c\u5bc6\u7801\u9700\u7b26\u5408\u4ee5\u4e0b\u89c4\u5219\uff1a \u81f3\u5c11\u5305\u542b 8 \u4e2a\u5b57\u7b26 \u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u6570\u5b57 \u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd \u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd \u7f51\u7edc\u5b89\u5168\u7b56\u7565 \u60a8\u53ef\u4ee5\u8bbe\u7f6e\u516c\u7f51\u8bbf\u95ee\u5b9e\u4f8b\u7684 IP \u767d\u540d\u5355\uff0c\u4ee5\u9632\u6b62\u6076\u610f IP \u5730\u5740\u8bbf\u95ee\u60a8\u7684\u7cfb\u7edf\u3002\u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u8003 IP \u767d\u540d\u5355\u7ae0\u8282\u3002 \u6b65\u9aa4\u4e94\uff1a\u547d\u540d\u5e76\u521b\u5efa\u5b9e\u4f8b \u7cfb\u7edf\u5c06\u81ea\u52a8\u4e3a\u5b9e\u4f8b\u5206\u914d\u4e00\u4e2a\u540d\u79f0\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4fee\u6539\u540d\u79f0\u3002 \u5728\u53f3\u4fa7\u7684\u603b\u89c8\u4e2d\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u4e0a\u8ff0\u6b65\u9aa4\u4e2d\u7684\u5b9e\u4f8b\u89c4\u5212\u3002\u786e\u8ba4\u65e0\u8bef\u540e\uff0c\u70b9\u51fb Create Serverless Instance \u3002 \u5b9e\u4f8b\u5c06\u5728\u70b9\u51fb\u521b\u5efa\u540e\u7684\u51e0\u79d2\u5185\u5b8c\u6210\u521b\u5efa\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u76d1\u89c6\u5b9e\u4f8b\u5361\u7247\u4e2d\u7684\u5b9e\u4f8b\u72b6\u6001\u6765\u786e\u8ba4\u662f\u5426\u521b\u5efa\u6210\u529f\u3002\u521b\u5efa\u4e2d\u72b6\u6001\u4e3a Creating \uff0c\u521b\u5efa\u5b8c\u6210\u72b6\u6001\u4e3a Active \u3002 \u6b65\u9aa4\u516d\uff1a\u83b7\u53d6 MO \u5b9e\u4f8b\u7684\u8fde\u63a5\u547d\u4ee4 \u5728 M0 Cloud \u5b9e\u4f8b\u7ba1\u7406\u5e73\u53f0\u7684\u5b9e\u4f8b\u5217\u8868\u4e2d\uff0c\u627e\u5230\u9700\u8981\u8bbf\u95ee\u7684 MatrixOne \u5b9e\u4f8b\uff0c\u4f9d\u6b21\u70b9\u51fb Connect > Connect with 3rd tool \u3002 \u6b64\u65f6\u9875\u9762\u53f3\u4fa7\u5f39\u51fa\u8fde\u63a5\u5b9e\u4f8b\u7684\u547d\u4ee4\u7a97\u53e3\uff0cSQL Client \u4e0b\u65b9\u9009\u62e9\u5ba2\u6237\u7aef\uff0c\u590d\u5236\u4e0b\u65b9\u7684\u547d\u4ee4\u5373\u53ef\u3002 \u5e0c\u671b\u8fd9\u4e9b\u6b65\u9aa4\u6709\u52a9\u4e8e\u60a8\u6210\u529f\u521b\u5efa MatrixOne \u5b9e\u4f8b\uff01\u5982\u679c\u60a8\u9700\u8981\u66f4\u591a\u5e2e\u52a9\uff0c\u8bf7\u7ee7\u7eed\u67e5\u770b\u6211\u4eec\u7684\u6587\u6863\u6216\u8054\u7cfb\u652f\u6301\u56e2\u961f\u3002","title":"\u521b\u5efa\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_1","text":"\u672c\u7bc7\u6587\u6863\u5c06\u4e3a\u60a8\u63d0\u4f9b\u6ce8\u518c\u5e76\u521b\u5efa\u5b9e\u4f8b\u7684\u8be6\u7ec6\u6b65\u9aa4\u3002","title":"\u521b\u5efa\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_2","text":"\u767b\u5f55\u60a8\u7684 MO Cloud \u8d26\u53f7\uff0c\u8fdb\u5165\u5b9e\u4f8b\u7ba1\u7406\u5e73\u53f0\u3002 \u5982\u679c\u60a8\u8fd8\u6ca1\u6709 MO Cloud \u8d26\u53f7\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb \u6ce8\u518c\u767b\u5f55 \u5f00\u59cb\u6ce8\u518c\uff0c\u6216\u8005\u53c2\u7167 \u5feb\u901f\u4f53\u9a8c MatrixOne Cloud \u7684\u6ce8\u518c\u6307\u5357\u3002 \u5728\u83dc\u5355\u680f\u4e2d\u70b9\u51fb Instances \u8fdb\u5165\u5b9e\u4f8b\u5217\u8868\u9875\u9762\uff0c\u7136\u540e\u70b9\u51fb +Create Instance \u3002","title":"\u6b65\u9aa4\u4e00\uff1a\u767b\u5f55\u8d26\u53f7\uff0c\u5f00\u59cb\u521b\u5efa"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_3","text":"MatrixOne Cloud \u652f\u6301\u5728\u4ee5\u4e0b\u516c\u6709\u4e91\u5730\u533a\u521b\u5efa\u5b9e\u4f8b\u3002\u4e3a\u4e86\u83b7\u5f97\u66f4\u4f73\u7684\u6027\u80fd\u548c\u4f53\u9a8c\uff0c\u8bf7\u9009\u62e9\u8ddd\u79bb\u60a8\u73b0\u6709\u4e91\u670d\u52a1\u5730\u533a\u6700\u8fd1\u7684\u533a\u57df\u3002","title":"\u6b65\u9aa4\u4e8c\uff1a\u9009\u62e9\u516c\u6709\u4e91\u670d\u52a1\u5546\u53ca\u5730\u533a"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#aws","text":"\u5730\u7406\u533a\u57df \u5730\u533a\u540d \u5730\u70b9 \u4e9a\u592a\u5730\u533a / Asia Pacific ap-southeast-1 \u65b0\u52a0\u5761","title":"AWS \u5730\u533a"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_4","text":"\u5730\u7406\u533a\u57df \u5730\u533a\u540d \u5730\u70b9 \u4e9a\u592a-\u4e2d\u56fd \u534e\u4e1c1 \u676d\u5dde","title":"\u963f\u91cc\u4e91\u5730\u533a"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_5","text":"","title":"\u6b65\u9aa4\u4e09\uff1a\u914d\u7f6e\u5b9e\u4f8b\u5bb9\u91cf"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_6","text":"\u9009\u62e9 Free Trial \uff0c\u4e91\u5e73\u53f0\u4f1a\u4e3a\u8be5\u5b9e\u4f8b\u6bcf\u6708\u63d0\u4f9b\u514d\u8d39\u7684\u8ba1\u7b97\u548c\u5b58\u50a8\u8d44\u6e90\u3002\u4f46\u5f53\u8ba1\u7b97\u6216\u5b58\u50a8\u8d44\u6e90\u7528\u5b8c\u65f6\uff0c\u5b9e\u4f8b\u7684\u90e8\u5206\u529f\u80fd\u5c06\u53d7\u5230\u9650\u5236\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u9650\u5236\u4f7f\u7528\u7684\u529f\u80fd \u8ba1\u7b97\u8d44\u6e90\u7528\u5b8c \u5b58\u50a8\u8d44\u6e90\u7528\u5b8c \u6570\u636e\u5e93\u8bfb\u64cd\u4f5c \u5426 \u662f \u6570\u636e\u5e93\u5199\u64cd\u4f5c \u5426 \u5426 \u67e5\u770b\u5b9e\u4f8b\u8be6\u60c5 \u662f \u662f \u67e5\u770b\u5b9e\u4f8b\u76d1\u63a7 \u662f \u662f \u8bf7\u6ce8\u610f\uff0c\u514d\u8d39\u5b9e\u4f8b\u7684\u6570\u636e\u5e93\u6027\u80fd\u7a33\u5b9a\u6027\u65e0\u6cd5\u4fdd\u8bc1\uff0c\u56e0\u6b64\u5efa\u8bae\u60a8\u4ec5\u7528\u4e8e\u4f53\u9a8c\u6216\u5b66\u4e60\u3002\u5bf9\u4e8e\u751f\u4ea7\u5e94\u7528\u573a\u666f\uff0c\u8bf7\u9009\u62e9 \u751f\u4ea7\u5b9e\u4f8b \u3002 \u5982\u679c\u60a8\u7684\u8ba1\u7b97\u8d44\u6e90\u4f7f\u7528\u5b8c\u540e\uff0cMO Cloud \u4f1a\u5728\u60a8\u521b\u5efa\u5b9e\u4f8b\u65e5\u671f\u7684\u4e00\u4e2a\u6708\u540e\u91cd\u65b0\u8d60\u9001\uff1b\u5b58\u50a8\u8d44\u6e90\u8fbe\u5230\u589e\u4e0a\u4e0a\u9650\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5220\u9664\u6570\u636e\u7684\u65b9\u5f0f\u91cd\u65b0\u83b7\u5f97\u6570\u636e\u5e93\u7684\u5199\u64cd\u4f5c\u3002","title":"\u514d\u8d39\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_7","text":"\u9009\u62e9 Production \uff0cMO Cloud \u4f1a\u4e3a\u8be5\u5b9e\u4f8b\u914d\u7f6e\u72ec\u7acb\u7684\u3001\u53ef\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u81ea\u52a8\u4f38\u7f29\u7684\u8ba1\u7b97\u8d44\u6e90\uff0c\u4ece\u800c\u5b9e\u73b0\u8fd1\u4e4e\u6781\u81f4\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u914d\u7f6e\u4ee5\u4e0b\u9009\u9879\uff1a Spend limit \uff1a \u8fd9\u4e00\u5f00\u5173\u53ef\u4ee5\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u7ba1\u7406\u5b9e\u4f8b\u7684\u82b1\u8d39\u3002\u5f53\u5b9e\u4f8b\u7684\u8ba1\u7b97\u548c\u5b58\u50a8\u82b1\u8d39\u8fbe\u5230\u60a8\u8bbe\u7f6e\u7684\u91d1\u989d\u9650\u5236\u65f6\uff0c\u4e91\u5e73\u53f0\u4f1a\u91c7\u53d6\u63aa\u65bd\u9650\u5236\u5b9e\u4f8b\u7684\u9ad8\u6027\u80fd\u670d\u52a1\uff0c\u4ee5\u63a7\u5236\u82b1\u8d39\u3002 \u5f53\u5f00\u542f Spend limit \u529f\u80fd\u65f6\uff0c\u60a8\u9700\u8981\u81f3\u5c11\u914d\u7f6e\u6708\u6d88\u8d39\u9650\u5236 - Monthly limit\uff0c\u60a8\u4e5f\u53ef\u4ee5\u540c\u65f6\u6253\u5f00\u65e5\u6d88\u8d39\u9650\u5236 - Daily limit\uff0c\u4efb\u610f\u9650\u5236\u5230\u8fbe\u540e\uff0c\u90fd\u4f1a\u89e6\u53d1 spend Limit \u884c\u4e3a\u3002 Service Keep On \uff1a \u4e00\u65e6 Spend limit \u88ab\u89e6\u53d1\uff0c\u5b9e\u4f8b\u7684\u8bbf\u95ee\u5c06\u9ed8\u8ba4\u505c\u6b62\u3002\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u4fdd\u6301\u670d\u52a1\u7684\u53ef\u7528\u6027\u3002Service Keep On \u529f\u80fd\u53ef\u4ee5\u4ee5\u4f4e\u6027\u80fd\u670d\u52a1\u65b9\u5f0f\u7ee7\u7eed\u4fdd\u6301\u670d\u52a1\uff0c\u5e76\u63a7\u5236\u82b1\u8d39\u3002 \u60a8\u53ef\u4ee5\u968f\u65f6\u4fee\u6539 Spend limit \u529f\u80fd\u7684\u8bbe\u7f6e\uff0c\u5305\u62ec\u5f00\u5173\u548c\u9650\u5236\u503c\uff0c\u4ee5\u66f4\u6539\u5b9e\u4f8b\u7684\u82b1\u8d39\u7b56\u7565\u3002\u8fd9\u4e9b\u4fee\u6539\u5c06\u7acb\u5373\u751f\u6548\u3002","title":"\u751f\u4ea7\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#-compute-unit-cu","text":"Compute Unit (CU) \u662f MatrixOne Cloud Serverless \u5b9e\u4f8b\u7684\u8ba1\u7b97\u8d44\u6e90\u5f00\u9500\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u6bcf\u4e2a SQL \u67e5\u8be2\u90fd\u4f1a\u6d88\u8017\u4e00\u5b9a\u6570\u91cf\u7684 CU\uff0c\u5176\u4e2d\u5305\u62ec CPU\u3001\u5185\u5b58\u548c I/O\u3002\u4e0d\u540c SQL \u67e5\u8be2\u7684 CU \u6d88\u8017\u4e0d\u540c\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u793a\u4f8b\uff1a \u67e5\u8be2 10K \u884c\uff0c\u6bcf\u884c 4 \u5b57\u8282\uff1a1 CU \u67e5\u8be2 25K \u884c\uff0c\u6bcf\u884c 4 \u5b57\u8282\uff1a3 CU \u63d2\u5165 2K \u884c\uff0c\u6bcf\u884c 4 \u5b57\u8282\uff1a0.01 CU \u63d2\u5165 10K \u884c\uff0c\u6bcf\u884c 4 \u5b57\u8282\uff1a0.02 CU \u66f4\u65b0 1 \u884c\uff0c\u6bcf\u884c 40 \u5b57\u8282\uff1a1 CU \u6211\u4eec\u6d4b\u8bd5\u4e86 TPC-H 1GB \u6570\u636e\u96c6\u7684\u67e5\u8be2 CU \u6d88\u8017\uff0c\u603b\u8ba1\u4e3a 1683 CUs\u3002 \u6709\u5173 CU \u7684\u5b9a\u4ef7\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 CU \u4ef7\u683c\u3002","title":"\u8ba1\u7b97\u8d44\u6e90 - Compute Unit (CU)"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_8","text":"","title":"\u6b65\u9aa4\u56db\uff1a\u8bbe\u7f6e\u8bbf\u95ee\u63a7\u5236"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_9","text":"\u5728\u521b\u5efa MO Cloud \u5b9e\u4f8b\u65f6\uff0c\u60a8\u9700\u8981\u8bbe\u7f6e\u5b9e\u4f8b\u7684\u6700\u9ad8\u6743\u9650\u7ba1\u7406\u5458\uff08admin\uff09\u7684\u5bc6\u7801\u3002\u4e3a\u4e86\u4fdd\u969c\u6570\u636e\u5e93\u7684\u5b89\u5168\u6027\uff0c\u5bc6\u7801\u9700\u7b26\u5408\u4ee5\u4e0b\u89c4\u5219\uff1a \u81f3\u5c11\u5305\u542b 8 \u4e2a\u5b57\u7b26 \u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u6570\u5b57 \u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd \u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd","title":"\u7ba1\u7406\u5458\u5bc6\u7801"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_10","text":"\u60a8\u53ef\u4ee5\u8bbe\u7f6e\u516c\u7f51\u8bbf\u95ee\u5b9e\u4f8b\u7684 IP \u767d\u540d\u5355\uff0c\u4ee5\u9632\u6b62\u6076\u610f IP \u5730\u5740\u8bbf\u95ee\u60a8\u7684\u7cfb\u7edf\u3002\u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u8003 IP \u767d\u540d\u5355\u7ae0\u8282\u3002","title":"\u7f51\u7edc\u5b89\u5168\u7b56\u7565"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#_11","text":"\u7cfb\u7edf\u5c06\u81ea\u52a8\u4e3a\u5b9e\u4f8b\u5206\u914d\u4e00\u4e2a\u540d\u79f0\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4fee\u6539\u540d\u79f0\u3002 \u5728\u53f3\u4fa7\u7684\u603b\u89c8\u4e2d\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u4e0a\u8ff0\u6b65\u9aa4\u4e2d\u7684\u5b9e\u4f8b\u89c4\u5212\u3002\u786e\u8ba4\u65e0\u8bef\u540e\uff0c\u70b9\u51fb Create Serverless Instance \u3002 \u5b9e\u4f8b\u5c06\u5728\u70b9\u51fb\u521b\u5efa\u540e\u7684\u51e0\u79d2\u5185\u5b8c\u6210\u521b\u5efa\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u76d1\u89c6\u5b9e\u4f8b\u5361\u7247\u4e2d\u7684\u5b9e\u4f8b\u72b6\u6001\u6765\u786e\u8ba4\u662f\u5426\u521b\u5efa\u6210\u529f\u3002\u521b\u5efa\u4e2d\u72b6\u6001\u4e3a Creating \uff0c\u521b\u5efa\u5b8c\u6210\u72b6\u6001\u4e3a Active \u3002","title":"\u6b65\u9aa4\u4e94\uff1a\u547d\u540d\u5e76\u521b\u5efa\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Instance-Mgmt/create-instance/#mo","text":"\u5728 M0 Cloud \u5b9e\u4f8b\u7ba1\u7406\u5e73\u53f0\u7684\u5b9e\u4f8b\u5217\u8868\u4e2d\uff0c\u627e\u5230\u9700\u8981\u8bbf\u95ee\u7684 MatrixOne \u5b9e\u4f8b\uff0c\u4f9d\u6b21\u70b9\u51fb Connect > Connect with 3rd tool \u3002 \u6b64\u65f6\u9875\u9762\u53f3\u4fa7\u5f39\u51fa\u8fde\u63a5\u5b9e\u4f8b\u7684\u547d\u4ee4\u7a97\u53e3\uff0cSQL Client \u4e0b\u65b9\u9009\u62e9\u5ba2\u6237\u7aef\uff0c\u590d\u5236\u4e0b\u65b9\u7684\u547d\u4ee4\u5373\u53ef\u3002 \u5e0c\u671b\u8fd9\u4e9b\u6b65\u9aa4\u6709\u52a9\u4e8e\u60a8\u6210\u529f\u521b\u5efa MatrixOne \u5b9e\u4f8b\uff01\u5982\u679c\u60a8\u9700\u8981\u66f4\u591a\u5e2e\u52a9\uff0c\u8bf7\u7ee7\u7eed\u67e5\u770b\u6211\u4eec\u7684\u6587\u6863\u6216\u8054\u7cfb\u652f\u6301\u56e2\u961f\u3002","title":"\u6b65\u9aa4\u516d\uff1a\u83b7\u53d6 MO \u5b9e\u4f8b\u7684\u8fde\u63a5\u547d\u4ee4"},{"location":"MatrixOne-Cloud/Instance-Mgmt/terminate-recovery-instance/","text":"\u7ec8\u6b62\u548c\u6062\u590d\u5b9e\u4f8b \u672c\u7bc7\u6587\u6863\u5c06\u4ecb\u7ecd\u5982\u4f55\u7ec8\u6b62\u548c\u6062\u590d\u5b9e\u4f8b\uff0c\u4ee5\u53ca\u76f8\u5173\u4ea7\u54c1\u884c\u4e3a\u3002 Note MO Cloud \u4e0d\u4f1a\u6c38\u4e45\u4fdd\u5b58\u5df2\u7ec8\u6b62\u5b9e\u4f8b\u7684\u72b6\u6001\uff0c\u8bf7\u8c28\u614e\u64cd\u4f5c\u3002\u5982\u679c\u4e0d\u614e\u5220\u9664\uff0c\u53ca\u65f6\u6062\u590d\u5b9e\u4f8b\u4ee5\u9632\u6570\u636e\u4e22\u5931\u3002 \u7ec8\u6b62\u5b9e\u4f8b \u70b9\u51fb\u83dc\u5355\u680f\u4e2d\u7684 Instances \u6309\u94ae\uff0c\u8fdb\u5165\u5b9e\u4f8b\u5217\u8868\u3002 \u5728 Active Instances \u9875\u7b7e\u4e2d\u9009\u62e9\u8981\u7ec8\u6b62\u7684\u5b9e\u4f8b\uff0c\u5728\u5b9e\u4f8b\u5361\u7247\u4e0a\u70b9\u51fb Terminate \u3002 \u5728\u5f39\u7a97\u4e2d\u786e\u8ba4\u8981\u7ec8\u6b62\u5b9e\u4f8b\u7684\u540d\u79f0\uff0c\u5b9e\u4f8b\u5c06\u8fdb\u5165\u7ec8\u6b62\u4e2d\u72b6\u6001\u3002\u6570\u79d2\u540e\uff0c\u5b9e\u4f8b\u5c06\u5b8c\u5168\u7ec8\u6b62\uff0c\u5e76\u663e\u793a\u5728 Terminated Instances \u9875\u7b7e\u4e2d\u3002 Note \u5b9e\u4f8b\u7ec8\u6b62\u540e\uff0c\u5c06\u7acb\u5373\u7ec8\u6b62\u6570\u636e\u5e93\u7684\u6240\u6709\u8bbf\u95ee\u8fde\u63a5\u3002 \u6211\u4eec\u4f1a\u4e3a\u7ec8\u6b62\u72b6\u6001\u7684\u5b9e\u4f8b\u4fdd\u7559 7 \u5929\u7684\u6570\u636e\uff0c7 \u5929\u540e\uff0cMO Cloud \u5c06\u81ea\u52a8\u6c38\u4e45\u5220\u9664\u8be5\u5b9e\u4f8b\u7684\u6570\u636e\u4fe1\u606f\u3002 \u6062\u590d\u5b9e\u4f8b \u5728 Terminated Instances \u9875\u7b7e\u5185\u7684\u5b9e\u4f8b\u53ef\u4ee5\u6062\u590d\u5230 Active Instances \uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\uff1a \u9009\u62e9\u8981\u6062\u590d\u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u70b9\u51fb Recovery \u6309\u94ae\u3002 \u5728\u5f39\u7a97\u4e2d\u786e\u8ba4\uff0c\u5b9e\u4f8b\u5c06\u5728\u6570\u79d2\u540e\u5b8c\u5168\u6062\u590d\u6b63\u5e38\u72b6\u6001\u3002 \u4ee5\u4e0b\u662f\u4e0d\u540c\u5b9e\u4f8b\u72b6\u6001\u4e0b\u53ef\u8fdb\u884c\u7684\u64cd\u4f5c\u548c\u5176\u4ed6\u76f8\u5173\u64cd\u4f5c\uff1a \u5b9e\u4f8b\u72b6\u6001\uff1aCreating \u63cf\u8ff0\uff1a\u521b\u5efa\u5b9e\u4f8b\u4e2d \u5b9e\u4f8b\u64cd\u4f5c\uff1a\u65e0 \u5176\u4ed6\u64cd\u4f5c\uff1a\u65e0 \u5b9e\u4f8b\u72b6\u6001\uff1aActive \u63cf\u8ff0\uff1a\u6b63\u5e38\u8fd0\u884c\u4e2d\uff0c\u53ef\u4ee5\u63d0\u4f9b\u670d\u52a1 \u5b9e\u4f8b\u64cd\u4f5c\uff1aTerminate \u5176\u4ed6\u64cd\u4f5c\uff1aConnect\u3001Monitoring\u3001\u5b9e\u4f8b\u8be6\u60c5\u3001Edit Spend Limit \u5b9e\u4f8b\u72b6\u6001\uff1aInactive \u63cf\u8ff0\uff1a\u5b9e\u4f8b\u72b6\u6001\u5f02\u5e38\uff0c\u65e0\u6cd5\u63d0\u4f9b\u5b8c\u6574\u670d\u52a1 \u5b9e\u4f8b\u64cd\u4f5c\uff1aTerminate \u5176\u4ed6\u64cd\u4f5c\uff1aMonitoring\u3001\u5b9e\u4f8b\u8be6\u60c5\u3001Edit Limit \u5b9e\u4f8b\u72b6\u6001\uff1aTerminating \u63cf\u8ff0\uff1a\u5b9e\u4f8b\u7ec8\u6b62\u4e2d \u5b9e\u4f8b\u64cd\u4f5c\uff1a\u65e0 \u5176\u4ed6\u64cd\u4f5c\uff1aMonitoring \u5b9e\u4f8b\u72b6\u6001\uff1aRecovering \u63cf\u8ff0\uff1a\u5b9e\u4f8b\u6062\u590d\u4e2d \u5b9e\u4f8b\u64cd\u4f5c\uff1a\u65e0 \u5176\u4ed6\u64cd\u4f5c\uff1aMonitoring \u5b9e\u4f8b\u72b6\u6001\uff1aUpgrading \u63cf\u8ff0\uff1a\u5b9e\u4f8b\u6b63\u5728\u5347\u7ea7\u4e2d \u5b9e\u4f8b\u64cd\u4f5c\uff1a\u65e0 \u5176\u4ed6\u64cd\u4f5c\uff1aConnect\u3001Monitoring\u3001\u5b9e\u4f8b\u8be6\u60c5\u3001Edit Spend Limit \u5b9e\u4f8b\u72b6\u6001\uff1aTerminated \u63cf\u8ff0\uff1a\u5b9e\u4f8b\u7ec8\u6b62 \u5b9e\u4f8b\u64cd\u4f5c\uff1aRecovery \u5176\u4ed6\u64cd\u4f5c\uff1aMonitoring \u5e0c\u671b\u8fd9\u4e9b\u64cd\u4f5c\u6307\u5357\u80fd\u591f\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u7ba1\u7406\u548c\u6062\u590d MatrixOne \u5b9e\u4f8b\u3002\u5982\u6709\u4efb\u4f55\u7591\u95ee\u6216\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u5e2e\u52a9\uff0c\u8bf7\u7ee7\u7eed\u67e5\u770b\u6211\u4eec\u7684\u6587\u6863\u6216\u8054\u7cfb\u652f\u6301\u56e2\u961f\u3002","title":"\u7ec8\u6b62\u548c\u6062\u590d\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Instance-Mgmt/terminate-recovery-instance/#_1","text":"\u672c\u7bc7\u6587\u6863\u5c06\u4ecb\u7ecd\u5982\u4f55\u7ec8\u6b62\u548c\u6062\u590d\u5b9e\u4f8b\uff0c\u4ee5\u53ca\u76f8\u5173\u4ea7\u54c1\u884c\u4e3a\u3002 Note MO Cloud \u4e0d\u4f1a\u6c38\u4e45\u4fdd\u5b58\u5df2\u7ec8\u6b62\u5b9e\u4f8b\u7684\u72b6\u6001\uff0c\u8bf7\u8c28\u614e\u64cd\u4f5c\u3002\u5982\u679c\u4e0d\u614e\u5220\u9664\uff0c\u53ca\u65f6\u6062\u590d\u5b9e\u4f8b\u4ee5\u9632\u6570\u636e\u4e22\u5931\u3002","title":"\u7ec8\u6b62\u548c\u6062\u590d\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Instance-Mgmt/terminate-recovery-instance/#_2","text":"\u70b9\u51fb\u83dc\u5355\u680f\u4e2d\u7684 Instances \u6309\u94ae\uff0c\u8fdb\u5165\u5b9e\u4f8b\u5217\u8868\u3002 \u5728 Active Instances \u9875\u7b7e\u4e2d\u9009\u62e9\u8981\u7ec8\u6b62\u7684\u5b9e\u4f8b\uff0c\u5728\u5b9e\u4f8b\u5361\u7247\u4e0a\u70b9\u51fb Terminate \u3002 \u5728\u5f39\u7a97\u4e2d\u786e\u8ba4\u8981\u7ec8\u6b62\u5b9e\u4f8b\u7684\u540d\u79f0\uff0c\u5b9e\u4f8b\u5c06\u8fdb\u5165\u7ec8\u6b62\u4e2d\u72b6\u6001\u3002\u6570\u79d2\u540e\uff0c\u5b9e\u4f8b\u5c06\u5b8c\u5168\u7ec8\u6b62\uff0c\u5e76\u663e\u793a\u5728 Terminated Instances \u9875\u7b7e\u4e2d\u3002 Note \u5b9e\u4f8b\u7ec8\u6b62\u540e\uff0c\u5c06\u7acb\u5373\u7ec8\u6b62\u6570\u636e\u5e93\u7684\u6240\u6709\u8bbf\u95ee\u8fde\u63a5\u3002 \u6211\u4eec\u4f1a\u4e3a\u7ec8\u6b62\u72b6\u6001\u7684\u5b9e\u4f8b\u4fdd\u7559 7 \u5929\u7684\u6570\u636e\uff0c7 \u5929\u540e\uff0cMO Cloud \u5c06\u81ea\u52a8\u6c38\u4e45\u5220\u9664\u8be5\u5b9e\u4f8b\u7684\u6570\u636e\u4fe1\u606f\u3002","title":"\u7ec8\u6b62\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Instance-Mgmt/terminate-recovery-instance/#_3","text":"\u5728 Terminated Instances \u9875\u7b7e\u5185\u7684\u5b9e\u4f8b\u53ef\u4ee5\u6062\u590d\u5230 Active Instances \uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\uff1a \u9009\u62e9\u8981\u6062\u590d\u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u70b9\u51fb Recovery \u6309\u94ae\u3002 \u5728\u5f39\u7a97\u4e2d\u786e\u8ba4\uff0c\u5b9e\u4f8b\u5c06\u5728\u6570\u79d2\u540e\u5b8c\u5168\u6062\u590d\u6b63\u5e38\u72b6\u6001\u3002 \u4ee5\u4e0b\u662f\u4e0d\u540c\u5b9e\u4f8b\u72b6\u6001\u4e0b\u53ef\u8fdb\u884c\u7684\u64cd\u4f5c\u548c\u5176\u4ed6\u76f8\u5173\u64cd\u4f5c\uff1a \u5b9e\u4f8b\u72b6\u6001\uff1aCreating \u63cf\u8ff0\uff1a\u521b\u5efa\u5b9e\u4f8b\u4e2d \u5b9e\u4f8b\u64cd\u4f5c\uff1a\u65e0 \u5176\u4ed6\u64cd\u4f5c\uff1a\u65e0 \u5b9e\u4f8b\u72b6\u6001\uff1aActive \u63cf\u8ff0\uff1a\u6b63\u5e38\u8fd0\u884c\u4e2d\uff0c\u53ef\u4ee5\u63d0\u4f9b\u670d\u52a1 \u5b9e\u4f8b\u64cd\u4f5c\uff1aTerminate \u5176\u4ed6\u64cd\u4f5c\uff1aConnect\u3001Monitoring\u3001\u5b9e\u4f8b\u8be6\u60c5\u3001Edit Spend Limit \u5b9e\u4f8b\u72b6\u6001\uff1aInactive \u63cf\u8ff0\uff1a\u5b9e\u4f8b\u72b6\u6001\u5f02\u5e38\uff0c\u65e0\u6cd5\u63d0\u4f9b\u5b8c\u6574\u670d\u52a1 \u5b9e\u4f8b\u64cd\u4f5c\uff1aTerminate \u5176\u4ed6\u64cd\u4f5c\uff1aMonitoring\u3001\u5b9e\u4f8b\u8be6\u60c5\u3001Edit Limit \u5b9e\u4f8b\u72b6\u6001\uff1aTerminating \u63cf\u8ff0\uff1a\u5b9e\u4f8b\u7ec8\u6b62\u4e2d \u5b9e\u4f8b\u64cd\u4f5c\uff1a\u65e0 \u5176\u4ed6\u64cd\u4f5c\uff1aMonitoring \u5b9e\u4f8b\u72b6\u6001\uff1aRecovering \u63cf\u8ff0\uff1a\u5b9e\u4f8b\u6062\u590d\u4e2d \u5b9e\u4f8b\u64cd\u4f5c\uff1a\u65e0 \u5176\u4ed6\u64cd\u4f5c\uff1aMonitoring \u5b9e\u4f8b\u72b6\u6001\uff1aUpgrading \u63cf\u8ff0\uff1a\u5b9e\u4f8b\u6b63\u5728\u5347\u7ea7\u4e2d \u5b9e\u4f8b\u64cd\u4f5c\uff1a\u65e0 \u5176\u4ed6\u64cd\u4f5c\uff1aConnect\u3001Monitoring\u3001\u5b9e\u4f8b\u8be6\u60c5\u3001Edit Spend Limit \u5b9e\u4f8b\u72b6\u6001\uff1aTerminated \u63cf\u8ff0\uff1a\u5b9e\u4f8b\u7ec8\u6b62 \u5b9e\u4f8b\u64cd\u4f5c\uff1aRecovery \u5176\u4ed6\u64cd\u4f5c\uff1aMonitoring \u5e0c\u671b\u8fd9\u4e9b\u64cd\u4f5c\u6307\u5357\u80fd\u591f\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u7ba1\u7406\u548c\u6062\u590d MatrixOne \u5b9e\u4f8b\u3002\u5982\u6709\u4efb\u4f55\u7591\u95ee\u6216\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u5e2e\u52a9\uff0c\u8bf7\u7ee7\u7eed\u67e5\u770b\u6211\u4eec\u7684\u6587\u6863\u6216\u8054\u7cfb\u652f\u6301\u56e2\u961f\u3002","title":"\u6062\u590d\u5b9e\u4f8b"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/","text":"MatrixOne Cloud\uff1a\u4e91\u539f\u751f\u6570\u636e\u5e73\u53f0\u7684\u672a\u6765 MatrixOne Cloud (MO Cloud) \u662f\u4e00\u4e2a\u5168\u6258\u7ba1\u4e91\u539f\u751f\u6570\u636e\u5e73\u53f0\uff0c\u5b83\u63d0\u4f9b\u4e86 HSTAP \u6570\u636e\u5e93 MatrixOne (MO) \u7684\u4e91\u4e0a\u670d\u52a1\uff0c\u6781\u5927\u7b80\u5316\u4e86 MO \u7684\u90e8\u7f72\u548c\u8fd0\u7ef4\u6210\u672c\u3002\u6240\u63d0\u4f9b\u7684 Serverless \u5b9e\u4f8b\u652f\u6301\u8ba1\u7b97\u8d44\u6e90\u7684\u81ea\u52a8\u5f39\u6027\u4f38\u7f29\u4ee5\u53ca\u6309 SQL \u7528\u91cf\u8ba1\u8d39\uff0c\u5e2e\u52a9\u7528\u6237\u4e0d\u5728\u5173\u6ce8\u6570\u636e\u5e93\u7684\u590d\u6742\u6027\uff0c\u800c\u662f\u5e94\u7528\u7a0b\u5e8f\u53caSQL \u672c\u8eab\u3002MO Cloud \u76ee\u524d\u652f\u6301\u5728 Amazon Web Services (AWS) \u548c\u963f\u91cc\u4e91\u4e0a\u521b\u5efa\u6570\u636e\u5e93\u5b9e\u4f8b\u3002 MatrixOne Cloud \u67b6\u6784 MO Cloud \u91c7\u7528\u4e86\u5b58\u7b97\u5206\u79bb\u67b6\u6784\uff0c\u4f7f\u5f97\u8ba1\u7b97\u8282\u70b9\u53ef\u4ee5\u6839\u636e\u9700\u8981\u81ea\u7531\u6269\u7f29\u5bb9\uff0c\u540c\u65f6\u901a\u8fc7\u51b7\u70ed\u5206\u79bb\u7684\u5b58\u50a8\u65b9\u6848\uff0c\u6700\u5927\u7a0b\u5ea6\u5730\u964d\u4f4e\u4e86\u5b58\u50a8\u6210\u672c\u3002 MO Cloud \u67b6\u6784\u56fe\u5982\u4e0b\u6240\u793a\uff1a \u5171\u4eab\u5b58\u50a8\u5c42 \u8fd9\u4e00\u5c42\u5305\u62ec\u5171\u4eab\u5b58\u50a8\uff08Shared Storage\uff09\u548c\u5171\u4eab\u65e5\u5fd7\uff08Log Service\uff09\u3002\u5728 DN \u8282\u70b9\u5b8c\u6210\u51b2\u7a81\u68c0\u6d4b\u540e\uff0c\u4e8b\u52a1\u7684\u65e5\u5fd7\u5c06\u88ab\u5199\u5165 Log Service\uff0c\u4ece\u800c\u786e\u4fdd\u9ad8\u6027\u80fd\u7684\u65e5\u5fd7\u8bfb\u5199\u3002\u8fd9\u4e00\u5c42\u8fd8\u57fa\u4e8e\u7edf\u4e00\u5b58\u50a8\u5f15\u64ce TAE\uff0c\u652f\u6301\u6570\u636e\u7684\u884c\u5217\u5b58\u50a8\u548c\u5904\u7406\uff0c\u5c06\u6570\u636e\u53ef\u9760\u5730\u5b58\u50a8\u5230 S3 \u7b49\u5b58\u50a8\u4ecb\u8d28\u3002\u901a\u8fc7 Cache \u548c S3 \u7684\u51b7\u70ed\u6570\u636e\u5206\u7ea7\u5b58\u50a8\u7b56\u7565\uff0cMO Cloud \u4e0d\u4ec5\u7b80\u5316\u4e86\u6570\u636e\u7684\u7f13\u5b58\u3001\u8fc1\u79fb\u548c\u6821\u9a8c\u7b49\u64cd\u4f5c\uff0c\u8fd8\u63d0\u9ad8\u4e86\u6570\u636e\u64cd\u4f5c\u7684\u5e76\u53d1\u80fd\u529b\uff0c\u964d\u4f4e\u4e86\u5b58\u50a8\u6210\u672c\u3002 \u4e8b\u52a1\u5c42 \u4e8b\u52a1\u5c42\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u51b2\u7a81\u68c0\u6d4b\uff0c\u4fdd\u8bc1\u4e86\u4e8b\u52a1\u548c\u5143\u6570\u636e\u7684\u5904\u7406\u4ee5\u53ca\u5171\u4eab\u65e5\u5fd7\u7684\u9ad8\u53ef\u9760\u6027\u548c\u5f3a\u4e00\u81f4\u6027\u3002 \u8ba1\u7b97\u5c42 \u8ba1\u7b97\u5c42\u63a5\u6536\u5ba2\u6237\u7aef\u548c\u9a71\u52a8\u7a0b\u5e8f\u7684SQL\u8bf7\u6c42\uff0c\u751f\u6210\u903b\u8f91\u6267\u884c\u8ba1\u5212\uff0c\u5e76\u901a\u8fc7\u4f18\u5316\u5668\u751f\u6210\u7269\u7406\u6267\u884c\u8ba1\u5212\uff0c\u7136\u540e\u5c06\u5176\u5206\u53d1\u5230\u5404\u4e2a\u8ba1\u7b97\u8282\u70b9\uff08CN \u8282\u70b9\uff09\u8fdb\u884c\u5206\u5e03\u5f0f\u6267\u884c\u3002CN \u8282\u70b9\u5b8c\u5168\u5b9e\u73b0\u4e86 Serverless \u5316\uff0c\u53ef\u4ee5\u6839\u636e\u5de5\u4f5c\u8d1f\u8f7d\u7684\u9700\u6c42\u81ea\u52a8\u4f38\u7f29\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u8d44\u6e90\u7684\u6700\u4f18\u5229\u7528\u3002 \u4e91\u670d\u52a1\u5c42 \u4e91\u670d\u52a1\u5c42\u662f MO Cloud \u4e2d\u5404\u9879\u670d\u52a1\u7684\u96c6\u5408\uff0c\u5b83\u4eec\u534f\u8c03\u7740 MO Cloud \u7684\u5404\u4e2a\u7ec4\u4ef6\uff0c\u4ee5\u5904\u7406\u7528\u6237\u7684\u8bf7\u6c42\u3002\u8fd9\u4e9b\u670d\u52a1\u5305\u62ec\u8eab\u4efd\u8ba4\u8bc1\u548c\u8bbf\u95ee\u63a7\u5236\u3001\u57fa\u7840\u8bbe\u65bd\u7ba1\u7406\u3001\u6570\u636e\u5e93\u5b9e\u4f8b\u7ba1\u7406\u3001\u67e5\u8be2\u5206\u6790\u4ee5\u53ca\u6570\u636e\u5b89\u5168\u7b49\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u5168\u9762\u7684\u4e91\u670d\u52a1\u652f\u6301\u3002 MatrixOne Cloud \u6838\u5fc3\u7279\u6027 MO Cloud \u6ce8\u91cd\u7528\u6237\u4f53\u9a8c\uff0c\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u6838\u5fc3\u7279\u6027\uff0c\u8ba9\u7528\u6237\u8f7b\u677e\u9a7e\u9a6d\u6570\u636e\u5e73\u53f0\uff1a \u96f6\u95e8\u69db\u90e8\u7f72 \u90e8\u7f72\u81ea\u52a8\u5316\uff1a \u7b80\u5355\u7684\u914d\u7f6e\u5373\u53ef\u521b\u5efa Serverless \u6570\u636e\u5e93\u5b9e\u4f8b\uff0c\u65e0\u9700\u5173\u5fc3\u7e41\u7410\u7684\u96c6\u7fa4\u90e8\u7f72\u6d41\u7a0b\uff0c\u4e5f\u65e0\u9700\u62c5\u5fc3\u5e95\u5c42\u673a\u5668\u548c\u8d44\u6e90\u3002 \u5b9e\u4f8b\u79d2\u7ea7\u521b\u5efa\uff1a \u5feb\u901f\u90e8\u7f72\u6570\u636e\u5e93\u5b9e\u4f8b\uff0c\u79d2\u7ea7\u7b49\u5f85\uff0c\u8ba9\u4f60\u5feb\u901f\u8fdb\u5165\u4f7f\u7528\u72b6\u6001\u3002 \u5168\u6258\u7ba1\u6570\u636e\u670d\u52a1 \u4e30\u5bccWeb\u7ba1\u7406\u529f\u80fd\uff1a \u63d0\u4f9b\u53ef\u89c6\u5316\u5b9e\u4f8b\u7ba1\u7406\u754c\u9762\u548c\u6570\u636e\u5bf9\u8c61\u7ba1\u7406\uff0c\u652f\u6301\u5b9e\u4f8b\u7684\u4e00\u952e\u8fde\u63a5\u3001\u505c\u6b62\u548c\u6062\u590d\u3002 \u5b9e\u65f6\u4e1a\u52a1\u76d1\u63a7\uff1a \u63d0\u4f9b\u591a\u7ef4\u5ea6\u7684\u76d1\u63a7\u4f53\u7cfb\uff0c\u5305\u62ec\u5b9e\u4f8b\u4f7f\u7528\u76d1\u63a7\u3001SQL \u6027\u80fd\u76d1\u63a7\u3001\u4e8b\u52a1\u76d1\u63a7\u7b49\uff0c\u52a9\u529b\u4f60\u5b9e\u65f6\u638c\u63e1\u6570\u636e\u5e93\u8fd0\u884c\u72b6\u6001\u3002 Serverless \u5316 SQL \u4f53\u9a8c \u6309SQL\u7528\u91cf\u8ba1\u8d39\uff1a \u4ee5 CU\uff08Compute Unit\uff09\u4e3a\u8ba1\u91cf\u5355\u4f4d\uff0c\u6309\u5b9e\u9645 SQL \u6d88\u8017\u8ba1\u8d39\uff0c\u8ba9\u4f60\u4e13\u6ce8\u4e8e SQL \u9700\u6c42\u672c\u8eab\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u6210\u672c\u3002 \u6781\u81f4SQL\u6027\u80fd\uff1a \u5b9e\u9645\u8ba1\u7b97\u8d44\u6e90\u4f1a\u81ea\u52a8\u5f39\u6027\u6269\u5c55\uff0c\u6c38\u8fdc\u4fdd\u8bc1\u6700\u4f73\u6027\u80fd\u4f53\u9a8c\u3002\u4e0d\u540c\u5b9e\u4f8b\u95f4\u8d44\u6e90\u76f8\u4e92\u9694\u79bb\uff0cSQL \u6027\u80fd\u4e92\u4e0d\u5e72\u6270\u3002 \u6781\u901f\u5728\u7ebf\u5206\u6790 \u5728\u7ebfSQL\u7f16\u8f91\u5668\uff1a \u7528\u6237\u53cb\u597d\u7684\u5728\u7ebfSQL\u7f16\u8f91\u5668\u548c\u4e92\u52a8\u5f0f\u6559\u7a0b\uff0c\u540c\u65f6\u63d0\u4f9b\u5f3a\u5927\u7684 SQL \u5206\u6790\u529f\u80fd\uff0c\u8ba9\u4f60\u5feb\u901f\u4e0a\u624b\u6570\u636e\u5e93\u5e94\u7528\u5f00\u53d1\u3002 \u6781\u901fOLTP/OLAP\u5206\u6790\uff1a \u652f\u6301\u4e0d\u540c\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5305\u62ec\u70b9\u67e5\u8be2\u3001\u6279\u67e5\u8be2\u7b49\uff0c\u90fd\u5177\u5907\u51fa\u8272\u7684\u5206 \u6790\u6027\u80fd\u3002 \u591a\u4e91\u90e8\u7f72\u652f\u6301 \u591a\u516c\u6709\u4e91\u90e8\u7f72\uff1a \u652f\u6301\u5728\u4e0d\u540c\u516c\u6709\u4e91\u7684DaaS\u670d\u52a1\u4e0a\u90e8\u7f72\uff0c\u6ee1\u8db3\u591a\u5e94\u7528\u4e0d\u540c\u5730\u57df\u7684\u8bbf\u95ee\u9700\u6c42\u3002 \u6df7\u5408\u4e91\u90e8\u7f72\uff1a \u652f\u6301\u6df7\u5408\u4e91\u90e8\u7f72\uff0c\u65e0\u8bba\u662f\u516c\u6709\u4e91\u8fd8\u662f On-premise\uff0c\u90fd\u80fd\u63d0\u4f9b\u7edf\u4e00\u7684\u90e8\u7f72\u548c\u7ba1\u7406\u65b9\u6848\uff0c\u8ba9\u4f60\u7684\u6570\u636e\u66f4\u7075\u6d3b\uff0c\u66f4\u53ef\u63a7\u3002 MO Cloud\u662f\u6570\u636e\u5e73\u53f0\u7684\u672a\u6765\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u5353\u8d8a\u7684\u6027\u80fd\u3001\u9ad8\u5ea6\u7684\u5f39\u6027\u548c\u6781\u81f4\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u5e2e\u52a9\u4f01\u4e1a\u66f4\u597d\u5730\u5e94\u5bf9\u6570\u636e\u7ba1\u7406\u548c\u5206\u6790\u7684\u6311\u6218\uff0c\u8d70\u5411\u6570\u636e\u9a71\u52a8\u7684\u672a\u6765\u3002\u4e0d\u7ba1\u4f60\u662f\u5f00\u53d1\u8005\u3001\u6570\u636e\u5de5\u7a0b\u5e08\u8fd8\u662f\u4f01\u4e1a\u9886\u5bfc\uff0cMO Cloud\u90fd\u5c06\u662f\u4f60\u5b9e\u73b0\u6570\u636e\u613f\u666f\u7684\u7406\u60f3\u4e4b\u9009\u3002\u73b0\u5728\u5c31\u4f53\u9a8cMO Cloud\uff0c\u5f00\u542f\u6570\u636e\u4e4b\u65c5\uff01","title":"MatrixOne Cloud \u7b80\u4ecb"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#matrixone-cloud","text":"MatrixOne Cloud (MO Cloud) \u662f\u4e00\u4e2a\u5168\u6258\u7ba1\u4e91\u539f\u751f\u6570\u636e\u5e73\u53f0\uff0c\u5b83\u63d0\u4f9b\u4e86 HSTAP \u6570\u636e\u5e93 MatrixOne (MO) \u7684\u4e91\u4e0a\u670d\u52a1\uff0c\u6781\u5927\u7b80\u5316\u4e86 MO \u7684\u90e8\u7f72\u548c\u8fd0\u7ef4\u6210\u672c\u3002\u6240\u63d0\u4f9b\u7684 Serverless \u5b9e\u4f8b\u652f\u6301\u8ba1\u7b97\u8d44\u6e90\u7684\u81ea\u52a8\u5f39\u6027\u4f38\u7f29\u4ee5\u53ca\u6309 SQL \u7528\u91cf\u8ba1\u8d39\uff0c\u5e2e\u52a9\u7528\u6237\u4e0d\u5728\u5173\u6ce8\u6570\u636e\u5e93\u7684\u590d\u6742\u6027\uff0c\u800c\u662f\u5e94\u7528\u7a0b\u5e8f\u53caSQL \u672c\u8eab\u3002MO Cloud \u76ee\u524d\u652f\u6301\u5728 Amazon Web Services (AWS) \u548c\u963f\u91cc\u4e91\u4e0a\u521b\u5efa\u6570\u636e\u5e93\u5b9e\u4f8b\u3002","title":"MatrixOne Cloud\uff1a\u4e91\u539f\u751f\u6570\u636e\u5e73\u53f0\u7684\u672a\u6765"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#matrixone-cloud_1","text":"MO Cloud \u91c7\u7528\u4e86\u5b58\u7b97\u5206\u79bb\u67b6\u6784\uff0c\u4f7f\u5f97\u8ba1\u7b97\u8282\u70b9\u53ef\u4ee5\u6839\u636e\u9700\u8981\u81ea\u7531\u6269\u7f29\u5bb9\uff0c\u540c\u65f6\u901a\u8fc7\u51b7\u70ed\u5206\u79bb\u7684\u5b58\u50a8\u65b9\u6848\uff0c\u6700\u5927\u7a0b\u5ea6\u5730\u964d\u4f4e\u4e86\u5b58\u50a8\u6210\u672c\u3002 MO Cloud \u67b6\u6784\u56fe\u5982\u4e0b\u6240\u793a\uff1a","title":"MatrixOne Cloud \u67b6\u6784"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#_1","text":"\u8fd9\u4e00\u5c42\u5305\u62ec\u5171\u4eab\u5b58\u50a8\uff08Shared Storage\uff09\u548c\u5171\u4eab\u65e5\u5fd7\uff08Log Service\uff09\u3002\u5728 DN \u8282\u70b9\u5b8c\u6210\u51b2\u7a81\u68c0\u6d4b\u540e\uff0c\u4e8b\u52a1\u7684\u65e5\u5fd7\u5c06\u88ab\u5199\u5165 Log Service\uff0c\u4ece\u800c\u786e\u4fdd\u9ad8\u6027\u80fd\u7684\u65e5\u5fd7\u8bfb\u5199\u3002\u8fd9\u4e00\u5c42\u8fd8\u57fa\u4e8e\u7edf\u4e00\u5b58\u50a8\u5f15\u64ce TAE\uff0c\u652f\u6301\u6570\u636e\u7684\u884c\u5217\u5b58\u50a8\u548c\u5904\u7406\uff0c\u5c06\u6570\u636e\u53ef\u9760\u5730\u5b58\u50a8\u5230 S3 \u7b49\u5b58\u50a8\u4ecb\u8d28\u3002\u901a\u8fc7 Cache \u548c S3 \u7684\u51b7\u70ed\u6570\u636e\u5206\u7ea7\u5b58\u50a8\u7b56\u7565\uff0cMO Cloud \u4e0d\u4ec5\u7b80\u5316\u4e86\u6570\u636e\u7684\u7f13\u5b58\u3001\u8fc1\u79fb\u548c\u6821\u9a8c\u7b49\u64cd\u4f5c\uff0c\u8fd8\u63d0\u9ad8\u4e86\u6570\u636e\u64cd\u4f5c\u7684\u5e76\u53d1\u80fd\u529b\uff0c\u964d\u4f4e\u4e86\u5b58\u50a8\u6210\u672c\u3002","title":"\u5171\u4eab\u5b58\u50a8\u5c42"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#_2","text":"\u4e8b\u52a1\u5c42\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u51b2\u7a81\u68c0\u6d4b\uff0c\u4fdd\u8bc1\u4e86\u4e8b\u52a1\u548c\u5143\u6570\u636e\u7684\u5904\u7406\u4ee5\u53ca\u5171\u4eab\u65e5\u5fd7\u7684\u9ad8\u53ef\u9760\u6027\u548c\u5f3a\u4e00\u81f4\u6027\u3002","title":"\u4e8b\u52a1\u5c42"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#_3","text":"\u8ba1\u7b97\u5c42\u63a5\u6536\u5ba2\u6237\u7aef\u548c\u9a71\u52a8\u7a0b\u5e8f\u7684SQL\u8bf7\u6c42\uff0c\u751f\u6210\u903b\u8f91\u6267\u884c\u8ba1\u5212\uff0c\u5e76\u901a\u8fc7\u4f18\u5316\u5668\u751f\u6210\u7269\u7406\u6267\u884c\u8ba1\u5212\uff0c\u7136\u540e\u5c06\u5176\u5206\u53d1\u5230\u5404\u4e2a\u8ba1\u7b97\u8282\u70b9\uff08CN \u8282\u70b9\uff09\u8fdb\u884c\u5206\u5e03\u5f0f\u6267\u884c\u3002CN \u8282\u70b9\u5b8c\u5168\u5b9e\u73b0\u4e86 Serverless \u5316\uff0c\u53ef\u4ee5\u6839\u636e\u5de5\u4f5c\u8d1f\u8f7d\u7684\u9700\u6c42\u81ea\u52a8\u4f38\u7f29\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u8d44\u6e90\u7684\u6700\u4f18\u5229\u7528\u3002","title":"\u8ba1\u7b97\u5c42"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#_4","text":"\u4e91\u670d\u52a1\u5c42\u662f MO Cloud \u4e2d\u5404\u9879\u670d\u52a1\u7684\u96c6\u5408\uff0c\u5b83\u4eec\u534f\u8c03\u7740 MO Cloud \u7684\u5404\u4e2a\u7ec4\u4ef6\uff0c\u4ee5\u5904\u7406\u7528\u6237\u7684\u8bf7\u6c42\u3002\u8fd9\u4e9b\u670d\u52a1\u5305\u62ec\u8eab\u4efd\u8ba4\u8bc1\u548c\u8bbf\u95ee\u63a7\u5236\u3001\u57fa\u7840\u8bbe\u65bd\u7ba1\u7406\u3001\u6570\u636e\u5e93\u5b9e\u4f8b\u7ba1\u7406\u3001\u67e5\u8be2\u5206\u6790\u4ee5\u53ca\u6570\u636e\u5b89\u5168\u7b49\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u5168\u9762\u7684\u4e91\u670d\u52a1\u652f\u6301\u3002","title":"\u4e91\u670d\u52a1\u5c42"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#matrixone-cloud_2","text":"MO Cloud \u6ce8\u91cd\u7528\u6237\u4f53\u9a8c\uff0c\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u6838\u5fc3\u7279\u6027\uff0c\u8ba9\u7528\u6237\u8f7b\u677e\u9a7e\u9a6d\u6570\u636e\u5e73\u53f0\uff1a","title":"MatrixOne Cloud \u6838\u5fc3\u7279\u6027"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#_5","text":"\u90e8\u7f72\u81ea\u52a8\u5316\uff1a \u7b80\u5355\u7684\u914d\u7f6e\u5373\u53ef\u521b\u5efa Serverless \u6570\u636e\u5e93\u5b9e\u4f8b\uff0c\u65e0\u9700\u5173\u5fc3\u7e41\u7410\u7684\u96c6\u7fa4\u90e8\u7f72\u6d41\u7a0b\uff0c\u4e5f\u65e0\u9700\u62c5\u5fc3\u5e95\u5c42\u673a\u5668\u548c\u8d44\u6e90\u3002 \u5b9e\u4f8b\u79d2\u7ea7\u521b\u5efa\uff1a \u5feb\u901f\u90e8\u7f72\u6570\u636e\u5e93\u5b9e\u4f8b\uff0c\u79d2\u7ea7\u7b49\u5f85\uff0c\u8ba9\u4f60\u5feb\u901f\u8fdb\u5165\u4f7f\u7528\u72b6\u6001\u3002","title":"\u96f6\u95e8\u69db\u90e8\u7f72"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#_6","text":"\u4e30\u5bccWeb\u7ba1\u7406\u529f\u80fd\uff1a \u63d0\u4f9b\u53ef\u89c6\u5316\u5b9e\u4f8b\u7ba1\u7406\u754c\u9762\u548c\u6570\u636e\u5bf9\u8c61\u7ba1\u7406\uff0c\u652f\u6301\u5b9e\u4f8b\u7684\u4e00\u952e\u8fde\u63a5\u3001\u505c\u6b62\u548c\u6062\u590d\u3002 \u5b9e\u65f6\u4e1a\u52a1\u76d1\u63a7\uff1a \u63d0\u4f9b\u591a\u7ef4\u5ea6\u7684\u76d1\u63a7\u4f53\u7cfb\uff0c\u5305\u62ec\u5b9e\u4f8b\u4f7f\u7528\u76d1\u63a7\u3001SQL \u6027\u80fd\u76d1\u63a7\u3001\u4e8b\u52a1\u76d1\u63a7\u7b49\uff0c\u52a9\u529b\u4f60\u5b9e\u65f6\u638c\u63e1\u6570\u636e\u5e93\u8fd0\u884c\u72b6\u6001\u3002","title":"\u5168\u6258\u7ba1\u6570\u636e\u670d\u52a1"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#serverless-sql","text":"\u6309SQL\u7528\u91cf\u8ba1\u8d39\uff1a \u4ee5 CU\uff08Compute Unit\uff09\u4e3a\u8ba1\u91cf\u5355\u4f4d\uff0c\u6309\u5b9e\u9645 SQL \u6d88\u8017\u8ba1\u8d39\uff0c\u8ba9\u4f60\u4e13\u6ce8\u4e8e SQL \u9700\u6c42\u672c\u8eab\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u6210\u672c\u3002 \u6781\u81f4SQL\u6027\u80fd\uff1a \u5b9e\u9645\u8ba1\u7b97\u8d44\u6e90\u4f1a\u81ea\u52a8\u5f39\u6027\u6269\u5c55\uff0c\u6c38\u8fdc\u4fdd\u8bc1\u6700\u4f73\u6027\u80fd\u4f53\u9a8c\u3002\u4e0d\u540c\u5b9e\u4f8b\u95f4\u8d44\u6e90\u76f8\u4e92\u9694\u79bb\uff0cSQL \u6027\u80fd\u4e92\u4e0d\u5e72\u6270\u3002","title":"Serverless \u5316 SQL \u4f53\u9a8c"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#_7","text":"\u5728\u7ebfSQL\u7f16\u8f91\u5668\uff1a \u7528\u6237\u53cb\u597d\u7684\u5728\u7ebfSQL\u7f16\u8f91\u5668\u548c\u4e92\u52a8\u5f0f\u6559\u7a0b\uff0c\u540c\u65f6\u63d0\u4f9b\u5f3a\u5927\u7684 SQL \u5206\u6790\u529f\u80fd\uff0c\u8ba9\u4f60\u5feb\u901f\u4e0a\u624b\u6570\u636e\u5e93\u5e94\u7528\u5f00\u53d1\u3002 \u6781\u901fOLTP/OLAP\u5206\u6790\uff1a \u652f\u6301\u4e0d\u540c\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5305\u62ec\u70b9\u67e5\u8be2\u3001\u6279\u67e5\u8be2\u7b49\uff0c\u90fd\u5177\u5907\u51fa\u8272\u7684\u5206 \u6790\u6027\u80fd\u3002","title":"\u6781\u901f\u5728\u7ebf\u5206\u6790"},{"location":"MatrixOne-Cloud/Overview/matrixonecloud-introduction/#_8","text":"\u591a\u516c\u6709\u4e91\u90e8\u7f72\uff1a \u652f\u6301\u5728\u4e0d\u540c\u516c\u6709\u4e91\u7684DaaS\u670d\u52a1\u4e0a\u90e8\u7f72\uff0c\u6ee1\u8db3\u591a\u5e94\u7528\u4e0d\u540c\u5730\u57df\u7684\u8bbf\u95ee\u9700\u6c42\u3002 \u6df7\u5408\u4e91\u90e8\u7f72\uff1a \u652f\u6301\u6df7\u5408\u4e91\u90e8\u7f72\uff0c\u65e0\u8bba\u662f\u516c\u6709\u4e91\u8fd8\u662f On-premise\uff0c\u90fd\u80fd\u63d0\u4f9b\u7edf\u4e00\u7684\u90e8\u7f72\u548c\u7ba1\u7406\u65b9\u6848\uff0c\u8ba9\u4f60\u7684\u6570\u636e\u66f4\u7075\u6d3b\uff0c\u66f4\u53ef\u63a7\u3002 MO Cloud\u662f\u6570\u636e\u5e73\u53f0\u7684\u672a\u6765\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u5353\u8d8a\u7684\u6027\u80fd\u3001\u9ad8\u5ea6\u7684\u5f39\u6027\u548c\u6781\u81f4\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u5e2e\u52a9\u4f01\u4e1a\u66f4\u597d\u5730\u5e94\u5bf9\u6570\u636e\u7ba1\u7406\u548c\u5206\u6790\u7684\u6311\u6218\uff0c\u8d70\u5411\u6570\u636e\u9a71\u52a8\u7684\u672a\u6765\u3002\u4e0d\u7ba1\u4f60\u662f\u5f00\u53d1\u8005\u3001\u6570\u636e\u5de5\u7a0b\u5e08\u8fd8\u662f\u4f01\u4e1a\u9886\u5bfc\uff0cMO Cloud\u90fd\u5c06\u662f\u4f60\u5b9e\u73b0\u6570\u636e\u613f\u666f\u7684\u7406\u60f3\u4e4b\u9009\u3002\u73b0\u5728\u5c31\u4f53\u9a8cMO Cloud\uff0c\u5f00\u542f\u6570\u636e\u4e4b\u65c5\uff01","title":"\u591a\u4e91\u90e8\u7f72\u652f\u6301"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/","text":"MySQL \u517c\u5bb9\u6027 \u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u5bf9\u6bd4\u5e76\u4ecb\u7ecd MatrixOne Cloud \u6570\u636e\u5e93\u7684 MySQL \u6a21\u5f0f\u4ee5\u53ca\u539f\u751f MySQL \u6570\u636e\u5e93\u7684\u517c\u5bb9\u6027\u4fe1\u606f\u3002 MatrixOne Cloud \u4e0e MySQL 8.0 \u7684\u534f\u8bae\uff0c\u4ee5\u53ca MySQL 8.0 \u5e38\u7528\u7684\u529f\u80fd\u548c\u8bed\u6cd5\u90fd\u5177\u6709\u9ad8\u5ea6\u7684\u517c\u5bb9\u6027\u3002\u6b64\u5916\uff0cMatrixOne Cloud \u4e5f\u5bf9\u5e38\u89c1\u7684 MySQL \u5468\u8fb9\u5de5\u5177\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u5982 Navicat\uff0cMySQL Workbench\uff0cJDBC \u7b49\u3002\u7136\u800c\uff0c\u7531\u4e8e MatrixOne Cloud \u7684\u6280\u672f\u67b6\u6784\u4e0d\u540c\uff0c\u4e14\u4ecd\u5904\u4e8e\u53d1\u5c55\u548c\u5b8c\u5584\u9636\u6bb5\uff0c\u56e0\u6b64\u6709\u4e00\u4e9b\u529f\u80fd\u5c1a\u672a\u5f97\u5230\u652f\u6301\u3002\u672c\u8282\u5c06\u4e3b\u8981\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u8be6\u8ff0 MatrixOne Cloud \u6570\u636e\u5e93\u7684 MySQL \u6a21\u5f0f\u4e0e\u539f\u751f MySQL \u6570\u636e\u5e93\u7684\u533a\u522b\uff1a DDL \u8bed\u53e5 DCL \u8bed\u53e5 DML \u8bed\u53e5 \u9ad8\u7ea7 SQL \u529f\u80fd \u6570\u636e\u7c7b\u578b \u7d22\u5f15\u548c\u7ea6\u675f \u5206\u533a\u652f\u6301 \u51fd\u6570\u4e0e\u64cd\u4f5c\u7b26 \u5b58\u50a8\u5f15\u64ce \u4e8b\u52a1 \u5b89\u5168\u4e0e\u6743\u9650 \u5907\u4efd\u6062\u590d \u7cfb\u7edf\u53d8\u91cf \u7f16\u7a0b\u8bed\u8a00 \u5468\u8fb9\u5de5\u5177 DDL \u8bed\u53e5 DATABASE \u76f8\u5173 \u4e0d\u652f\u6301\u4e2d\u6587\u547d\u540d\u7684\u8868\u540d\u3002 ENCRYPTION \u76ee\u524d\u8bed\u6cd5\u652f\u6301\u4f46\u4e0d\u751f\u6548\u3002 \u4e0d\u652f\u6301 ALTER DATABASE \u3002 \u4ec5\u9ed8\u8ba4\u652f\u6301 utf8mb4 \u5b57\u7b26\u96c6\u548c utf8mb4_bin \u6392\u5e8f\u89c4\u5219\uff0c\u65e0\u6cd5\u66f4\u6539\u3002 TABLE \u76f8\u5173 \u4e0d\u652f\u6301 CREATE TABLE .. AS SELECT \u8bed\u53e5\u3002 \u4e0d\u652f\u6301\u8868\u5b9a\u4e49\u4e2d\u7684 ENGINE= \uff0c\u4f46 MatrixOne Cloud \u4f1a\u76f4\u63a5\u5ffd\u7565 ENGINE= \u3002 ALTER TABLE \u4e2d\u7684\u8fd9\u4e9b\u5b50\u53e5\uff1a CHANGE [COLUMN] \uff0c MODIFY [COLUMN] \uff0c RENAME COLUMN \uff0c ADD [CONSTRAINT [symbol]] PRIMARY KEY \uff0c DROP PRIMARY KEY \u548c ALTER COLUMN ORDER BY \u53ef\u4ee5\u5728 ALTER TABLE \u8bed\u53e5\u4e2d\u81ea\u7531\u7ec4\u5408\u4f7f\u7528\uff0c\u4f46\u4e0d\u652f\u6301\u4e0e\u5176\u4ed6\u5b50\u53e5\u4e00\u8d77\u4f7f\u7528\u3002 \u4e34\u65f6\u8868\u6682\u4e0d\u652f\u6301\u4f7f\u7528 ALTER TABLE \u4fee\u6539\u8868\u7ed3\u6784\u3002 \u4f7f\u7528 CREATE TABLE ... CLUSTER BY... \u6240\u5efa\u7684\u8868\uff0c\u4e0d\u652f\u6301\u4f7f\u7528 ALTER TABLE \u4fee\u6539\u8868\u7ed3\u6784\u3002 ALTER TABLE \u4e0d\u652f\u6301 PARTITION \u76f8\u5173\u7684\u64cd\u4f5c\u3002 \u652f\u6301\u5b9a\u4e49 Cluster by column \u5b57\u53e5\uff0c\u5bf9\u67d0\u5217\u8fdb\u884c\u9884\u6392\u5e8f\u52a0\u901f\u67e5\u8be2\u3002 VIEW \u76f8\u5173 \u4e0d\u652f\u6301 CREATE OR REPLACE VIEW \u3002 \u4e0d\u652f\u6301 with check option \u5b50\u53e5\u3002 \u4e0d\u652f\u6301 DEFINER \u4e0e SQL SECURITY \u5b50\u53e5\u3002 SEQUENCE \u76f8\u5173 MySQL \u4e0d\u652f\u6301 SEQUENCE \u5bf9\u8c61\uff0c\u800c MatrixOne Cloud \u53ef\u4ee5\u901a\u8fc7 CREATE SEQUENCE \u521b\u5efa\u4e00\u4e2a\u5e8f\u5217\uff0cMatrixOne Cloud \u7684\u8bed\u6cd5\u4e0e PostgreSQL \u76f8\u540c\u3002 \u5728\u8868\u4e2d\u4f7f\u7528 SEQUENCE \u65f6\uff0c\u9700\u8981\u6ce8\u610f auto_increment \u4e0e sequence \u4e0d\u80fd\u4e00\u8d77\u7528\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002 DCL \u8bed\u53e5 ACCOUNT \u76f8\u5173 \u591a\u79df\u6237 Account \u662f MatrixOne Cloud \u72ec\u6709\u529f\u80fd\uff0c\u5305\u62ec CREATE/ALTER/DROP ACCOUNT \u7b49\u76f8\u5173\u8bed\u53e5\u3002 \u6743\u9650\u76f8\u5173 GRANT\uff0c\u6388\u6743\u903b\u8f91\u4e0e MySQL \u6709\u5dee\u5f02\u3002 REVOLE\uff0c\u56de\u6536\u6743\u9650\u903b\u8f91\u4e0e MySQL \u6709\u5dee\u5f02\u3002 SHOW \u76f8\u5173 MatrixOne Cloud \u4e0d\u652f\u6301\u5bf9\u67d0\u4e9b\u5bf9\u8c61\u8fdb\u884c SHOW \u64cd\u4f5c\uff0c\u5305\u62ec TRIGGER \uff0c FUNCTION \uff0c EVENT \uff0c PROCEDURE \uff0c ENGINE \u7b49\u3002 \u7531\u4e8e\u67b6\u6784\u4e0a\u7684\u4e0d\u540c\uff0cMatrixOne Cloud \u5b9e\u73b0\u4e86\u90e8\u5206 SHOW \u547d\u4ee4\u4ec5\u51fa\u4e8e\u8bed\u6cd5\u7684\u517c\u5bb9\u6027\uff0c\u8fd9\u4e9b\u547d\u4ee4\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u8f93\u51fa\uff0c\u5982 SHOW STATUS/PRIVILEGES \u7b49\u3002 \u6709\u4e9b\u547d\u4ee4\u867d\u7136\u5728\u8bed\u6cd5\u4e0a\u4e0e MySQL \u76f8\u540c\uff0c\u4f46\u7531\u4e8e\u5b9e\u73b0\u65b9\u5f0f\u7684\u4e0d\u540c\uff0c\u5176\u7ed3\u679c\u4e0e MySQL \u4f1a\u6709\u8f83\u5927\u5dee\u5f02\uff0c\u5982\uff1a SHOW GRANTS \uff0c SHOW ERRORS \uff0c SHOW VARIABLES \uff0c SHOW PROCESSLIST \u3002 MatrixOne Cloud \u63d0\u4f9b\u4e86\u4e00\u4e9b\u7279\u6709\u7684 SHOW \u547d\u4ee4\u4ee5\u65b9\u4fbf\u5176\u81ea\u8eab\u7684\u7ba1\u7406\uff0c\u5305\u62ec SHOW BACKEND SERVERS \uff0c SHOW ACCOUNTS \uff0c SHOW ROLES \uff0c SHOW NODE LIST \u7b49\u3002 \u5173\u4e8e SET MatrixOne Cloud \u7684\u7cfb\u7edf\u53d8\u91cf\u4e0e MySQL \u5b58\u5728\u8f83\u5927\u5dee\u5f02\uff0c\u5927\u90e8\u5206\u53ea\u662f\u4e3a\u4e86\u5b9e\u73b0\u8bed\u6cd5\u7684\u517c\u5bb9\u6027\uff0c\u76ee\u524d\u5b9e\u9645\u53ef\u8bbe\u7f6e\u7684\u53c2\u6570\u5305\u62ec\uff1a ROLE \uff0c SQL_MODE \uff0c TIME_ZONE \u3002 DML \u8bed\u53e5 SELECT \u76f8\u5173 SELECT...FOR UPDATE \u5f53\u524d\u4ec5\u652f\u6301\u5355\u8868\u67e5\u8be2\u3002 INSERT \u76f8\u5173 MatrixOne Cloud \u4e0d\u652f\u6301 LOW_PRIORITY \uff0c DELAYED \uff0c HIGH_PRIORITY \uff0c IGNORE \u7b49\u4fee\u9970\u7b26\u3002 UPDATE \u76f8\u5173 MatrixOne Cloud \u4e0d\u652f\u6301\u4f7f\u7528 LOW_PRIORITY \u548c IGNORE \u4fee\u9970\u7b26\u3002 DELETE \u76f8\u5173 MatrixOne Cloud \u4e0d\u652f\u6301 LOW_PRIORITY \uff0c QUICK \uff0c IGNORE \u7b49\u4fee\u9970\u7b26\u3002 \u5b50\u67e5\u8be2\u76f8\u5173 MatrixOne Cloud \u4e0d\u652f\u6301 IN \u7684\u591a\u5c42\u5173\u8054\u5b50\u67e5\u8be2\u3002 LOAD \u76f8\u5173 MatrixOne Cloud \u652f\u6301 SET \uff0c\u4f46\u53ea\u652f\u6301 SET columns_name=nullif(expr1,expr2) \u7684\u5f62\u5f0f\u3002 MatrixOne Cloud \u4e0d\u652f\u6301 ESCAPED BY \u3002 MatrixOne Cloud \u652f\u6301\u5ba2\u6237\u7aef\u6267\u884c LOAD DATA LOCAL \uff0c\u4f46\u5728\u8fde\u63a5\u65f6\u5fc5\u987b\u52a0\u5165 --local-infle \u53c2\u6570\u3002 MatrixOne Cloud \u652f\u6301\u5bfc\u5165 JSONlines \u6587\u4ef6\uff0c\u4f46\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684\u8bed\u6cd5\u3002 MatrixOne Cloud \u652f\u6301\u4ece\u5bf9\u8c61\u5b58\u50a8\u5bfc\u5165\u6587\u4ef6\uff0c\u4f46\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684\u8bed\u6cd5\u3002 EXPLAIN \u76f8\u5173 MatrixOne Cloud \u7684 Explain \u548c Explain Analyze \u6253\u5370\u683c\u5f0f\u5747\u53c2\u7167 PostgreSQL\uff0c\u4e0e MySQL \u6709\u8f83\u5927\u4e0d\u540c\u3002 \u4e0d\u652f\u6301 JSON \u7c7b\u578b\u7684\u8f93\u51fa\u3002 \u5176\u4ed6 REPLACE \u8bed\u53e5\u4e0d\u652f\u6301\u4f7f\u7528 VALUES row_constructor_list \u53c2\u6570\u63d2\u5165\u7684\u4e00\u7ec4\u503c\u6784\u6210\u7684\u884c\u3002 \u9ad8\u7ea7 SQL \u529f\u80fd \u4e0d\u652f\u6301\u89e6\u53d1\u5668\u3002 \u4e0d\u652f\u6301\u5b58\u50a8\u8fc7\u7a0b\u3002 \u4e0d\u652f\u6301\u4e8b\u4ef6\u8c03\u5ea6\u5668\u3002 \u4e0d\u652f\u6301\u81ea\u5b9a\u4e49\u51fd\u6570\u3002 \u4e0d\u652f\u6301\u7269\u5316\u89c6\u56fe\u3002 \u6570\u636e\u7c7b\u578b BOOL: \u4e0e MySQL \u7684\u5e03\u5c14\u503c\u7c7b\u578b\u5b9e\u9645\u4e0a\u662f int \u4e0d\u540c\uff0cMatrixOne Cloud \u7684\u5e03\u5c14\u503c\u662f\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u5b83\u7684\u503c\u53ea\u80fd\u662f true \u6216 false\u3002 DECIMAL\uff1aDECIMAL(P,D)\uff0cMatrixOne Cloud \u7684\u6709\u6548\u6570\u5b57 P \u548c\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570 D \u6700\u5927\u7cbe\u5ea6\u5747\u4e3a 38 \u4f4d\uff0cMySQL \u5219\u5206\u522b\u4e3a 65 \u548c 30\u3002 \u6d6e\u70b9\u6570\uff1aMySQL8.0.17 \u540e\u5e9f\u5f03 Float(M,D) \u53ca Double(M,D) \u7528\u6cd5\uff0c\u4f46 MatrixOne Cloud \u4ecd\u4fdd\u7559\u8be5\u7528\u6cd5\u3002 DATETIME: MySQL \u7684\u6700\u5927\u53d6\u503c\u8303\u56f4\u4e3a '1000-01-01 00:00:00' \u5230 '9999-12-31 23:59:59' \uff0cMatrixOne Cloud \u7684\u6700\u5927\u8303\u56f4\u4e3a '0001-01-01 00:00:00' \u5230 '9999-12-31 23:59:59' \u3002 TIMESTAMP: MySQL \u7684\u6700\u5927\u53d6\u503c\u8303\u56f4\u662f '1970-01-01 00:00:01.000000' UTC \u5230 '2038-01-19 03:14:07.999999' UTC\uff0cMatrixOne Cloud \u7684\u6700\u5927\u8303\u56f4 '0001-01-01 00:00:00' UTC \u5230 '9999-12-31 23:59:59' UTC\u3002 MatrixOne Cloud \u652f\u6301 UUID \u7c7b\u578b\u3002 \u4e0d\u652f\u6301\u7a7a\u95f4 Spatial \u7c7b\u578b\u3002 \u4e0d\u652f\u6301 BIT\uff0cSET \u7c7b\u578b\u3002 \u4e0d\u652f\u6301 MEDIUMINT \u7c7b\u578b\u3002 \u7d22\u5f15\u548c\u7ea6\u675f \u6b21\u7ea7\u7d22\u5f15\u4ec5\u5b9e\u73b0\u8bed\u6cd5\uff0c\u5e76\u6ca1\u6709\u52a0\u901f\u6548\u679c\u3002 \u5916\u952e\u4e0d\u652f\u6301 ON CASCADE DELETE \u7ea7\u8054\u5220\u9664\u3002 \u5206\u533a\u652f\u6301 \u4ec5\u652f\u6301 KEY \uff0c HASH \u4e24\u79cd\u5206\u533a\u7c7b\u578b\u3002 \u5b50\u5206\u533a\u4ec5\u5b9e\u73b0\u8bed\u6cd5\uff0c\u672a\u5b9e\u73b0\u529f\u80fd\u3002 \u51fd\u6570\u4e0e\u64cd\u4f5c\u7b26 \u805a\u5408\u51fd\u6570 \u652f\u6301 MatrixOne Cloud \u7279\u6709\u7684 Median \u4e2d\u4f4d\u6570\u51fd\u6570\u3002 \u65f6\u95f4\u65e5\u671f\u7c7b\u51fd\u6570 MatrixOne Cloud \u7684 TO_DATE \u51fd\u6570\u4e0e MySQL \u7684 STR_TO_DATE \u51fd\u6570\u8d77\u5230\u76f8\u540c\u529f\u80fd\u3002 CAST \u51fd\u6570 \u7c7b\u578b\u8f6c\u6362\u89c4\u5219\u4e0e MySQL \u5dee\u5f02\u8f83\u5927\uff0c\u8bf7\u53c2\u8003 CAST \u3002 \u7a97\u53e3\u51fd\u6570 \u4ec5\u652f\u6301 RANK \uff0c DENSE_RANK \uff0c ROW_NUMBER \u3002 JSON \u51fd\u6570 \u4ec5\u652f\u6301 JSON_UNQUOTE \uff0c JSON_QUOTE \uff0c JSON_EXTRACT \u3002 \u7cfb\u7edf\u7ba1\u7406\u51fd\u6570 \u652f\u6301 CURRENT_ROLE_NAME() \uff0c CURRENT_ROLE() \uff0c CURRENT_USER_NAME() \uff0c CURRENT_USER \uff0c PURGE_LOG() \u3002 \u5b58\u50a8\u5f15\u64ce MatrixOne Cloud \u7684 TAE \u5b58\u50a8\u5f15\u64ce\u662f\u5b8c\u5168\u72ec\u7acb\u7814\u53d1\u7684\uff0c\u4e0d\u652f\u6301 MySQL \u7684 InnoDB\uff0cMyISAM \u7b49\u5f15\u64ce\u3002 MatrixOne Cloud \u4e2d\u4ec5\u6709 TAE \u4e00\u79cd\u5b58\u50a8\u5f15\u64ce\uff0c\u65e0\u9700\u4f7f\u7528 ENGINE=XXX \u6765\u66f4\u6362\u5f15\u64ce\u3002 \u5b89\u5168\u4e0e\u6743\u9650 \u4ec5\u652f\u6301\u4f7f\u7528 ALTER USER \u65b9\u6cd5\u4fee\u6539\u5bc6\u7801\u3002 \u4e0d\u652f\u6301\u4fee\u6539\u7528\u6237\u8fde\u63a5\u4e2a\u6570\u4e0a\u9650\u3002 \u4e0d\u652f\u6301\u8fde\u63a5 IP \u767d\u540d\u5355\u3002 \u4e0d\u652f\u6301 LOAD \u6587\u4ef6\u6388\u6743\u7ba1\u7406\u3002 \u53ef\u4ee5\u901a\u8fc7 CREATE STAGE \u90e8\u5206\u652f\u6301 SELECT INTO \u6587\u4ef6\u6388\u6743\u7ba1\u7406\u3002 \u4e8b\u52a1 MatrixOne Cloud \u9ed8\u8ba4\u4e3a\u60b2\u89c2\u4e8b\u52a1\u3002 \u4e0e MySQL \u4e0d\u540c\uff0cMatrixOne Cloud \u4e2d\u7684 DDL \u8bed\u53e5\u662f\u4e8b\u52a1\u6027\u7684\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u56de\u6eda DDL \u64cd\u4f5c\u3002 \u4e0d\u652f\u6301\u8868\u7ea7\u9501 LOCK/UNLOCK TABLE \u3002 \u5907\u4efd\u6062\u590d \u652f\u6301\u7269\u7406\u5907\u4efd\u3002 \u4e0d\u652f\u6301 mysqldump \u5907\u4efd\u5de5\u5177\uff0c\u4ec5\u652f\u6301 modump \u5de5\u5177\u3002 \u4e0d\u652f\u6301 binlog \u65e5\u5fd7\u5907\u4efd\u3002 \u4e0d\u652f\u6301\u589e\u91cf\u5907\u4efd\u3002 \u7cfb\u7edf\u53d8\u91cf MatrixOne Cloud \u7684 lower_case_table_names \u6709 5 \u79cd\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3a 1\u3002 \u7f16\u7a0b\u8bed\u8a00 Java\uff0cPython\uff0cGolang \u8fde\u63a5\u5668\u548c ORM \u57fa\u672c\u652f\u6301\uff0c\u5176\u4ed6\u8bed\u8a00\u7684\u8fde\u63a5\u5668\u53ca ORM \u53ef\u80fd\u4f1a\u78b0\u5230\u517c\u5bb9\u6027\u95ee\u9898\u3002 \u5176\u4ed6\u652f\u6301\u5de5\u5177 Navicat\uff0cDBeaver\uff0cMySQL Workbench\uff0cHeidiSQL \u57fa\u672c\u652f\u6301\uff0c\u4f46\u662f\u7531\u4e8e ALTER TABLE \u80fd\u529b\u4e0d\u5b8c\u5584\uff0c\u8868\u8bbe\u8ba1\u529f\u80fd\u652f\u6301\u4e0d\u5b8c\u5584\u3002 \u4e0d\u652f\u6301 xtrabackup \u5907\u4efd\u5de5\u5177\u3002","title":"MySQL \u517c\u5bb9\u6027"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#mysql","text":"\u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u5bf9\u6bd4\u5e76\u4ecb\u7ecd MatrixOne Cloud \u6570\u636e\u5e93\u7684 MySQL \u6a21\u5f0f\u4ee5\u53ca\u539f\u751f MySQL \u6570\u636e\u5e93\u7684\u517c\u5bb9\u6027\u4fe1\u606f\u3002 MatrixOne Cloud \u4e0e MySQL 8.0 \u7684\u534f\u8bae\uff0c\u4ee5\u53ca MySQL 8.0 \u5e38\u7528\u7684\u529f\u80fd\u548c\u8bed\u6cd5\u90fd\u5177\u6709\u9ad8\u5ea6\u7684\u517c\u5bb9\u6027\u3002\u6b64\u5916\uff0cMatrixOne Cloud \u4e5f\u5bf9\u5e38\u89c1\u7684 MySQL \u5468\u8fb9\u5de5\u5177\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u5982 Navicat\uff0cMySQL Workbench\uff0cJDBC \u7b49\u3002\u7136\u800c\uff0c\u7531\u4e8e MatrixOne Cloud \u7684\u6280\u672f\u67b6\u6784\u4e0d\u540c\uff0c\u4e14\u4ecd\u5904\u4e8e\u53d1\u5c55\u548c\u5b8c\u5584\u9636\u6bb5\uff0c\u56e0\u6b64\u6709\u4e00\u4e9b\u529f\u80fd\u5c1a\u672a\u5f97\u5230\u652f\u6301\u3002\u672c\u8282\u5c06\u4e3b\u8981\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u8be6\u8ff0 MatrixOne Cloud \u6570\u636e\u5e93\u7684 MySQL \u6a21\u5f0f\u4e0e\u539f\u751f MySQL \u6570\u636e\u5e93\u7684\u533a\u522b\uff1a DDL \u8bed\u53e5 DCL \u8bed\u53e5 DML \u8bed\u53e5 \u9ad8\u7ea7 SQL \u529f\u80fd \u6570\u636e\u7c7b\u578b \u7d22\u5f15\u548c\u7ea6\u675f \u5206\u533a\u652f\u6301 \u51fd\u6570\u4e0e\u64cd\u4f5c\u7b26 \u5b58\u50a8\u5f15\u64ce \u4e8b\u52a1 \u5b89\u5168\u4e0e\u6743\u9650 \u5907\u4efd\u6062\u590d \u7cfb\u7edf\u53d8\u91cf \u7f16\u7a0b\u8bed\u8a00 \u5468\u8fb9\u5de5\u5177","title":"MySQL \u517c\u5bb9\u6027"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#ddl","text":"","title":"DDL \u8bed\u53e5"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#database","text":"\u4e0d\u652f\u6301\u4e2d\u6587\u547d\u540d\u7684\u8868\u540d\u3002 ENCRYPTION \u76ee\u524d\u8bed\u6cd5\u652f\u6301\u4f46\u4e0d\u751f\u6548\u3002 \u4e0d\u652f\u6301 ALTER DATABASE \u3002 \u4ec5\u9ed8\u8ba4\u652f\u6301 utf8mb4 \u5b57\u7b26\u96c6\u548c utf8mb4_bin \u6392\u5e8f\u89c4\u5219\uff0c\u65e0\u6cd5\u66f4\u6539\u3002","title":"DATABASE \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#table","text":"\u4e0d\u652f\u6301 CREATE TABLE .. AS SELECT \u8bed\u53e5\u3002 \u4e0d\u652f\u6301\u8868\u5b9a\u4e49\u4e2d\u7684 ENGINE= \uff0c\u4f46 MatrixOne Cloud \u4f1a\u76f4\u63a5\u5ffd\u7565 ENGINE= \u3002 ALTER TABLE \u4e2d\u7684\u8fd9\u4e9b\u5b50\u53e5\uff1a CHANGE [COLUMN] \uff0c MODIFY [COLUMN] \uff0c RENAME COLUMN \uff0c ADD [CONSTRAINT [symbol]] PRIMARY KEY \uff0c DROP PRIMARY KEY \u548c ALTER COLUMN ORDER BY \u53ef\u4ee5\u5728 ALTER TABLE \u8bed\u53e5\u4e2d\u81ea\u7531\u7ec4\u5408\u4f7f\u7528\uff0c\u4f46\u4e0d\u652f\u6301\u4e0e\u5176\u4ed6\u5b50\u53e5\u4e00\u8d77\u4f7f\u7528\u3002 \u4e34\u65f6\u8868\u6682\u4e0d\u652f\u6301\u4f7f\u7528 ALTER TABLE \u4fee\u6539\u8868\u7ed3\u6784\u3002 \u4f7f\u7528 CREATE TABLE ... CLUSTER BY... \u6240\u5efa\u7684\u8868\uff0c\u4e0d\u652f\u6301\u4f7f\u7528 ALTER TABLE \u4fee\u6539\u8868\u7ed3\u6784\u3002 ALTER TABLE \u4e0d\u652f\u6301 PARTITION \u76f8\u5173\u7684\u64cd\u4f5c\u3002 \u652f\u6301\u5b9a\u4e49 Cluster by column \u5b57\u53e5\uff0c\u5bf9\u67d0\u5217\u8fdb\u884c\u9884\u6392\u5e8f\u52a0\u901f\u67e5\u8be2\u3002","title":"TABLE \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#view","text":"\u4e0d\u652f\u6301 CREATE OR REPLACE VIEW \u3002 \u4e0d\u652f\u6301 with check option \u5b50\u53e5\u3002 \u4e0d\u652f\u6301 DEFINER \u4e0e SQL SECURITY \u5b50\u53e5\u3002","title":"VIEW \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#sequence","text":"MySQL \u4e0d\u652f\u6301 SEQUENCE \u5bf9\u8c61\uff0c\u800c MatrixOne Cloud \u53ef\u4ee5\u901a\u8fc7 CREATE SEQUENCE \u521b\u5efa\u4e00\u4e2a\u5e8f\u5217\uff0cMatrixOne Cloud \u7684\u8bed\u6cd5\u4e0e PostgreSQL \u76f8\u540c\u3002 \u5728\u8868\u4e2d\u4f7f\u7528 SEQUENCE \u65f6\uff0c\u9700\u8981\u6ce8\u610f auto_increment \u4e0e sequence \u4e0d\u80fd\u4e00\u8d77\u7528\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002","title":"SEQUENCE \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#dcl","text":"","title":"DCL \u8bed\u53e5"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#account","text":"\u591a\u79df\u6237 Account \u662f MatrixOne Cloud \u72ec\u6709\u529f\u80fd\uff0c\u5305\u62ec CREATE/ALTER/DROP ACCOUNT \u7b49\u76f8\u5173\u8bed\u53e5\u3002","title":"ACCOUNT \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_1","text":"GRANT\uff0c\u6388\u6743\u903b\u8f91\u4e0e MySQL \u6709\u5dee\u5f02\u3002 REVOLE\uff0c\u56de\u6536\u6743\u9650\u903b\u8f91\u4e0e MySQL \u6709\u5dee\u5f02\u3002","title":"\u6743\u9650\u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#show","text":"MatrixOne Cloud \u4e0d\u652f\u6301\u5bf9\u67d0\u4e9b\u5bf9\u8c61\u8fdb\u884c SHOW \u64cd\u4f5c\uff0c\u5305\u62ec TRIGGER \uff0c FUNCTION \uff0c EVENT \uff0c PROCEDURE \uff0c ENGINE \u7b49\u3002 \u7531\u4e8e\u67b6\u6784\u4e0a\u7684\u4e0d\u540c\uff0cMatrixOne Cloud \u5b9e\u73b0\u4e86\u90e8\u5206 SHOW \u547d\u4ee4\u4ec5\u51fa\u4e8e\u8bed\u6cd5\u7684\u517c\u5bb9\u6027\uff0c\u8fd9\u4e9b\u547d\u4ee4\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u8f93\u51fa\uff0c\u5982 SHOW STATUS/PRIVILEGES \u7b49\u3002 \u6709\u4e9b\u547d\u4ee4\u867d\u7136\u5728\u8bed\u6cd5\u4e0a\u4e0e MySQL \u76f8\u540c\uff0c\u4f46\u7531\u4e8e\u5b9e\u73b0\u65b9\u5f0f\u7684\u4e0d\u540c\uff0c\u5176\u7ed3\u679c\u4e0e MySQL \u4f1a\u6709\u8f83\u5927\u5dee\u5f02\uff0c\u5982\uff1a SHOW GRANTS \uff0c SHOW ERRORS \uff0c SHOW VARIABLES \uff0c SHOW PROCESSLIST \u3002 MatrixOne Cloud \u63d0\u4f9b\u4e86\u4e00\u4e9b\u7279\u6709\u7684 SHOW \u547d\u4ee4\u4ee5\u65b9\u4fbf\u5176\u81ea\u8eab\u7684\u7ba1\u7406\uff0c\u5305\u62ec SHOW BACKEND SERVERS \uff0c SHOW ACCOUNTS \uff0c SHOW ROLES \uff0c SHOW NODE LIST \u7b49\u3002","title":"SHOW \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#set","text":"MatrixOne Cloud \u7684\u7cfb\u7edf\u53d8\u91cf\u4e0e MySQL \u5b58\u5728\u8f83\u5927\u5dee\u5f02\uff0c\u5927\u90e8\u5206\u53ea\u662f\u4e3a\u4e86\u5b9e\u73b0\u8bed\u6cd5\u7684\u517c\u5bb9\u6027\uff0c\u76ee\u524d\u5b9e\u9645\u53ef\u8bbe\u7f6e\u7684\u53c2\u6570\u5305\u62ec\uff1a ROLE \uff0c SQL_MODE \uff0c TIME_ZONE \u3002","title":"\u5173\u4e8e SET"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#dml","text":"","title":"DML \u8bed\u53e5"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#select","text":"SELECT...FOR UPDATE \u5f53\u524d\u4ec5\u652f\u6301\u5355\u8868\u67e5\u8be2\u3002","title":"SELECT \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#insert","text":"MatrixOne Cloud \u4e0d\u652f\u6301 LOW_PRIORITY \uff0c DELAYED \uff0c HIGH_PRIORITY \uff0c IGNORE \u7b49\u4fee\u9970\u7b26\u3002","title":"INSERT \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#update","text":"MatrixOne Cloud \u4e0d\u652f\u6301\u4f7f\u7528 LOW_PRIORITY \u548c IGNORE \u4fee\u9970\u7b26\u3002","title":"UPDATE \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#delete","text":"MatrixOne Cloud \u4e0d\u652f\u6301 LOW_PRIORITY \uff0c QUICK \uff0c IGNORE \u7b49\u4fee\u9970\u7b26\u3002","title":"DELETE \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_2","text":"MatrixOne Cloud \u4e0d\u652f\u6301 IN \u7684\u591a\u5c42\u5173\u8054\u5b50\u67e5\u8be2\u3002","title":"\u5b50\u67e5\u8be2\u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#load","text":"MatrixOne Cloud \u652f\u6301 SET \uff0c\u4f46\u53ea\u652f\u6301 SET columns_name=nullif(expr1,expr2) \u7684\u5f62\u5f0f\u3002 MatrixOne Cloud \u4e0d\u652f\u6301 ESCAPED BY \u3002 MatrixOne Cloud \u652f\u6301\u5ba2\u6237\u7aef\u6267\u884c LOAD DATA LOCAL \uff0c\u4f46\u5728\u8fde\u63a5\u65f6\u5fc5\u987b\u52a0\u5165 --local-infle \u53c2\u6570\u3002 MatrixOne Cloud \u652f\u6301\u5bfc\u5165 JSONlines \u6587\u4ef6\uff0c\u4f46\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684\u8bed\u6cd5\u3002 MatrixOne Cloud \u652f\u6301\u4ece\u5bf9\u8c61\u5b58\u50a8\u5bfc\u5165\u6587\u4ef6\uff0c\u4f46\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684\u8bed\u6cd5\u3002","title":"LOAD \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#explain","text":"MatrixOne Cloud \u7684 Explain \u548c Explain Analyze \u6253\u5370\u683c\u5f0f\u5747\u53c2\u7167 PostgreSQL\uff0c\u4e0e MySQL \u6709\u8f83\u5927\u4e0d\u540c\u3002 \u4e0d\u652f\u6301 JSON \u7c7b\u578b\u7684\u8f93\u51fa\u3002","title":"EXPLAIN \u76f8\u5173"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_3","text":"REPLACE \u8bed\u53e5\u4e0d\u652f\u6301\u4f7f\u7528 VALUES row_constructor_list \u53c2\u6570\u63d2\u5165\u7684\u4e00\u7ec4\u503c\u6784\u6210\u7684\u884c\u3002","title":"\u5176\u4ed6"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#sql","text":"\u4e0d\u652f\u6301\u89e6\u53d1\u5668\u3002 \u4e0d\u652f\u6301\u5b58\u50a8\u8fc7\u7a0b\u3002 \u4e0d\u652f\u6301\u4e8b\u4ef6\u8c03\u5ea6\u5668\u3002 \u4e0d\u652f\u6301\u81ea\u5b9a\u4e49\u51fd\u6570\u3002 \u4e0d\u652f\u6301\u7269\u5316\u89c6\u56fe\u3002","title":"\u9ad8\u7ea7 SQL \u529f\u80fd"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_4","text":"BOOL: \u4e0e MySQL \u7684\u5e03\u5c14\u503c\u7c7b\u578b\u5b9e\u9645\u4e0a\u662f int \u4e0d\u540c\uff0cMatrixOne Cloud \u7684\u5e03\u5c14\u503c\u662f\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u5b83\u7684\u503c\u53ea\u80fd\u662f true \u6216 false\u3002 DECIMAL\uff1aDECIMAL(P,D)\uff0cMatrixOne Cloud \u7684\u6709\u6548\u6570\u5b57 P \u548c\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570 D \u6700\u5927\u7cbe\u5ea6\u5747\u4e3a 38 \u4f4d\uff0cMySQL \u5219\u5206\u522b\u4e3a 65 \u548c 30\u3002 \u6d6e\u70b9\u6570\uff1aMySQL8.0.17 \u540e\u5e9f\u5f03 Float(M,D) \u53ca Double(M,D) \u7528\u6cd5\uff0c\u4f46 MatrixOne Cloud \u4ecd\u4fdd\u7559\u8be5\u7528\u6cd5\u3002 DATETIME: MySQL \u7684\u6700\u5927\u53d6\u503c\u8303\u56f4\u4e3a '1000-01-01 00:00:00' \u5230 '9999-12-31 23:59:59' \uff0cMatrixOne Cloud \u7684\u6700\u5927\u8303\u56f4\u4e3a '0001-01-01 00:00:00' \u5230 '9999-12-31 23:59:59' \u3002 TIMESTAMP: MySQL \u7684\u6700\u5927\u53d6\u503c\u8303\u56f4\u662f '1970-01-01 00:00:01.000000' UTC \u5230 '2038-01-19 03:14:07.999999' UTC\uff0cMatrixOne Cloud \u7684\u6700\u5927\u8303\u56f4 '0001-01-01 00:00:00' UTC \u5230 '9999-12-31 23:59:59' UTC\u3002 MatrixOne Cloud \u652f\u6301 UUID \u7c7b\u578b\u3002 \u4e0d\u652f\u6301\u7a7a\u95f4 Spatial \u7c7b\u578b\u3002 \u4e0d\u652f\u6301 BIT\uff0cSET \u7c7b\u578b\u3002 \u4e0d\u652f\u6301 MEDIUMINT \u7c7b\u578b\u3002","title":"\u6570\u636e\u7c7b\u578b"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_5","text":"\u6b21\u7ea7\u7d22\u5f15\u4ec5\u5b9e\u73b0\u8bed\u6cd5\uff0c\u5e76\u6ca1\u6709\u52a0\u901f\u6548\u679c\u3002 \u5916\u952e\u4e0d\u652f\u6301 ON CASCADE DELETE \u7ea7\u8054\u5220\u9664\u3002","title":"\u7d22\u5f15\u548c\u7ea6\u675f"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_6","text":"\u4ec5\u652f\u6301 KEY \uff0c HASH \u4e24\u79cd\u5206\u533a\u7c7b\u578b\u3002 \u5b50\u5206\u533a\u4ec5\u5b9e\u73b0\u8bed\u6cd5\uff0c\u672a\u5b9e\u73b0\u529f\u80fd\u3002","title":"\u5206\u533a\u652f\u6301"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_7","text":"","title":"\u51fd\u6570\u4e0e\u64cd\u4f5c\u7b26"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_8","text":"\u652f\u6301 MatrixOne Cloud \u7279\u6709\u7684 Median \u4e2d\u4f4d\u6570\u51fd\u6570\u3002","title":"\u805a\u5408\u51fd\u6570"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_9","text":"MatrixOne Cloud \u7684 TO_DATE \u51fd\u6570\u4e0e MySQL \u7684 STR_TO_DATE \u51fd\u6570\u8d77\u5230\u76f8\u540c\u529f\u80fd\u3002","title":"\u65f6\u95f4\u65e5\u671f\u7c7b\u51fd\u6570"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#cast","text":"\u7c7b\u578b\u8f6c\u6362\u89c4\u5219\u4e0e MySQL \u5dee\u5f02\u8f83\u5927\uff0c\u8bf7\u53c2\u8003 CAST \u3002","title":"CAST \u51fd\u6570"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_10","text":"\u4ec5\u652f\u6301 RANK \uff0c DENSE_RANK \uff0c ROW_NUMBER \u3002","title":"\u7a97\u53e3\u51fd\u6570"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#json","text":"\u4ec5\u652f\u6301 JSON_UNQUOTE \uff0c JSON_QUOTE \uff0c JSON_EXTRACT \u3002","title":"JSON \u51fd\u6570"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_11","text":"\u652f\u6301 CURRENT_ROLE_NAME() \uff0c CURRENT_ROLE() \uff0c CURRENT_USER_NAME() \uff0c CURRENT_USER \uff0c PURGE_LOG() \u3002","title":"\u7cfb\u7edf\u7ba1\u7406\u51fd\u6570"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_12","text":"MatrixOne Cloud \u7684 TAE \u5b58\u50a8\u5f15\u64ce\u662f\u5b8c\u5168\u72ec\u7acb\u7814\u53d1\u7684\uff0c\u4e0d\u652f\u6301 MySQL \u7684 InnoDB\uff0cMyISAM \u7b49\u5f15\u64ce\u3002 MatrixOne Cloud \u4e2d\u4ec5\u6709 TAE \u4e00\u79cd\u5b58\u50a8\u5f15\u64ce\uff0c\u65e0\u9700\u4f7f\u7528 ENGINE=XXX \u6765\u66f4\u6362\u5f15\u64ce\u3002","title":"\u5b58\u50a8\u5f15\u64ce"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_13","text":"\u4ec5\u652f\u6301\u4f7f\u7528 ALTER USER \u65b9\u6cd5\u4fee\u6539\u5bc6\u7801\u3002 \u4e0d\u652f\u6301\u4fee\u6539\u7528\u6237\u8fde\u63a5\u4e2a\u6570\u4e0a\u9650\u3002 \u4e0d\u652f\u6301\u8fde\u63a5 IP \u767d\u540d\u5355\u3002 \u4e0d\u652f\u6301 LOAD \u6587\u4ef6\u6388\u6743\u7ba1\u7406\u3002 \u53ef\u4ee5\u901a\u8fc7 CREATE STAGE \u90e8\u5206\u652f\u6301 SELECT INTO \u6587\u4ef6\u6388\u6743\u7ba1\u7406\u3002","title":"\u5b89\u5168\u4e0e\u6743\u9650"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_14","text":"MatrixOne Cloud \u9ed8\u8ba4\u4e3a\u60b2\u89c2\u4e8b\u52a1\u3002 \u4e0e MySQL \u4e0d\u540c\uff0cMatrixOne Cloud \u4e2d\u7684 DDL \u8bed\u53e5\u662f\u4e8b\u52a1\u6027\u7684\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u56de\u6eda DDL \u64cd\u4f5c\u3002 \u4e0d\u652f\u6301\u8868\u7ea7\u9501 LOCK/UNLOCK TABLE \u3002","title":"\u4e8b\u52a1"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_15","text":"\u652f\u6301\u7269\u7406\u5907\u4efd\u3002 \u4e0d\u652f\u6301 mysqldump \u5907\u4efd\u5de5\u5177\uff0c\u4ec5\u652f\u6301 modump \u5de5\u5177\u3002 \u4e0d\u652f\u6301 binlog \u65e5\u5fd7\u5907\u4efd\u3002 \u4e0d\u652f\u6301\u589e\u91cf\u5907\u4efd\u3002","title":"\u5907\u4efd\u6062\u590d"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_16","text":"MatrixOne Cloud \u7684 lower_case_table_names \u6709 5 \u79cd\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3a 1\u3002","title":"\u7cfb\u7edf\u53d8\u91cf"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_17","text":"Java\uff0cPython\uff0cGolang \u8fde\u63a5\u5668\u548c ORM \u57fa\u672c\u652f\u6301\uff0c\u5176\u4ed6\u8bed\u8a00\u7684\u8fde\u63a5\u5668\u53ca ORM \u53ef\u80fd\u4f1a\u78b0\u5230\u517c\u5bb9\u6027\u95ee\u9898\u3002","title":"\u7f16\u7a0b\u8bed\u8a00"},{"location":"MatrixOne-Cloud/Overview/mysql-compatibility/#_18","text":"Navicat\uff0cDBeaver\uff0cMySQL Workbench\uff0cHeidiSQL \u57fa\u672c\u652f\u6301\uff0c\u4f46\u662f\u7531\u4e8e ALTER TABLE \u80fd\u529b\u4e0d\u5b8c\u5584\uff0c\u8868\u8bbe\u8ba1\u529f\u80fd\u652f\u6301\u4e0d\u5b8c\u5584\u3002 \u4e0d\u652f\u6301 xtrabackup \u5907\u4efd\u5de5\u5177\u3002","title":"\u5176\u4ed6\u652f\u6301\u5de5\u5177"}]}